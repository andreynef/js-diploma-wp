!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=67)}([function(e,t,n){"use strict";e.exports=n(33)},function(e,t,n){var r=n(6),o=n(62);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){var r=n(6),o=n(59);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r;n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return i})),n.d(t,"a",(function(){return l})),n.d(t,"f",(function(){return u})),n.d(t,"b",(function(){return c})),n.d(t,"e",(function(){return s}));var o=/^-?\d*\.?\d+(px|%)$/;function a(e){var t=(e?e.trim():"0px").split(/\s+/).map((function(e){if(!o.test(e))throw new Error("rootMargin must be a string literal containing pixels and/or percent values");return e})),n=t.shift(),r=t[0],a=void 0===r?n:r,i=t[1],l=void 0===i?n:i,u=t[2];return n+" "+a+" "+l+" "+(void 0===u?a:u)}function i(e,t){return Array.isArray(e)&&Array.isArray(t)&&e.length===t.length?e.some((function(n,r){return i(e[r],t[r])})):e!==t}var l=(r=Object.prototype).hasOwnProperty,u=r.toString;function c(e){return e&&l.call(e,"ref")}function s(e){return e&&"number"!=typeof e?e.join(","):e}},function(e,t,n){var r=n(6),o=n(60);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],u=t.base?a[0]+t.base:a[0],c=n[u]||0,s="".concat(u," ").concat(c);n[u]=c+1;var f=l(s),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=c(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=u(e,t),c=0;c<n.length;c++){var s=l(n[c]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return c}));var r=n(4),o=new Map;function a(e,t){var n=o.get(e);if(n)for(var r=n.values(),a=void 0;a=r.next().value;)if(a.target===t.target)return a;return null}function i(e,t){for(var n=0;n<e.length;n++){var r=a(t,e[n]);r&&r.handleChange(e[n])}}function l(e){var t=function(e){void 0===e&&(e={});for(var t,n=e.root||null,a=Object(r.c)(e.rootMargin),i=Array.isArray(e.threshold)?e.threshold:[null!=e.threshold?e.threshold:0],l=o.keys();t=l.next().value;){if(!(n!==t.root||a!==t.rootMargin||Object(r.d)(i,t.thresholds)))return t}return null}(e);if(t)return t;var n=new IntersectionObserver(i,e);return o.set(n,new Set),n}function u(e){var t;null===(t=o.get(e.observer))||void 0===t||t.add(e),e.observer.observe(e.target)}function c(e,t){if(o.has(e.observer)){var n=o.get(e.observer);(null==n?void 0:n.delete(e))&&(n.size>0?e.observer.unobserve(t):(e.observer.disconnect(),o.delete(e.observer)))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.toJson=function(e){return"function"==typeof e.json?e.json():e};var o=n(24),a=n(25),i=p(n(45)),l=p(n(46)),u=p(n(47)),c=p(n(48)),s=p(n(50)),f=p(n(51)),d=p(n(52));function p(e){return e&&e.__esModule?e:{default:e}}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var m=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h(this,e),this._apiUrl=t.apiUrl||o.API_URL,this._apiVersion=t.apiVersion||o.API_VERSION,this._accessKey=t.accessKey,this._secret=t.secret,this._callbackUrl=t.callbackUrl,this._bearerToken=t.bearerToken,this._headers=t.headers||{},this._timeout=t.timeout||0,this.auth=i.default.bind(this)(),this.currentUser=l.default.bind(this)(),this.users=u.default.bind(this)(),this.photos=c.default.bind(this)(),this.collections=s.default.bind(this)(),this.search=f.default.bind(this)(),this.stats=d.default.bind(this)()}return r(e,[{key:"request",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=a.buildFetchOptions.bind(this)(e),n=t.url,r=t.options;return fetch(n,r)}}]),e}();t.default=m},function(e,t,n){var r=n(6),o=n(55);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){var r=n(6),o=n(57);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){e.exports=n(63)()},function(e,t,n){var r=n(6),o=n(53);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(34)},function(e,t,n){var r=n(6),o=n(54);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(6),o=n(56);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){var r=n(6),o=n(58);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=function(e){return Array.isArray(e)?e:[e]},o=function(e){return e instanceof Node},a=function(e,t){if(e&&t){e=function(e){return e instanceof NodeList}(e)?e:[e];for(var n=0;n<e.length&&!0!==t(e[n],n,e.length);n++);}},i=function(e){return console.error("[scroll-lock] ".concat(e))},l=function(e){if(Array.isArray(e))return e.join(", ")},u=function(e){var t=[];return a(e,(function(e){return t.push(e)})),t},c=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:document;if(n&&-1!==u(r.querySelectorAll(t)).indexOf(e))return e;for(;(e=e.parentElement)&&-1===u(r.querySelectorAll(t)).indexOf(e););return e},s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:document,r=-1!==u(n.querySelectorAll(t)).indexOf(e);return r},f=function(e){if(e)return"hidden"===getComputedStyle(e).overflow},d=function(e){if(e)return!!f(e)||e.scrollTop<=0},p=function(e){if(e){if(f(e))return!0;var t=e.scrollTop,n=e.scrollHeight;return t+e.offsetHeight>=n}},h=function(e){if(e)return!!f(e)||e.scrollLeft<=0},m=function(e){if(e){if(f(e))return!0;var t=e.scrollLeft,n=e.scrollWidth;return t+e.offsetWidth>=n}},v=function(e){return s(e,'textarea, [contenteditable="true"]')},g=function(e){return s(e,'input[type="range"]')};function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"disablePageScroll",(function(){return x})),n.d(t,"enablePageScroll",(function(){return _})),n.d(t,"getScrollState",(function(){return k})),n.d(t,"clearQueueScrollLocks",(function(){return E})),n.d(t,"getTargetScrollBarWidth",(function(){return C})),n.d(t,"getCurrentTargetScrollBarWidth",(function(){return T})),n.d(t,"getPageScrollBarWidth",(function(){return S})),n.d(t,"getCurrentPageScrollBarWidth",(function(){return P})),n.d(t,"addScrollableTarget",(function(){return O})),n.d(t,"removeScrollableTarget",(function(){return N})),n.d(t,"addScrollableSelector",(function(){return j})),n.d(t,"removeScrollableSelector",(function(){return M})),n.d(t,"addLockableTarget",(function(){return L})),n.d(t,"addLockableSelector",(function(){return A})),n.d(t,"setFillGapMethod",(function(){return I})),n.d(t,"addFillGapTarget",(function(){return R})),n.d(t,"removeFillGapTarget",(function(){return z})),n.d(t,"addFillGapSelector",(function(){return F})),n.d(t,"removeFillGapSelector",(function(){return U})),n.d(t,"refillGaps",(function(){return D}));var b=["padding","margin","width","max-width","none"],w={scroll:!0,queue:0,scrollableSelectors:["[data-scroll-lock-scrollable]"],lockableSelectors:["body","[data-scroll-lock-lockable]"],fillGapSelectors:["body","[data-scroll-lock-fill-gap]","[data-scroll-lock-lockable]"],fillGapMethod:b[0],startTouchY:0,startTouchX:0},x=function(e){w.queue<=0&&(w.scroll=!1,W(),G()),O(e),w.queue++},_=function(e){w.queue>0&&w.queue--,w.queue<=0&&(w.scroll=!0,B(),Q()),N(e)},k=function(){return w.scroll},E=function(){w.queue=0},C=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(o(e)){var n=e.style.overflowY;t?k()||(e.style.overflowY=e.getAttribute("data-scroll-lock-saved-overflow-y-property")):e.style.overflowY="scroll";var r=T(e);return e.style.overflowY=n,r}return 0},T=function(e){if(o(e)){if(e===document.body){var t=document.documentElement.clientWidth;return window.innerWidth-t}var n=e.style.borderLeftWidth,r=e.style.borderRightWidth;e.style.borderLeftWidth="0px",e.style.borderRightWidth="0px";var a=e.offsetWidth-e.clientWidth;return e.style.borderLeftWidth=n,e.style.borderRightWidth=r,a}return 0},S=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return C(document.body,e)},P=function(){return T(document.body)},O=function(e){e&&r(e).map((function(e){a(e,(function(e){o(e)?e.setAttribute("data-scroll-lock-scrollable",""):i('"'.concat(e,'" is not a Element.'))}))}))},N=function(e){e&&r(e).map((function(e){a(e,(function(e){o(e)?e.removeAttribute("data-scroll-lock-scrollable"):i('"'.concat(e,'" is not a Element.'))}))}))},j=function(e){e&&r(e).map((function(e){w.scrollableSelectors.push(e)}))},M=function(e){e&&r(e).map((function(e){w.scrollableSelectors=w.scrollableSelectors.filter((function(t){return t!==e}))}))},L=function(e){e&&(r(e).map((function(e){a(e,(function(e){o(e)?e.setAttribute("data-scroll-lock-lockable",""):i('"'.concat(e,'" is not a Element.'))}))})),k()||W())},A=function(e){e&&(r(e).map((function(e){w.lockableSelectors.push(e)})),k()||W(),F(e))},I=function(e){if(e)if(-1!==b.indexOf(e))w.fillGapMethod=e,D();else{var t=b.join(", ");i('"'.concat(e,'" method is not available!\nAvailable fill gap methods: ').concat(t,"."))}},R=function(e){e&&r(e).map((function(e){a(e,(function(e){o(e)?(e.setAttribute("data-scroll-lock-fill-gap",""),w.scroll||Y(e)):i('"'.concat(e,'" is not a Element.'))}))}))},z=function(e){e&&r(e).map((function(e){a(e,(function(e){o(e)?(e.removeAttribute("data-scroll-lock-fill-gap"),w.scroll||X(e)):i('"'.concat(e,'" is not a Element.'))}))}))},F=function(e){e&&r(e).map((function(e){-1===w.fillGapSelectors.indexOf(e)&&(w.fillGapSelectors.push(e),w.scroll||K(e))}))},U=function(e){e&&r(e).map((function(e){w.fillGapSelectors=w.fillGapSelectors.filter((function(t){return t!==e})),w.scroll||J(e)}))},D=function(){w.scroll||G()},W=function(){var e=l(w.lockableSelectors);q(e)},B=function(){var e=l(w.lockableSelectors);V(e)},q=function(e){var t=document.querySelectorAll(e);a(t,(function(e){H(e)}))},V=function(e){var t=document.querySelectorAll(e);a(t,(function(e){$(e)}))},H=function(e){if(o(e)&&"true"!==e.getAttribute("data-scroll-lock-locked")){var t=window.getComputedStyle(e);e.setAttribute("data-scroll-lock-saved-overflow-y-property",t.overflowY),e.setAttribute("data-scroll-lock-saved-inline-overflow-property",e.style.overflow),e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property",e.style.overflowY),e.style.overflow="hidden",e.setAttribute("data-scroll-lock-locked","true")}},$=function(e){o(e)&&"true"===e.getAttribute("data-scroll-lock-locked")&&(e.style.overflow=e.getAttribute("data-scroll-lock-saved-inline-overflow-property"),e.style.overflowY=e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-saved-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-locked"))},G=function(){w.fillGapSelectors.map((function(e){K(e)}))},Q=function(){w.fillGapSelectors.map((function(e){J(e)}))},K=function(e){var t=document.querySelectorAll(e),n=-1!==w.lockableSelectors.indexOf(e);a(t,(function(e){Y(e,n)}))},Y=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(o(e)){var n;if(""===e.getAttribute("data-scroll-lock-lockable")||t)n=C(e,!0);else{var r=c(e,l(w.lockableSelectors));n=C(r,!0)}"true"===e.getAttribute("data-scroll-lock-filled-gap")&&X(e);var a=window.getComputedStyle(e);if(e.setAttribute("data-scroll-lock-filled-gap","true"),e.setAttribute("data-scroll-lock-current-fill-gap-method",w.fillGapMethod),"margin"===w.fillGapMethod){var i=parseFloat(a.marginRight);e.style.marginRight="".concat(i+n,"px")}else if("width"===w.fillGapMethod)e.style.width="calc(100% - ".concat(n,"px)");else if("max-width"===w.fillGapMethod)e.style.maxWidth="calc(100% - ".concat(n,"px)");else if("padding"===w.fillGapMethod){var u=parseFloat(a.paddingRight);e.style.paddingRight="".concat(u+n,"px")}}},J=function(e){var t=document.querySelectorAll(e);a(t,(function(e){X(e)}))},X=function(e){if(o(e)&&"true"===e.getAttribute("data-scroll-lock-filled-gap")){var t=e.getAttribute("data-scroll-lock-current-fill-gap-method");e.removeAttribute("data-scroll-lock-filled-gap"),e.removeAttribute("data-scroll-lock-current-fill-gap-method"),"margin"===t?e.style.marginRight="":"width"===t?e.style.width="":"max-width"===t?e.style.maxWidth="":"padding"===t&&(e.style.paddingRight="")}};"undefined"!=typeof window&&window.addEventListener("resize",(function(e){D()})),"undefined"!=typeof document&&(document.addEventListener("touchstart",(function(e){w.scroll||(w.startTouchY=e.touches[0].clientY,w.startTouchX=e.touches[0].clientX)})),document.addEventListener("touchmove",(function(e){if(!w.scroll){var t=w.startTouchY,n=w.startTouchX,r=e.touches[0].clientY,o=e.touches[0].clientX;if(e.touches.length<2){var a=l(w.scrollableSelectors),i={up:t<r,down:t>r,left:n<o,right:n>o},u={up:t+3<r,down:t-3>r,left:n+3<o,right:n-3>o};!function t(n){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n){var o=c(n,a,!1);if(g(n))return!1;if(r||v(n)&&c(n,a)||s(n,a)){var l=!1;h(n)&&m(n)?(i.up&&d(n)||i.down&&p(n))&&(l=!0):d(n)&&p(n)?(i.left&&h(n)||i.right&&m(n))&&(l=!0):(u.up&&d(n)||u.down&&p(n)||u.left&&h(n)||u.right&&m(n))&&(l=!0),l&&(o?t(o,!0):e.preventDefault())}else t(o)}else e.preventDefault()}(e.target)}}}),{passive:!1}),document.addEventListener("touchend",(function(e){w.scroll||(w.startTouchY=0,w.startTouchX=0)})));var Z={hide:function(e){i('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'),x(e)},show:function(e){i('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'),_(e)},toggle:function(e){i('"toggle" is deprecated! Do not use it.'),k()?x():_(e)},getState:function(){return i('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'),k()},getWidth:function(){return i('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'),S()},getCurrentWidth:function(){return i('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'),P()},setScrollableTargets:function(e){i('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'),O(e)},setFillGapSelectors:function(e){i('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'),F(e)},setFillGapTargets:function(e){i('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'),R(e)},clearQueue:function(){i('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'),E()}},ee=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){y(e,t,n[t])}))}return e}({disablePageScroll:x,enablePageScroll:_,getScrollState:k,clearQueueScrollLocks:E,getTargetScrollBarWidth:C,getCurrentTargetScrollBarWidth:T,getPageScrollBarWidth:S,getCurrentPageScrollBarWidth:P,addScrollableSelector:j,removeScrollableSelector:M,addScrollableTarget:O,removeScrollableTarget:N,addLockableSelector:A,addLockableTarget:L,addFillGapSelector:F,removeFillGapSelector:U,addFillGapTarget:R,removeFillGapTarget:z,setFillGapMethod:I,refillGaps:D,_state:w},Z);t.default=ee}]).default},e.exports=r()},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),a=n(3),i=n(12),l=n.n(i),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,i,s="__create-react-context-"+((u[i="__global_unique_id__"]=(u[i]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(a.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(a.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=l.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(17))},function(e,t,n){var r=n(65);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],v=n[3],g=n[4],y=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=m&&null!=h&&h!==m,_="+"===b||"*"===b,k="?"===b||"*"===b,E=n[2]||s,C=g||y;r.push({name:v||a++,prefix:m||"",delimiter:E,optional:k,repeat:_,partial:x,asterisk:!!w,pattern:C?c(C):w?".*":"[^"+u(E)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},u=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),i+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.API_URL="https://api.unsplash.com",t.API_VERSION="v1",t.OAUTH_AUTHORIZE_URL="https://unsplash.com/oauth/authorize",t.OAUTH_TOKEN_URL="https://unsplash.com/oauth/token"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.formUrlEncode=u,t.getUrlComponents=function(e){return(0,i.default)(e,{},!0)},t.buildFetchOptions=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.method,n=e.query,a=e.oauth,i=e.body,l=!0===a?e.url:""+this._apiUrl+e.url,c=r({},this._headers,e.headers,{"Accept-Version":this._apiVersion,Authorization:this._bearerToken?"Bearer "+this._bearerToken:"Client-ID "+this._accessKey}),s=this._timeout;i&&(c["Content-Type"]="application/x-www-form-urlencoded");n&&(l=decodeURIComponent(l+"?"+(0,o.stringify)(n)));return{url:l,options:{method:t,headers:c,timeout:s,body:"GET"!==t&&i?u(i):void 0}}};var o=n(26),a=l(n(41)),i=l(n(42));function l(e){return e&&e.__esModule?e:{default:e}}function u(e){return(0,a.default)(e)}},function(e,t,n){"use strict";t.decode=t.parse=n(39),t.encode=t.stringify=n(40)},function(e,t,n){"use strict";var r,o=n(0),a=n.n(o),i=n(14),l=n(8),u=n(4),c=(n(28),r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=["root","rootMargin","threshold"],f=["root","rootMargin","threshold","disabled"],d=function(e){return s.reduce((function(t,n){var r,o="root"===n&&"[object String]"===u.f.call(e.root);return Object.assign(t,((r={})[n]=o?document.querySelector(e[n]):e[n],r))}),{})},p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.handleChange=function(e){t.props.onChange(e,t.externalUnobserve)},t.handleNode=function(e){var n=t.props.children;if(Object(u.b)(n)){var r=n.ref;"function"==typeof r?r(e):r&&u.a.call(r,"current")&&(r.current=e)}if(t.targetNode=void 0,e){var o=Object(i.findDOMNode)(e);o&&1===o.nodeType&&(t.targetNode=o)}},t.observe=function(){if(null==t.props.children||t.props.disabled)return!1;if(!t.targetNode)throw new Error("ReactIntersectionObserver: Can't find DOM node in the provided children. Make sure to render at least one DOM node in the tree.");return t.observer=Object(l.a)(d(t.props)),t.target=t.targetNode,Object(l.b)(t),!0},t.unobserve=function(e){Object(l.c)(t,e)},t.externalUnobserve=function(){t.targetNode&&t.unobserve(t.targetNode)},t}return c(t,e),t.prototype.getSnapshotBeforeUpdate=function(e){var t=this;this.prevTargetNode=this.targetNode;var n=f.some((function(n){return Object(u.d)(t.props[n],e[n])}));return n&&this.prevTargetNode&&(e.disabled||this.unobserve(this.prevTargetNode)),n},t.prototype.componentDidUpdate=function(e,t,n){var r=!1;n||(r=this.prevTargetNode!==this.targetNode)&&null!=this.prevTargetNode&&this.unobserve(this.prevTargetNode),(n||r)&&this.observe()},t.prototype.componentDidMount=function(){this.observe()},t.prototype.componentWillUnmount=function(){this.targetNode&&this.unobserve(this.targetNode)},t.prototype.render=function(){var e=this.props.children;return null!=e?a.a.cloneElement(a.a.Children.only(e),{ref:this.handleNode}):null},t.displayName="IntersectionObserver",t}(a.a.Component);t.default=p},function(e,t){},function(e,t,n){"use strict";e.exports=n(66)},function(e,t,n){var r=n(6),o=n(61);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==l(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),a=(r=n(68))&&r.__esModule?r:{default:r};function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function(){return"undefined"!=typeof window},h=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?s(e):t}(this,c(t).call(this,e)),d(s(n),"image",void 0),d(s(n),"handleOnlineStatus",(function(){n.setState({isOnline:window.navigator.onLine})})),d(s(n),"loadImage",(function(e,t){n.image&&(n.image.onload=null,n.image.onerror=null);var r=new Image;n.image=r,r.onload=n.onLoad,r.onerror=function(){n.onError},r.src=e,t&&(r.srcset=t.srcSet,r.sizes=t.sizes)})),d(s(n),"onLoad",(function(){n.props.delay?n.setImageWithDelay():n.setImage()})),d(s(n),"setImageWithDelay",(function(){setTimeout((function(){n.setImage()}),n.props.delay)})),d(s(n),"setImage",(function(){n._isMounted&&n.setState({image:n.image.src,loading:!1,srcSetData:{srcSet:n.image.srcset||"",sizes:n.image.sizes||""}},(function(){window.removeEventListener("online",n.handleOnlineStatus),window.removeEventListener("offline",n.handleOnlineStatus)}))})),d(s(n),"onError",(function(e){var t=n.props.onError;t&&t(e)})),d(s(n),"handleIntersection",(function(e,t,r){if(e.isIntersecting){var o=n.props,a=o.src,i=o.srcSetData;r&&(n.loadImage(a,i),t())}})),n._isMounted=!1,n.state={isOnline:!p()||window.navigator.onLine,image:e.placeholder,loading:!0,srcSetData:{srcSet:"",sizes:""}},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this._isMounted=!0,p()&&(window.addEventListener("online",this.handleOnlineStatus),window.addEventListener("offline",this.handleOnlineStatus))}},{key:"componentDidUpdate",value:function(e){var t=this,n=this.props,r=n.src,o=n.placeholder,a=n.srcSetData;r!==e.src&&this.setState({image:o,loading:!0},(function(){t.loadImage(r,a)}))}},{key:"componentWillUnmount",value:function(){this._isMounted=!1,this.image&&(this.image.onload=null,this.image.onerror=null),this.timeout&&window.clearTimeout(this.timeout),window.removeEventListener("online",this.handleOnlineStatus),window.removeEventListener("offline",this.handleOnlineStatus)}},{key:"render",value:function(){var e=this,t={onChange:function(t,n){return e.handleIntersection(t,n,e.state.isOnline)},rootMargin:this.props.rootMargin||"0% 0% 25%",threshold:this.props.threshold||[0],disabled:this.props.noLazyLoad||!1},n=this.state,r=n.image,i=n.loading,l=n.srcSetData,u=this.props,c=u.src,s=u.children,f=(u.noRetry,u.noLazyLoad);if(!s||"function"!=typeof s)throw new Error("ProgressiveImage requires a function as its only child");return f?s(c,!1,this.props.srcSetData):o.createElement(a.default,t,s(r,i,l))}}])&&u(n.prototype,r),i&&u(n,i),t}(o.Component);t.default=h},function(e,t,n){"use strict";var r=n(29),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{c(t,g,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(23),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function x(){}function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var k=_.prototype=new x;k.constructor=_,r(k,w.prototype),k.isPureReactComponent=!0;var E={current:null},C=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var O=/\/+/g,N=[];function j(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return r(o,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+A(l=t[c],c);u+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+A(l,c++),r,o);else if("object"===l)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function z(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(O,"$&/")+"/"),L(e,R,t=j(t,a,r,o)),M(t)}var F={current:null};function U(){var e=F.current;if(null===e)throw Error(g(321));return e}var D={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,I,t=j(null,null,t,n)),M(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return z(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(g(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=c,t.PureComponent=_,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)C.call(t,s)&&!T.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return U().useCallback(e,t)},t.useContext=function(e,t){return U().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return U().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return U().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return U().useLayoutEffect(e,t)},t.useMemo=function(e,t){return U().useMemo(e,t)},t.useReducer=function(e,t,n){return U().useReducer(e,t,n)},t.useRef=function(e){return U().useRef(e)},t.useState=function(e){return U().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(23),a=n(35);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var u=!1,c=null,s=!1,f=null,d={onError:function(e){u=!0,c=e}};function p(e,t,n,r,o,a,i,s,f){u=!1,c=null,l.apply(d,arguments)}var h=null,m=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,a,l,d,h){if(p.apply(this,arguments),u){if(!u)throw Error(i(198));var m=c;u=!1,c=null,s||(s=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function w(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!_[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in _[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,u=r;if(k.hasOwnProperty(u))throw Error(i(99,u));k[u]=a;var c=a.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&x(c[o],l,u);o=!0}else a.registrationName?(x(a.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function x(e,t,n){if(E[e])throw Error(i(100,e));E[e]=t,C[e]=t.eventTypes[n].dependencies}var _=[],k={},E={},C={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(i(102,t));b[t]=r,n=!0}}n&&w()}var S=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,O=null,N=null;function j(e){if(e=m(e)){if("function"!=typeof P)throw Error(i(280));var t=e.stateNode;t&&(t=h(t),P(e.stateNode,e.type,t))}}function M(e){O?N?N.push(e):N=[e]:O=e}function L(){if(O){var e=O,t=N;if(N=O=null,j(e),t)for(e=0;e<t.length;e++)j(t[e])}}function A(e,t){return e(t)}function I(e,t,n,r,o){return e(t,n,r,o)}function R(){}var z=A,F=!1,U=!1;function D(){null===O&&null===N||(R(),L())}function W(e,t,n){if(U)return e(t,n);U=!0;try{return z(e,t,n)}finally{U=!1,D()}}var B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,V={},H={};function $(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var G={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){G[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];G[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){G[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){G[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){G[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){G[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){G[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){G[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){G[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,K);G[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,K);G[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,K);G[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){G[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),G.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){G[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function J(e,t,n,r){var o=G.hasOwnProperty(t)?G[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!q.call(H,e)||!q.call(V,e)&&(B.test(e)?H[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var X=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ve(e.type);n=null,r&&(n=ve(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(X,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function _e(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ee(e,t){null!=(t=t.checked)&&J(e,"checked",t,!1)}function Ce(e,t){Ee(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Se(e,t.type,n):t.hasOwnProperty("defaultValue")&&Se(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Se(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Oe(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function je(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Me(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Ie="http://www.w3.org/2000/svg";function Re(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ze(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Re(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,Ue=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ie||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function De(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function We(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Be={animationend:We("Animation","AnimationEnd"),animationiteration:We("Animation","AnimationIteration"),animationstart:We("Animation","AnimationStart"),transitionend:We("Transition","TransitionEnd")},qe={},Ve={};function He(e){if(qe[e])return qe[e];if(!Be[e])return e;var t,n=Be[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return qe[e]=n[t];return e}S&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete Be.animationend.animation,delete Be.animationiteration.animation,delete Be.animationstart.animation),"TransitionEvent"in window||delete Be.transitionend.transition);var $e=He("animationend"),Ge=He("animationiteration"),Qe=He("animationstart"),Ke=He("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Je=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Je.get(e);return void 0===t&&(t=new Map,Je.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return tt(o),e;if(a===r)return tt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!S)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Sn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,u=0;u<_.length;u++){var c=_[u];c&&(c=c.extractEvents(r,t,a,o,i))&&(l=rt(l,c))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var mt,vt,gt,yt=!1,bt=[],wt=null,xt=null,_t=null,kt=new Map,Et=new Map,Ct=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),St="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Ot(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Et.delete(t.pointerId)}}function Nt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=Pt(t,n,r,o,a),null!==t&&(null!==(t=Pn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function jt(e){var t=Sn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Lt(e,t,n){Mt(e)&&n.delete(t)}function At(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&mt(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Mt(wt)&&(wt=null),null!==xt&&Mt(xt)&&(xt=null),null!==_t&&Mt(_t)&&(_t=null),kt.forEach(Lt),Et.forEach(Lt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,At)))}function Rt(e){function t(t){return It(t,e)}if(0<bt.length){It(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&It(wt,e),null!==xt&&It(xt,e),null!==_t&&It(_t,e),kt.forEach(t),Et.forEach(t),n=0;n<Ct.length;n++)(r=Ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&null===(n=Ct[0]).blockedOn;)jt(n),null===n.blockedOn&&Ct.shift()}var zt={},Ft=new Map,Ut=new Map,Dt=["abort","abort",$e,"animationEnd",Ge,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Wt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Ut.set(r,t),Ft.set(r,a),zt[o]=a}}Wt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Wt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Wt(Dt,2);for(var Bt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),qt=0;qt<Bt.length;qt++)Ut.set(Bt[qt],0);var Vt=a.unstable_UserBlockingPriority,Ht=a.unstable_runWithPriority,$t=!0;function Gt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Ut.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Jt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){F||R();var o=Jt,a=F;F=!0;try{I(o,e,t,n,r)}finally{(F=a)||D()}}function Yt(e,t,n,r){Ht(Vt,Jt.bind(null,e,t,n,r))}function Jt(e,t,n,r){if($t)if(0<bt.length&&-1<Tt.indexOf(e))e=Pt(null,e,t,n,r),bt.push(e);else{var o=Xt(e,t,n,r);if(null===o)Ot(e,r);else if(-1<Tt.indexOf(e))e=Pt(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Nt(wt,e,t,n,r,o),!0;case"dragenter":return xt=Nt(xt,e,t,n,r,o),!0;case"mouseover":return _t=Nt(_t,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return kt.set(a,Nt(kt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Et.set(a,Nt(Et.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Ot(e,r),e=dt(e,r,null,t);try{W(pt,e)}finally{ft(e)}}}}function Xt(e,t,n,r){if(null!==(n=Sn(n=ut(r)))){var o=Ze(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=et(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{W(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function un(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function gn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function _n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),En="__reactInternalInstance$"+kn,Cn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Sn(e){var t=e[En];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[En]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=_n(e);null!==e;){if(n=e[En])return n;e=_n(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[En]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function On(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Nn(e){return e[Cn]||null}function jn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Ln(e,t,n){(t=Mn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jn(t);for(t=n.length;0<t--;)Ln(n[t],"captured",e);for(t=0;t<n.length;t++)Ln(n[t],"bubbled",e)}}function In(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Mn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){e&&e.dispatchConfig.registrationName&&In(e._targetInst,null,e)}function zn(e){ot(e,An)}var Fn=null,Un=null,Dn=null;function Wn(){if(Dn)return Dn;var e,t,n=Un,r=n.length,o="value"in Fn?Fn.value:Fn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Dn=o.slice(e,1<t?1-t:void 0)}function Bn(){return!0}function qn(){return!1}function Vn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Bn:qn,this.isPropagationStopped=qn,this}function Hn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function $n(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Hn,e.release=$n}o(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Bn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Bn)},persist:function(){this.isPersistent=Bn},isPersistent:qn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=qn,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn(Vn);var Qn=Vn.extend({data:null}),Kn=Vn.extend({data:null}),Yn=[9,13,27,32],Jn=S&&"CompositionEvent"in window,Xn=null;S&&"documentMode"in document&&(Xn=document.documentMode);var Zn=S&&"TextEvent"in window&&!Xn,er=S&&(!Jn||Xn&&8<Xn&&11>=Xn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Jn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else ir?or(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(ir||a!==nr.compositionStart?a===nr.compositionEnd&&ir&&(o=Wn()):(Un="value"in(Fn=r)?Fn.value:Fn.textContent,ir=!0)),a=Qn.getPooled(a,t,n,r),o?a.data=o:null!==(o=ar(n))&&(a.data=o),zn(a),o=a):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Jn&&or(e,t)?(e=Wn(),Dn=Un=Fn=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,zn(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Vn.getPooled(sr.change,e,t,n)).type="change",M(n),zn(e),e}var dr=null,pr=null;function hr(e){lt(e)}function mr(e){if(xe(On(e)))return e}function vr(e,t){if("change"===e)return t}var gr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,ut(e)),F)lt(e);else{F=!0;try{A(hr,e)}finally{F=!1,D()}}}function wr(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function _r(e,t){if("click"===e)return mr(t)}function kr(e,t){if("input"===e||"change"===e)return mr(t)}S&&(gr=ct("input")&&(!document.documentMode||9<document.documentMode));var Er={eventTypes:sr,_isInputEventSupported:gr,extractEvents:function(e,t,n,r){var o=t?On(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=vr;else if(cr(o))if(gr)i=kr;else{i=xr;var l=wr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=_r);if(i&&(i=i(e,t)))return fr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Se(o,"number",o.value)}},Cr=Vn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Pr(){return Sr}var Or=0,Nr=0,jr=!1,Mr=!1,Lr=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Or;return Or=e.screenX,jr?"mousemove"===e.type?e.screenX-t:0:(jr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Mr?"mousemove"===e.type?e.screenY-t:0:(Mr=!0,0)}}),Ar=Lr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ir={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Rr={eventTypes:Ir,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Sn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Lr,u=Ir.mouseLeave,c=Ir.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ar,u=Ir.pointerLeave,c=Ir.pointerEnter,s="pointer");if(e=null==i?a:On(i),a=null==t?a:On(t),(u=l.getPooled(u,i,n,r)).type=s+"leave",u.target=e,u.relatedTarget=a,(n=l.getPooled(c,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=e,s=t,(r=i)&&s)e:{for(c=s,i=0,e=l=r;e;e=jn(e))i++;for(e=0,t=c;t;t=jn(t))e++;for(;0<i-e;)l=jn(l),i--;for(;0<e-i;)c=jn(c),e--;for(;i--;){if(l===c||l===c.alternate)break e;l=jn(l),c=jn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(i=r.alternate)||i!==c);)l.push(r),r=jn(r);for(r=[];s&&s!==c&&(null===(i=s.alternate)||i!==c);)r.push(s),s=jn(s);for(s=0;s<l.length;s++)In(l[s],"bubbled",u);for(s=r.length;0<s--;)In(r[s],"captured",n);return 0==(64&o)?[u]:[u,n]}};var zr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fr=Object.prototype.hasOwnProperty;function Ur(e,t){if(zr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Fr.call(t,n[r])||!zr(e[n[r]],t[n[r]]))return!1;return!0}var Dr=S&&"documentMode"in document&&11>=document.documentMode,Wr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Br=null,qr=null,Vr=null,Hr=!1;function $r(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==Br||Br!==sn(n)?null:("selectionStart"in(n=Br)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Ur(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Wr.select,qr,e,t)).type="select",e.target=Br,zn(e),e))}var Gr={eventTypes:Wr,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Xe(o),a=C.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?On(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&(Br=o,qr=t,Vr=null);break;case"blur":Vr=qr=Br=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,$r(n,r);case"selectionchange":if(Dr)break;case"keydown":case"keyup":return $r(n,r)}return null}},Qr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Cr.extend({relatedTarget:null});function Jr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Xr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Cr.extend({key:function(e){if(e.key){var t=Xr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Jr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pr,charCode:function(e){return"keypress"===e.type?Jr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Jr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Lr.extend({dataTransfer:null}),no=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pr}),ro=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Lr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:zt,extractEvents:function(e,t,n,r){var o=Ft.get(e);if(!o)return null;switch(e){case"keypress":if(0===Jr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Lr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case $e:case Ge:case Qe:e=Qr;break;case Ke:e=ro;break;case"scroll":e=Cr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=Vn}return zn(t=e.getPooled(o,t,n,r)),t}};if(y)throw Error(i(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Nn,m=Pn,v=On,T({SimpleEventPlugin:ao,EnterLeaveEventPlugin:Rr,ChangeEventPlugin:Er,SelectEventPlugin:Gr,BeforeInputEventPlugin:lr});var io=[],lo=-1;function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},ho=so;function mo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=(e=e.childContextTypes)}function go(){uo(po),uo(fo)}function yo(e,t,n){if(fo.current!==so)throw Error(i(168));co(fo,t),co(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,ve(t)||"Unknown",a));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,ho=fo.current,co(fo,e),co(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),co(fo,e)):uo(po),co(po,n)}var _o=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,Co=a.unstable_requestPaint,To=a.unstable_now,So=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,Oo=a.unstable_UserBlockingPriority,No=a.unstable_NormalPriority,jo=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Lo={},Ao=a.unstable_shouldYield,Io=void 0!==Co?Co:function(){},Ro=null,zo=null,Fo=!1,Uo=To(),Do=1e4>Uo?To:function(){return To()-Uo};function Wo(){switch(So()){case Po:return 99;case Oo:return 98;case No:return 97;case jo:return 96;case Mo:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return Po;case 98:return Oo;case 97:return No;case 96:return jo;case 95:return Mo;default:throw Error(i(332))}}function qo(e,t){return e=Bo(e),_o(e,t)}function Vo(e,t,n){return e=Bo(e),ko(e,t,n)}function Ho(e){return null===Ro?(Ro=[e],zo=ko(Po,Go)):Ro.push(e),Lo}function $o(){if(null!==zo){var e=zo;zo=null,Eo(e)}Go()}function Go(){if(!Fo&&null!==Ro){Fo=!0;var e=0;try{var t=Ro;qo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ro=null}catch(t){throw null!==Ro&&(Ro=Ro.slice(e+1)),ko(Po,$o),t}finally{Fo=!1}}}function Qo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yo={current:null},Jo=null,Xo=null,Zo=null;function ea(){Zo=Xo=Jo=null}function ta(e){var t=Yo.current;uo(Yo),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ra(e,t){Jo=e,Zo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ni=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Jo)throw Error(i(308));Xo=t,Jo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ua(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ca(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.alternate;null!==n&&la(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fa(e,t,n,r){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var u=i.next;i.next=l.next,l.next=u}i=l,a.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==i){u=i.next;var c=a.baseState,s=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=c):p=p.next=m,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),au(l,h.suspenseConfig);e:{var v=e,g=h;switch(l=t,m=n,g.tag){case 1:if("function"==typeof(v=g.payload)){c=v.call(m,c,l);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=g.payload)?v.call(m,c,l):v))break e;c=o({},c,l);break e;case 2:aa=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=a.shared.pending))break;h=i.next=l.next,l.next=u,a.baseQueue=i=l,a.shared.pending=null}}null===p?f=c:p.next=d,a.baseState=f,a.baseQueue=p,iu(s),e.expirationTime=s,e.memoizedState=c}}function da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var pa=Y.ReactCurrentBatchConfig,ha=(new r.Component).refs;function ma(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=$l(),o=pa.suspense;(o=ua(r=Gl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ca(e,o),Ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=$l(),o=pa.suspense;(o=ua(r=Gl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ca(e,o),Ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=$l(),r=pa.suspense;(r=ua(n=Gl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ca(e,r),Ql(e,n)}};function ga(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Ur(n,r)||!Ur(o,a))}function ya(e,t,n){var r=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=vo(t)?ho:fo.current,a=(r=null!=(r=t.contextTypes))?mo(e,o):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ba(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function wa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ha,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=vo(t)?ho:fo.current,o.context=mo(e,a)),fa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ma(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),fa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xa=Array.isArray;function _a(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ha&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ka(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ea(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ou(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=_a(e,t,n),r.return=e,r):((r=Su(n.type,n.key,n.props,null,e.mode,r)).ref=_a(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Nu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Pu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ou(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Su(t.type,t.key,t.props,null,e.mode,n)).ref=_a(e,null,t),n.return=e,n;case te:return(t=Nu(t,e.mode,n)).return=e,t}if(xa(t)||me(t))return(t=Pu(t,e.mode,n,null)).return=e,t;ka(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(xa(n)||me(n))return null!==o?null:f(e,t,n,r,null);ka(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xa(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);ka(t,r)}return null}function m(o,i,l,u){for(var c=null,s=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===l.length)return n(o,f),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=me(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),s;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,a,u){var c="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===ne){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=_a(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===ne?((r=Pu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Su(a.type,a.key,a.props,null,e.mode,u)).ref=_a(e,r,a),u.return=e,e=u)}return l(e);case te:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Nu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Ou(a,e.mode,u)).return=e,e=r),l(e);if(xa(a))return m(e,r,a,u);if(me(a))return v(e,r,a,u);if(s&&ka(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ca=Ea(!0),Ta=Ea(!1),Sa={},Pa={current:Sa},Oa={current:Sa},Na={current:Sa};function ja(e){if(e===Sa)throw Error(i(174));return e}function Ma(e,t){switch(co(Na,t),co(Oa,e),co(Pa,Sa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ze(null,"");break;default:t=ze(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Pa),co(Pa,t)}function La(){uo(Pa),uo(Oa),uo(Na)}function Aa(e){ja(Na.current);var t=ja(Pa.current),n=ze(t,e.type);t!==n&&(co(Oa,e),co(Pa,n))}function Ia(e){Oa.current===e&&(uo(Pa),uo(Oa))}var Ra={current:0};function za(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Fa(e,t){return{responder:e,props:t}}var Ua=Y.ReactCurrentDispatcher,Da=Y.ReactCurrentBatchConfig,Wa=0,Ba=null,qa=null,Va=null,Ha=!1;function $a(){throw Error(i(321))}function Ga(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!zr(e[n],t[n]))return!1;return!0}function Qa(e,t,n,r,o,a){if(Wa=a,Ba=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ua.current=null===e||null===e.memoizedState?gi:yi,e=n(r,o),t.expirationTime===Wa){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Va=qa=null,t.updateQueue=null,Ua.current=bi,e=n(r,o)}while(t.expirationTime===Wa)}if(Ua.current=vi,t=null!==qa&&null!==qa.next,Wa=0,Va=qa=Ba=null,Ha=!1,t)throw Error(i(300));return e}function Ka(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Va?Ba.memoizedState=Va=e:Va=Va.next=e,Va}function Ya(){if(null===qa){var e=Ba.alternate;e=null!==e?e.memoizedState:null}else e=qa.next;var t=null===Va?Ba.memoizedState:Va.next;if(null!==t)Va=t,qa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(qa=e).memoizedState,baseState:qa.baseState,baseQueue:qa.baseQueue,queue:qa.queue,next:null},null===Va?Ba.memoizedState=Va=e:Va=Va.next=e}return Va}function Ja(e,t){return"function"==typeof t?t(e):t}function Xa(e){var t=Ya(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=qa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,c=o;do{var s=c.expirationTime;if(s<Wa){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,s>Ba.expirationTime&&(Ba.expirationTime=s,iu(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),au(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===u?a=r:u.next=l,zr(r,t.memoizedState)||(Ni=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ya(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);zr(a,t.memoizedState)||(Ni=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ei(e){var t=Ka();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ja,lastRenderedState:e}).dispatch=mi.bind(null,Ba,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ba.updateQueue)?(t={lastEffect:null},Ba.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Ya().memoizedState}function ri(e,t,n,r){var o=Ka();Ba.effectTag|=e,o.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Ya();r=void 0===r?null:r;var a=void 0;if(null!==qa){var i=qa.memoizedState;if(a=i.destroy,null!==r&&Ga(r,i.deps))return void ti(t,n,a,r)}Ba.effectTag|=e,o.memoizedState=ti(1|t,n,a,r)}function ai(e,t){return ri(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ci(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,2,ui.bind(null,t,e),n)}function si(){}function fi(e,t){return Ka().memoizedState=[e,void 0===t?null:t],e}function di(e,t){var n=Ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pi(e,t){var n=Ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function hi(e,t,n){var r=Wo();qo(98>r?98:r,(function(){e(!0)})),qo(97<r?97:r,(function(){var r=Da.suspense;Da.suspense=void 0===t?null:t;try{e(!1),n()}finally{Da.suspense=r}}))}function mi(e,t,n){var r=$l(),o=pa.suspense;o={expirationTime:r=Gl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ba||null!==a&&a===Ba)Ha=!0,o.expirationTime=Wa,Ba.expirationTime=Wa;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,zr(l,i))return}catch(e){}Ql(e,r)}}var vi={readContext:oa,useCallback:$a,useContext:$a,useEffect:$a,useImperativeHandle:$a,useLayoutEffect:$a,useMemo:$a,useReducer:$a,useRef:$a,useState:$a,useDebugValue:$a,useResponder:$a,useDeferredValue:$a,useTransition:$a},gi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Ka();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ka();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=mi.bind(null,Ba,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ka().memoizedState=e},useState:ei,useDebugValue:si,useResponder:Fa,useDeferredValue:function(e,t){var n=ei(e),r=n[0],o=n[1];return ai((function(){var n=Da.suspense;Da.suspense=void 0===t?null:t;try{o(e)}finally{Da.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[fi(hi.bind(null,t,e),[t,e]),n]}},yi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:pi,useReducer:Xa,useRef:ni,useState:function(){return Xa(Ja)},useDebugValue:si,useResponder:Fa,useDeferredValue:function(e,t){var n=Xa(Ja),r=n[0],o=n[1];return ii((function(){var n=Da.suspense;Da.suspense=void 0===t?null:t;try{o(e)}finally{Da.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xa(Ja),n=t[0];return t=t[1],[di(hi.bind(null,t,e),[t,e]),n]}},bi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ni,useState:function(){return Za(Ja)},useDebugValue:si,useResponder:Fa,useDeferredValue:function(e,t){var n=Za(Ja),r=n[0],o=n[1];return ii((function(){var n=Da.suspense;Da.suspense=void 0===t?null:t;try{o(e)}finally{Da.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Ja),n=t[0];return t=t[1],[di(hi.bind(null,t,e),[t,e]),n]}},wi=null,xi=null,_i=!1;function ki(e,t){var n=Eu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ei(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ci(e){if(_i){var t=xi;if(t){var n=t;if(!Ei(e,t)){if(!(t=xn(n.nextSibling))||!Ei(e,t))return e.effectTag=-1025&e.effectTag|2,_i=!1,void(wi=e);ki(wi,n)}wi=e,xi=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,_i=!1,wi=e}}function Ti(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wi=e}function Si(e){if(e!==wi)return!1;if(!_i)return Ti(e),_i=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=xi;t;)ki(e,t),t=xn(t.nextSibling);if(Ti(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xi=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xi=null}}else xi=wi?xn(e.stateNode.nextSibling):null;return!0}function Pi(){xi=wi=null,_i=!1}var Oi=Y.ReactCurrentOwner,Ni=!1;function ji(e,t,n,r){t.child=null===e?Ta(t,null,n,r):Ca(t,e.child,n,r)}function Mi(e,t,n,r,o){n=n.render;var a=t.ref;return ra(t,o),r=Qa(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qi(e,t,o))}function Li(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Cu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Su(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ai(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(o,r)&&e.ref===t.ref)?Qi(e,t,a):(t.effectTag|=1,(e=Tu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ai(e,t,n,r,o,a){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(Ni=!1,o<a)?(t.expirationTime=e.expirationTime,Qi(e,t,a)):Ri(e,t,n,r,a)}function Ii(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ri(e,t,n,r,o){var a=vo(n)?ho:fo.current;return a=mo(t,a),ra(t,o),n=Qa(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qi(e,t,o))}function zi(e,t,n,r,o){if(vo(n)){var a=!0;wo(t)}else a=!1;if(ra(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ya(t,n,r),wa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=oa(c):c=mo(t,c=vo(n)?ho:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ba(t,i,r,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||po.current||aa?("function"==typeof s&&(ma(t,n,s,r),u=t.memoizedState),(l=aa||ga(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Ko(t.type,l),u=i.context,"object"==typeof(c=n.contextType)&&null!==c?c=oa(c):c=mo(t,c=vo(n)?ho:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ba(t,i,r,c),aa=!1,u=t.memoizedState,i.state=u,fa(t,r,i,o),d=t.memoizedState,l!==r||u!==d||po.current||aa?("function"==typeof s&&(ma(t,n,s,r),d=t.memoizedState),(s=aa||ga(t,n,l,r,u,d,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Fi(e,t,n,r,a,o)}function Fi(e,t,n,r,o,a){Ii(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&xo(t,n,!1),Qi(e,t,a);r=t.stateNode,Oi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Ca(t,e.child,null,a),t.child=Ca(t,null,l,a)):ji(e,t,l,a),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Ui(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Ma(e,t.containerInfo)}var Di,Wi,Bi,qi={dehydrated:null,retryTime:0};function Vi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Ra.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),co(Ra,1&i),null===e){if(void 0!==a.fallback&&Ci(t),l){if(l=a.fallback,(a=Pu(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Pu(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=qi,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Ta(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Tu(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=qi,t.child=n,o}return n=Ca(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Pu(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Pu(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=qi,t.child=a,n}return t.memoizedState=null,t.child=Ca(t,e,a.children,n)}function Hi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),na(e.return,t)}function $i(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Gi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(ji(e,t,r.children,n),0!=(2&(r=Ra.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Hi(e,n);else if(19===e.tag)Hi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ra,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===za(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$i(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===za(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$i(t,!0,n,null,a,t.lastEffect);break;case"together":$i(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qi(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&iu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ki(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&go(),null;case 3:return La(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Si(t)||(t.effectTag|=4),null;case 5:Ia(t),n=ja(Na.current);var a=t.type;if(null!==e&&null!=t.stateNode)Wi(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=ja(Pa.current),Si(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[En]=t,r[Cn]=l,a){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Gt(Ye[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":ke(r,l),Gt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Gt("invalid",r),un(n,"onChange");break;case"textarea":je(r,l),Gt("invalid",r),un(n,"onChange")}for(var u in on(a,l),e=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):E.hasOwnProperty(u)&&null!=c&&un(n,u)}switch(a){case"input":we(r),Te(r,l,!0);break;case"textarea":we(r),Le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Re(a)),e===ln?"script"===a?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(a,{is:r.is}):(e=u.createElement(a),"select"===a&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,a),e[En]=t,e[Cn]=r,Di(e,t),t.stateNode=e,u=an(a,r),a){case"iframe":case"object":case"embed":Gt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ye.length;c++)Gt(Ye[c],e);c=r;break;case"source":Gt("error",e),c=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),c=r;break;case"form":Gt("reset",e),Gt("submit",e),c=r;break;case"details":Gt("toggle",e),c=r;break;case"input":ke(e,r),c=_e(e,r),Gt("invalid",e),un(n,"onChange");break;case"option":c=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Gt("invalid",e),un(n,"onChange");break;case"textarea":je(e,r),c=Ne(e,r),Gt("invalid",e),un(n,"onChange");break;default:c=r}on(a,c);var s=c;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Ue(e,f):"children"===l?"string"==typeof f?("textarea"!==a||""!==f)&&De(e,f):"number"==typeof f&&De(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&J(e,l,f,u))}switch(a){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Oe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}gn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Bi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=ja(Na.current),ja(Pa.current),Si(t)?(n=t.stateNode,r=t.memoizedProps,n[En]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[En]=t,t.stateNode=n)}return null;case 13:return uo(Ra),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Si(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ra.current)?Sl===wl&&(Sl=xl):(Sl!==wl&&Sl!==xl||(Sl=_l),0!==Ml&&null!==El&&(Lu(El,Tl),Au(El,Ml)))),(n||r)&&(t.effectTag|=4),null);case 4:return La(),null;case 10:return ta(t),null;case 17:return vo(t.type)&&go(),null;case 19:if(uo(Ra),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Ki(r,!1);else if(Sl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=za(l))){for(t.effectTag|=64,Ki(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return co(Ra,1&Ra.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=za(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ki(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Do()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Ki(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Do()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Do(),n.sibling=null,t=Ra.current,co(Ra,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Ji(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(La(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ia(e),null;case 13:return uo(Ra),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Ra),null;case 4:return La(),null;case 10:return ta(e),null;default:return null}}function Xi(e,t){return{value:e,source:t,stack:ge(t)}}Di=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wi=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,u,c=t.stateNode;switch(ja(Pa.current),e=null,n){case"input":i=_e(c,i),r=_e(c,r),e=[];break;case"option":i=Pe(c,i),r=Pe(c,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(c,i),r=Ne(c,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(l in on(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in c=i[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(E.hasOwnProperty(l)?(null!=s&&un(a,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Bi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ge(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&da(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}da(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&gn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Rt(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof _u&&_u(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;qo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){yu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function cl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(De(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,c=a,s=n,f=c;;)if(il(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,c=a.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ee(n,r),an(e,o),t=an(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Ue(n,u):"children"===l?De(n,u):J(n,l,u,t)}switch(e){case"input":Ce(n,r);break;case"textarea":Me(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Oe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Oe(n,!!r.multiple,r.defaultValue,!0):Oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Rt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Al=Do()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(i(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=ua(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Rl||(Rl=!0,zl=r),el(e,t)},n}function ml(e,t,n){(n=ua(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fl?Fl=new Set([this]):Fl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,gl=Math.ceil,yl=Y.ReactCurrentDispatcher,bl=Y.ReactCurrentOwner,wl=0,xl=3,_l=4,kl=0,El=null,Cl=null,Tl=0,Sl=wl,Pl=null,Ol=1073741823,Nl=1073741823,jl=null,Ml=0,Ll=!1,Al=0,Il=null,Rl=!1,zl=null,Fl=null,Ul=!1,Dl=null,Wl=90,Bl=null,ql=0,Vl=null,Hl=0;function $l(){return 0!=(48&kl)?1073741821-(Do()/10|0):0!==Hl?Hl:Hl=1073741821-(Do()/10|0)}function Gl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return Tl;if(null!==n)e=Qo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qo(e,150,100);break;case 97:case 96:e=Qo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==El&&e===Tl&&--e,e}function Ql(e,t){if(50<ql)throw ql=0,Vl=null,Error(i(185));if(null!==(e=Kl(e,t))){var n=Wo();1073741823===t?0!=(8&kl)&&0==(48&kl)?Zl(e):(Jl(e),0===kl&&$o()):Jl(e),0==(4&kl)||98!==n&&99!==n||(null===Bl?Bl=new Map([[e,t]]):(void 0===(n=Bl.get(e))||n>t)&&Bl.set(e,t))}}function Kl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(El===o&&(iu(t),Sl===_l&&Lu(o,Tl)),Au(o,t)),o}function Yl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Mu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Jl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ho(Zl.bind(null,e));else{var t=Yl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=$l();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Lo&&Eo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ho(Zl.bind(null,e)):Vo(r,Xl.bind(null,e),{timeout:10*(1073741821-t)-Do()}),e.callbackNode=t}}}function Xl(e,t){if(Hl=0,t)return Iu(e,t=$l()),Jl(e),null;var n=Yl(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(i(327));if(mu(),e===El&&n===Tl||nu(e,n),null!==Cl){var r=kl;kl|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ea(),kl=r,yl.current=o,1===Sl)throw t=Pl,nu(e,n),Lu(e,n),Jl(e),t;if(null===Cl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Sl,El=null,r){case wl:case 1:throw Error(i(345));case 2:Iu(e,2<n?2:n);break;case xl:if(Lu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Ol&&10<(o=Al+500-Do())){if(Ll){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(a=Yl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),o);break}du(e);break;case _l:if(Lu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Ll&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Yl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Nl?r=10*(1073741821-Nl)-Do():1073741823===Ol?r=0:(r=10*(1073741821-Ol)-5e3,0>(r=(o=Do())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Ol&&null!==jl){a=Ol;var l=jl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Do()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){Lu(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(i(329))}if(Jl(e),e.callbackNode===t)return Xl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(i(327));if(mu(),e===El&&t===Tl||nu(e,t),null!==Cl){var n=kl;kl|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ea(),kl=n,yl.current=r,1===Sl)throw n=Pl,nu(e,t),Lu(e,t),Jl(e),n;if(null!==Cl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,El=null,du(e),Jl(e)}return null}function eu(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&$o()}}function tu(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&$o()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Cl)for(n=Cl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:La(),uo(po),uo(fo);break;case 5:Ia(r);break;case 4:La();break;case 13:case 19:uo(Ra);break;case 10:ta(r)}n=n.return}El=e,Cl=Tu(e.current,null),Tl=t,Sl=wl,Pl=null,Nl=Ol=1073741823,jl=null,Ml=0,Ll=!1}function ru(e,t){for(;;){try{if(ea(),Ua.current=vi,Ha)for(var n=Ba.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Wa=0,Va=qa=Ba=null,Ha=!1,null===Cl||null===Cl.return)return Sl=1,Pl=t,Cl=null;e:{var o=e,a=Cl.return,i=Cl,l=t;if(t=Tl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.expirationTime=c.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&Ra.current),f=a;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var g=ua(1073741823,null);g.tag=2,ca(i,g)}i.expirationTime=1073741823;break e}l=void 0,i=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new pl,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(i)){l.add(i);var b=bu.bind(null,o,u,i);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(i))}5!==Sl&&(Sl=2),l=Xi(l,i),f=a;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,sa(f,hl(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Fl||!Fl.has(x)))){f.effectTag|=4096,f.expirationTime=t,sa(f,ml(f,u,t));break e}}f=f.return}while(null!==f)}Cl=su(Cl)}catch(e){t=e;continue}break}}function ou(){var e=yl.current;return yl.current=vi,null===e?vi:e}function au(e,t){e<Ol&&2<e&&(Ol=e),null!==t&&e<Nl&&2<e&&(Nl=e,jl=t)}function iu(e){e>Ml&&(Ml=e)}function lu(){for(;null!==Cl;)Cl=cu(Cl)}function uu(){for(;null!==Cl&&!Ao();)Cl=cu(Cl)}function cu(e){var t=vl(e.alternate,e,Tl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),bl.current=null,t}function su(e){Cl=e;do{var t=Cl.alternate;if(e=Cl.return,0==(2048&Cl.effectTag)){if(t=Yi(t,Cl,Tl),1===Tl||1!==Cl.childExpirationTime){for(var n=0,r=Cl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}Cl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Cl.firstEffect),null!==Cl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Cl.firstEffect),e.lastEffect=Cl.lastEffect),1<Cl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Cl:e.firstEffect=Cl,e.lastEffect=Cl))}else{if(null!==(t=Ji(Cl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Cl.sibling))return t;Cl=e}while(null!==Cl);return Sl===wl&&(Sl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Wo();return qo(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Dl);if(0!=(48&kl))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===El&&(Cl=El=null,Tl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=kl;kl|=32,bl.current=null,mn=$t;var l=pn();if(hn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=l,y=null;t:for(;;){for(var b;g!==u||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==c&&3!==g.nodeType||(h=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===l)break t;if(y===u&&++m===s&&(p=d),y===f&&++v===c&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},$t=!1,Il=o;do{try{hu()}catch(e){if(null===Il)throw Error(i(330));yu(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=o;do{try{for(l=e,u=t;null!==Il;){var w=Il.effectTag;if(16&w&&De(Il.stateNode,""),128&w){var x=Il.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&w){case 2:cl(Il),Il.effectTag&=-3;break;case 6:cl(Il),Il.effectTag&=-3,fl(Il.alternate,Il);break;case 1024:Il.effectTag&=-1025;break;case 1028:Il.effectTag&=-1025,fl(Il.alternate,Il);break;case 4:fl(Il.alternate,Il);break;case 8:sl(l,s=Il,u),ll(s)}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(i(330));yu(Il,e),Il=Il.nextEffect}}while(null!==Il);if(_=vn,x=pn(),w=_.focusedElem,u=_.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&hn(w)&&(x=u.start,void 0===(_=u.end)&&(_=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(_,w.value.length)):(_=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!_.extend&&l>u&&(s=u,u=l,l=s),s=dn(w,l),f=dn(w,u),s&&f&&(1!==_.rangeCount||_.anchorNode!==s.node||_.anchorOffset!==s.offset||_.focusNode!==f.node||_.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),_.removeAllRanges(),l>u?(_.addRange(x),_.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),_.addRange(x))))),x=[];for(_=w;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(_=x[w]).element.scrollLeft=_.left,_.element.scrollTop=_.top}$t=!!mn,vn=mn=null,e.current=n,Il=o;do{try{for(w=e;null!==Il;){var k=Il.effectTag;if(36&k&&al(w,Il.alternate,Il),128&k){x=void 0;var E=Il.ref;if(null!==E){var C=Il.stateNode;switch(Il.tag){case 5:x=C;break;default:x=C}"function"==typeof E?E(x):E.current=x}}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(i(330));yu(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=null,Io(),kl=a}else e.current=n;if(Ul)Ul=!1,Dl=e,Wl=t;else for(Il=o;null!==Il;)t=Il.nextEffect,Il.nextEffect=null,Il=t;if(0===(t=e.firstPendingTime)&&(Fl=null),1073741823===t?e===Vl?ql++:(ql=0,Vl=e):ql=0,"function"==typeof xu&&xu(n.stateNode,r),Jl(e),Rl)throw Rl=!1,e=zl,zl=null,e;return 0!=(8&kl)||$o(),null}function hu(){for(;null!==Il;){var e=Il.effectTag;0!=(256&e)&&nl(Il.alternate,Il),0==(512&e)||Ul||(Ul=!0,Vo(97,(function(){return mu(),null}))),Il=Il.nextEffect}}function mu(){if(90!==Wl){var e=97<Wl?97:Wl;return Wl=90,qo(e,vu)}}function vu(){if(null===Dl)return!1;var e=Dl;if(Dl=null,0!=(48&kl))throw Error(i(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(i(330));yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,$o(),!0}function gu(e,t,n){ca(e,t=hl(e,t=Xi(n,t),1073741823)),null!==(e=Kl(e,1073741823))&&Jl(e)}function yu(e,t){if(3===e.tag)gu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){gu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fl||!Fl.has(r))){ca(n,e=ml(n,e=Xi(t,e),1073741823)),null!==(n=Kl(n,1073741823))&&Jl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),El===e&&Tl===n?Sl===_l||Sl===xl&&1073741823===Ol&&Do()-Al<500?nu(e,Tl):Ll=!0:Mu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Jl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Gl(t=$l(),e,null)),null!==(e=Kl(e,t))&&Jl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ni=!0;else{if(r<n){switch(Ni=!1,t.tag){case 3:Ui(t),Pi();break;case 5:if(Aa(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:Ma(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Vi(e,t,n):(co(Ra,1&Ra.current),null!==(t=Qi(e,t,n))?t.sibling:null);co(Ra,1&Ra.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Gi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Ra,Ra.current),!r)return null}return Qi(e,t,n)}Ni=!1}}else Ni=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ra(t,n),o=Qa(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;wo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ma(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternalFiber=t,wa(t,r,e,n),t=Fi(null,t,r,!0,a,n)}else t.tag=0,ji(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Cu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Ri(null,t,o,e,n);break e;case 1:t=zi(null,t,o,e,n);break e;case 11:t=Mi(null,t,o,e,n);break e;case 14:t=Li(null,t,o,Ko(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ri(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Ui(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,r,null,n),(r=t.memoizedState.element)===o)Pi(),t=Qi(e,t,n);else{if((o=t.stateNode.hydrate)&&(xi=xn(t.stateNode.containerInfo.firstChild),wi=t,o=_i=!0),o)for(n=Ta(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else ji(e,t,r,n),Pi();t=t.child}return t;case 5:return Aa(t),null===e&&Ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,yn(r,o)?l=null:null!==a&&yn(r,a)&&(t.effectTag|=16),Ii(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ji(e,t,l,n),t=t.child),t;case 6:return null===e&&Ci(t),null;case 13:return Vi(e,t,n);case 4:return Ma(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ca(t,null,r,n):ji(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Mi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return ji(e,t,t.pendingProps,n),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(co(Yo,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=zr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!po.current){t=Qi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===u.tag&&((s=ua(n,null)).tag=2,ca(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),na(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ra(t,n),r=r(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,ji(e,t,r,n),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Li(e,t,o,a=Ko(o.type,a),r,n);case 15:return Ai(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ra(t,n),ya(t,r,o),wa(t,r,o,n),Fi(null,t,r,!0,e,n);case 19:return Gi(e,t,n)}throw Error(i(156,t.tag))};var xu=null,_u=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Eu(e,t,n,r){return new ku(e,t,n,r)}function Cu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Eu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Su(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Cu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Pu(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Eu(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case ce:return(e=Eu(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=a,e;case se:return(e=Eu(19,n,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Eu(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Pu(e,t,n,r){return(e=Eu(7,e,r,t)).expirationTime=n,e}function Ou(e,t,n){return(e=Eu(6,e,null,t)).expirationTime=n,e}function Nu(e,t,n){return(t=Eu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ju(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Mu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Lu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Au(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Iu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ru(e,t,n,r){var o=t.current,a=$l(),l=pa.suspense;a=Gl(a,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=bo(n,c,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ua(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ca(o,t),Ql(o,a),a}function zu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Uu(e,t){Fu(e,t),(e=e.alternate)&&Fu(e,t)}function Du(e,t,n){var r=new ju(e,t,n=null!=n&&!0===n.hydrate),o=Eu(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ia(o),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);Tt.forEach((function(e){ht(e,t,n)})),St.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Wu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=zu(i);l.call(e)}}Ru(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Du(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=zu(i);u.call(e)}}tu((function(){Ru(t,i,e,o)}))}return zu(i)}function qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Wu(t))throw Error(i(200));return qu(e,t,null,n)}Du.prototype.render=function(e){Ru(e,this._internalRoot,null,null)},Du.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ru(null,e,null,(function(){t[Tn]=null}))},mt=function(e){if(13===e.tag){var t=Qo($l(),150,100);Ql(e,t),Uu(e,t)}},vt=function(e){13===e.tag&&(Ql(e,3),Uu(e,3))},gt=function(e){if(13===e.tag){var t=$l();Ql(e,t=Gl(t,e,null)),Uu(e,t)}},P=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Nn(r);if(!o)throw Error(i(90));xe(r),Ce(r,o)}}}break;case"textarea":Me(e,n);break;case"select":null!=(t=n.value)&&Oe(e,!!n.multiple,t,!1)}},A=eu,I=function(e,t,n,r,o){var a=kl;kl|=4;try{return qo(98,e.bind(null,t,n,r,o))}finally{0===(kl=a)&&$o()}},R=function(){0==(49&kl)&&(function(){if(null!==Bl){var e=Bl;Bl=null,e.forEach((function(e,t){Iu(t,e),Jl(t)})),$o()}}(),mu())},z=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&$o()}};var Hu,$u,Gu={Events:[Pn,On,Nn,T,k,zn,function(e){ot(e,Rn)},M,L,Jt,lt,mu,{current:!1}]};$u=(Hu={findFiberByHostInstance:Sn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},_u=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Hu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gu,t.createPortal=Vu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(i(187));var n=kl;kl|=1;try{return qo(99,e.bind(null,t))}finally{kl=n,$o()}},t.hydrate=function(e,t,n){if(!Wu(t))throw Error(i(200));return Bu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Wu(t))throw Error(i(200));return Bu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Wu(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){Bu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Vu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Wu(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Bu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(36)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var y=!1,b=null,w=-1,x=5,_=0;i=function(){return t.unstable_now()>=_},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();_=e+x;try{b(!0,e)?E.postMessage(null):(y=!1,b=null)}catch(e){throw E.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,E.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},a=function(){m(w),w=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function T(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>P(i,n))void 0!==u&&0>P(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>P(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],N=[],j=1,M=null,L=3,A=!1,I=!1,R=!1;function z(e){for(var t=T(N);null!==t;){if(null===t.callback)S(N);else{if(!(t.startTime<=e))break;S(N),t.sortIndex=t.expirationTime,C(O,t)}t=T(N)}}function F(e){if(R=!1,z(e),!I)if(null!==T(O))I=!0,r(U);else{var t=T(N);null!==t&&o(F,t.startTime-e)}}function U(e,n){I=!1,R&&(R=!1,a()),A=!0;var r=L;try{for(z(n),M=T(O);null!==M&&(!(M.expirationTime>n)||e&&!i());){var l=M.callback;if(null!==l){M.callback=null,L=M.priorityLevel;var u=l(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===T(O)&&S(O),z(n)}else S(O);M=T(O)}if(null!==M)var c=!0;else{var s=T(N);null!==s&&o(F,s.startTime-n),c=!1}return c}finally{M=null,L=r,A=!1}}function D(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var W=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||A||(I=!0,r(U))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return T(O)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=W,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:D(e)}else i=D(e),u=l;return e={id:j++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,C(N,e),null===T(O)&&e===T(N)&&(R?a():R=!0,o(F,u-l))):(e.sortIndex=i,C(O,e),I||A||(I=!0,r(U))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();z(e);var n=T(O);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},function(e,t,n){var r=n(6),o=n(38);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){(t=n(7)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),t.push([e.i,"body {\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  font-family: 'Roboto', serif;\r\n}\r\n\r\n",""]),e.exports=t},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,a){t=t||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var l=/\+/g;e=e.split(t);var u=1e3;a&&"number"==typeof a.maxKeys&&(u=a.maxKeys);var c=e.length;u>0&&c>u&&(c=u);for(var s=0;s<c;++s){var f,d,p,h,m=e[s].replace(l,"%20"),v=m.indexOf(n);v>=0?(f=m.substr(0,v),d=m.substr(v+1)):(f=m,d=""),p=decodeURIComponent(f),h=decodeURIComponent(d),r(i,p)?o(i[p])?i[p].push(h):i[p]=[i[p],h]:i[p]=h}return i};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,l){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?a(i(e),(function(i){var l=encodeURIComponent(r(i))+n;return o(e[i])?a(e[i],(function(e){return l+encodeURIComponent(r(e))})).join(t):l+encodeURIComponent(r(e[i]))})).join(t):l?encodeURIComponent(r(l))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function a(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var i=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t){e.exports=function(e,t){function n(e){return String(e).replace(/[^ !'()~\*]*/g,encodeURIComponent).replace(/ /g,"+").replace(/[!'()~\*]/g,(function(e){return"%"+e.charCodeAt().toString(16).slice(-2).toUpperCase()}))}function r(e){var n=Object.keys(e);return t.sorted?n.sort():n}function o(e){return e.filter((function(e){return e})).join("&")}function a(e,i){var l=typeof i,u=null;return i===u?u=t.ignorenull?u:n(e)+"="+u:/string|number|boolean/.test(l)?u=n(e)+"="+n(i):Array.isArray(i)?u=function(e,t){return o(t.map((function(t){return a(e+"[]",t)})))}(e,i):"object"===l&&(u=function(e,t){return o(r(t).map((function(n){return a(e+"["+n+"]",t[n])})))}(e,i)),u}return t="object"==typeof t?t:{},o(r(e).map((function(t){return a(t,e[t])})))}},function(e,t,n){"use strict";(function(t){var r=n(43),o=n(44),a=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,i=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,l=new RegExp("^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+");function u(e){return(e||"").replace(l,"")}var c=[["#","hash"],["?","query"],function(e){return e.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],s={hash:1,query:1};function f(e){var n,r=("undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{}).location||{},o={},i=typeof(e=e||r);if("blob:"===e.protocol)o=new p(unescape(e.pathname),{});else if("string"===i)for(n in o=new p(e,{}),s)delete o[n];else if("object"===i){for(n in e)n in s||(o[n]=e[n]);void 0===o.slashes&&(o.slashes=a.test(e.href))}return o}function d(e){e=u(e);var t=i.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function p(e,t,n){if(e=u(e),!(this instanceof p))return new p(e,t,n);var a,i,l,s,h,m,v=c.slice(),g=typeof t,y=this,b=0;for("object"!==g&&"string"!==g&&(n=t,t=null),n&&"function"!=typeof n&&(n=o.parse),t=f(t),a=!(i=d(e||"")).protocol&&!i.slashes,y.slashes=i.slashes||a&&t.slashes,y.protocol=i.protocol||t.protocol||"",e=i.rest,i.slashes||(v[3]=[/(.*)/,"pathname"]);b<v.length;b++)"function"!=typeof(s=v[b])?(l=s[0],m=s[1],l!=l?y[m]=e:"string"==typeof l?~(h=e.indexOf(l))&&("number"==typeof s[2]?(y[m]=e.slice(0,h),e=e.slice(h+s[2])):(y[m]=e.slice(h),e=e.slice(0,h))):(h=l.exec(e))&&(y[m]=h[1],e=e.slice(0,h.index)),y[m]=y[m]||a&&s[3]&&t[m]||"",s[4]&&(y[m]=y[m].toLowerCase())):e=s(e);n&&(y.query=n(y.query)),a&&t.slashes&&"/"!==y.pathname.charAt(0)&&(""!==y.pathname||""!==t.pathname)&&(y.pathname=function(e,t){if(""===e)return t;for(var n=(t||"/").split("/").slice(0,-1).concat(e.split("/")),r=n.length,o=n[r-1],a=!1,i=0;r--;)"."===n[r]?n.splice(r,1):".."===n[r]?(n.splice(r,1),i++):i&&(0===r&&(a=!0),n.splice(r,1),i--);return a&&n.unshift(""),"."!==o&&".."!==o||n.push(""),n.join("/")}(y.pathname,t.pathname)),r(y.port,y.protocol)||(y.host=y.hostname,y.port=""),y.username=y.password="",y.auth&&(s=y.auth.split(":"),y.username=s[0]||"",y.password=s[1]||""),y.origin=y.protocol&&y.host&&"file:"!==y.protocol?y.protocol+"//"+y.host:"null",y.href=y.toString()}p.prototype={set:function(e,t,n){var a=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(n||o.parse)(t)),a[e]=t;break;case"port":a[e]=t,r(t,a.protocol)?t&&(a.host=a.hostname+":"+t):(a.host=a.hostname,a[e]="");break;case"hostname":a[e]=t,a.port&&(t+=":"+a.port),a.host=t;break;case"host":a[e]=t,/:\d+$/.test(t)?(t=t.split(":"),a.port=t.pop(),a.hostname=t.join(":")):(a.hostname=t,a.port="");break;case"protocol":a.protocol=t.toLowerCase(),a.slashes=!n;break;case"pathname":case"hash":if(t){var i="pathname"===e?"/":"#";a[e]=t.charAt(0)!==i?i+t:t}else a[e]=t;break;default:a[e]=t}for(var l=0;l<c.length;l++){var u=c[l];u[4]&&(a[u[1]]=a[u[1]].toLowerCase())}return a.origin=a.protocol&&a.host&&"file:"!==a.protocol?a.protocol+"//"+a.host:"null",a.href=a.toString(),a},toString:function(e){e&&"function"==typeof e||(e=o.stringify);var t,n=this,r=n.protocol;r&&":"!==r.charAt(r.length-1)&&(r+=":");var a=r+(n.slashes?"//":"");return n.username&&(a+=n.username,n.password&&(a+=":"+n.password),a+="@"),a+=n.host+n.pathname,(t="object"==typeof n.query?e(n.query):n.query)&&(a+="?"!==t.charAt(0)?"?"+t:t),n.hash&&(a+=n.hash),a}},p.extractProtocol=d,p.location=f,p.trimLeft=u,p.qs=o,e.exports=p}).call(this,n(17))},function(e,t,n){"use strict";e.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}t.stringify=function(e,t){t=t||"";var n,o,a=[];for(o in"string"!=typeof t&&(t="?"),e)if(r.call(e,o)){if((n=e[o])||null!=n&&!isNaN(n)||(n=""),o=encodeURIComponent(o),n=encodeURIComponent(n),null===o||null===n)continue;a.push(o+"="+n)}return a.length?t+a.join("&"):""},t.parse=function(e){for(var t,n=/([^=?&]+)=?([^&]*)/g,r={};t=n.exec(e);){var a=o(t[1]),i=o(t[2]);null===a||null===i||a in r||(r[a]=i)}return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{getAuthenticationUrl:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["public"],n=a.default.stringify({client_id:e._accessKey,redirect_uri:e._callbackUrl,response_type:"code",scope:t.length>1?t.join("+"):t.toString()});return decodeURIComponent(i.OAUTH_AUTHORIZE_URL+"?"+n)},userAuthentication:function(t){var n=i.OAUTH_TOKEN_URL;return e.request({url:n,method:"POST",body:{client_id:e._accessKey,client_secret:e._secret,redirect_uri:e._callbackUrl,grant_type:"authorization_code",code:t},oauth:!0})},setBearerToken:function(t){t&&(e._bearerToken=t)}}};var r,o=n(26),a=(r=o)&&r.__esModule?r:{default:r},i=n(24)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{profile:function(){return e.request({url:"/me",method:"GET"})},updateProfile:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n="/me",r=t.username,o=t.firstName,a=t.lastName,i=t.email,l=t.url,u=t.location,c=t.bio,s=t.instagramUsername,f={username:r,first_name:o,last_name:a,email:i,url:l,location:u,bio:c,instagram_username:s};return Object.keys(f).forEach((function(e){f[e]||delete f[e]})),e.request({url:n,method:"PUT",body:f})}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{profile:function(t){var n="/users/"+t;return e.request({url:n,method:"GET"})},photos:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"latest",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=a.stats||!1,l="/users/"+t+"/photos",u={page:n,per_page:r,order_by:o,orientation:a.orientation,stats:i};return Object.keys(u).forEach((function(e){u[e]||delete u[e]})),e.request({url:l,method:"GET",query:u})},likes:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"latest",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i="/users/"+t+"/likes",l={page:n,per_page:r,order_by:o,orientation:a.orientation};return Object.keys(l).forEach((function(e){l[e]||delete l[e]})),e.request({url:i,method:"GET",query:l})},collections:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"published",a="/users/"+t+"/collections",i={page:n,per_page:r,order_by:o};return e.request({url:a,method:"GET",query:i})},statistics:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"days",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:30,o="/users/"+t+"/statistics",a={resolution:n,quantity:r};return e.request({url:o,method:"GET",query:a})}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{listPhotos:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"latest",o="/photos",a={page:t,per_page:n,order_by:r};return e.request({url:o,method:"GET",query:a})},getPhoto:function(t){var n="/photos/"+t;return e.request({url:n,method:"GET"})},getPhotoStats:function(t){var n="/photos/"+t+"/statistics";return e.request({url:n,method:"GET"})},getRandomPhoto:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n="/photos/random",r=t.collections||[],o={featured:t.featured,username:t.username,orientation:t.orientation,collections:r.join(),query:t.query,c:t.cacheBuster||(new Date).getTime(),count:t.count};return Object.keys(o).forEach((function(e){o[e]||delete o[e]})),e.request({url:n,method:"GET",query:o})},likePhoto:function(t){if(!e._bearerToken)throw new Error("Requires a bearerToken to be set.");var n="/photos/"+t+"/like";return e.request({url:n,method:"POST"})},unlikePhoto:function(t){if(!e._bearerToken)throw new Error("Requires a bearerToken to be set.");var n="/photos/"+t+"/like";return e.request({url:n,method:"DELETE"})},downloadPhoto:l.bind(this),trackDownload:l.bind(this)}};var r,o=n(25),a=n(49),i=(r=a)&&r.__esModule?r:{default:r};function l(e){var t=(0,i.default)(e,"links.download_location",void 0);if(void 0===t)throw new Error("Object received is not a photo. "+e);var n=(0,o.getUrlComponents)(t);return this.request({url:n.pathname,method:"GET",query:n.query})}},function(e,t,n){(function(t){var n=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/,o=/^\./,a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,l=/^\[object .+?Constructor\]$/,u="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")();var f,d=Array.prototype,p=Function.prototype,h=Object.prototype,m=s["__core-js_shared__"],v=(f=/[^.]+$/.exec(m&&m.keys&&m.keys.IE_PROTO||""))?"Symbol(src)_1."+f:"",g=p.toString,y=h.hasOwnProperty,b=h.toString,w=RegExp("^"+g.call(y).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),x=s.Symbol,_=d.splice,k=A(s,"Map"),E=A(Object,"create"),C=x?x.prototype:void 0,T=C?C.toString:void 0;function S(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function P(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function O(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function N(e,t){for(var n,r,o=e.length;o--;)if((n=e[o][0])===(r=t)||n!=n&&r!=r)return o;return-1}function j(e,t){for(var o,a=0,i=(t=function(e,t){if(F(e))return!1;var o=typeof e;if("number"==o||"symbol"==o||"boolean"==o||null==e||D(e))return!0;return r.test(e)||!n.test(e)||null!=t&&e in Object(t)}(t,e)?[t]:F(o=t)?o:I(o)).length;null!=e&&a<i;)e=e[R(t[a++])];return a&&a==i?e:void 0}function M(e){return!(!U(e)||(t=e,v&&v in t))&&(function(e){var t=U(e)?b.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?w:l).test(function(e){if(null!=e){try{return g.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t}function L(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function A(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return M(n)?n:void 0}S.prototype.clear=function(){this.__data__=E?E(null):{}},S.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},S.prototype.get=function(e){var t=this.__data__;if(E){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return y.call(t,e)?t[e]:void 0},S.prototype.has=function(e){var t=this.__data__;return E?void 0!==t[e]:y.call(t,e)},S.prototype.set=function(e,t){return this.__data__[e]=E&&void 0===t?"__lodash_hash_undefined__":t,this},P.prototype.clear=function(){this.__data__=[]},P.prototype.delete=function(e){var t=this.__data__,n=N(t,e);return!(n<0)&&(n==t.length-1?t.pop():_.call(t,n,1),!0)},P.prototype.get=function(e){var t=this.__data__,n=N(t,e);return n<0?void 0:t[n][1]},P.prototype.has=function(e){return N(this.__data__,e)>-1},P.prototype.set=function(e,t){var n=this.__data__,r=N(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},O.prototype.clear=function(){this.__data__={hash:new S,map:new(k||P),string:new S}},O.prototype.delete=function(e){return L(this,e).delete(e)},O.prototype.get=function(e){return L(this,e).get(e)},O.prototype.has=function(e){return L(this,e).has(e)},O.prototype.set=function(e,t){return L(this,e).set(e,t),this};var I=z((function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(D(e))return T?T.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t);var n=[];return o.test(e)&&n.push(""),e.replace(a,(function(e,t,r,o){n.push(r?o.replace(i,"$1"):t||e)})),n}));function R(e){if("string"==typeof e||D(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function z(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i),i};return n.cache=new(z.Cache||O),n}z.Cache=O;var F=Array.isArray;function U(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function D(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==b.call(e)}e.exports=function(e,t,n){var r=null==e?void 0:j(e,t);return void 0===r?n:r}}).call(this,n(17))},function(e,t,n){"use strict";function r(e){return this.request({url:"/collections/"+e,method:"GET"})}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"latest",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a={per_page:n,order_by:r,orientation:o.orientation,page:t};return Object.keys(a).forEach((function(e){a[e]||delete a[e]})),this.request({url:"/collections/"+e+"/photos",method:"GET",query:a})}function a(e,t,n,r){var o=e?"/collections/"+e:"/collections",a={title:t,description:n,private:r};return this.request({url:o,method:e?"PUT":"POST",body:a})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{listCollections:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10,r="/collections",o={per_page:n,page:t};return e.request({url:r,method:"GET",query:o})},getCollection:r.bind(this),getCollectionPhotos:o.bind(this),createCollection:a.bind(this,null),updateCollection:a.bind(this),deleteCollection:function(t){var n="/collections/"+t;return e.request({url:n,method:"DELETE"})},addPhotoToCollection:function(t,n){var r="/collections/"+t+"/add";return e.request({url:r,method:"POST",body:{photo_id:n}})},removePhotoFromCollection:function(t,n){var r="/collections/"+t+"/remove?photo_id="+n;return e.request({url:r,method:"DELETE"})},listRelatedCollections:function(t){var n="/collections/"+t+"/related";return e.request({url:n,method:"GET"})}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{photos:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=o.collections||[],i={query:encodeURIComponent(t),per_page:r,orientation:o.orientation,content_filter:o.contentFilter,color:o.color,order_by:o.orderBy,lang:o.lang,collections:a.join(),page:n};return Object.keys(i).forEach((function(e){i[e]||"query"==e||delete i[e]})),e.request({url:"/search/photos",method:"GET",query:i})},users:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o={query:encodeURIComponent(t),per_page:r,page:n};return e.request({url:"/search/users",method:"GET",query:o})},collections:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o={query:encodeURIComponent(t),per_page:r,page:n};return e.request({url:"/search/collections",method:"GET",query:o})}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;return{total:function(){return e.request({url:"/stats/total",method:"GET"})}}}},function(e,t,n){(t=n(7)(!1)).push([e.i,".cardList__mainContainer--3DjQm {\r\n    background-color: #f4f4f4;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n    margin:0;\r\n    padding: 20px 10px;\r\n    font-family: Roboto;\r\n}\r\n.cardList__centralContainer--FblJ6 {\r\n    max-width: 1024px;\r\n}\r\n.cardList__cardList--2nvdC {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-between;\r\n    margin:0;\r\n    padding: 0;\r\n}\r\n\r\n.cardList__loader--39CM7 {\r\n    width:100px;\r\n    position:absolute;\r\n    top:48%;\r\n    left:47%;\r\n}\r\n.cardList__button--1pOOK {\r\n    background-color: orange;\r\n    color: white;\r\n    border-radius: 5px;\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    padding:10px;\r\n}\r\n.cardList__button--1pOOK:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n@media all and (min-width: 1024px) {\r\n}\r\n\r\n@media all and (min-width: 1540px) {\r\n}",""]),t.locals={mainContainer:"cardList__mainContainer--3DjQm",centralContainer:"cardList__centralContainer--FblJ6",cardList:"cardList__cardList--2nvdC",loader:"cardList__loader--39CM7",button:"cardList__button--1pOOK"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".card-__card--12LjT {\r\n    background-color: black;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px rgba(0,0,0,0.5) ;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    margin: 0 0 20px 0;\r\n    /*position: relative;!*for exit button*!*/\r\n    width: 32%;\r\n    min-height:390px;\r\n}\r\n\r\n\r\n.card-__loadMoreContainer--3EDlr {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width:100%;\r\n    height:100%;\r\n}\r\n\r\n.card-__loadMoreContainer--3EDlr:hover {\r\n    cursor:pointer;\r\n    color:orange;\r\n}\r\n\r\n.card-__loadMoreContainer--3EDlr:hover span{\r\n    color:orange;\r\n}\r\n\r\n.card-__loadMoreText--3vtio {\r\n    color:white;\r\n    font-size: 20px;\r\n    font-family: Roboto;\r\n}\r\n.card-__loader--2m8Ix {\r\n    margin: 200px;\r\n    width:100px;\r\n}\r\n\r\n\r\n@media all and (max-width: 1024px) {\r\n    .card-__card--12LjT {\r\n        width: 49%;\r\n    }\r\n}\r\n@media all and (max-width: 763px) {\r\n    .card-__card--12LjT {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n",""]),t.locals={card:"card-__card--12LjT",loadMoreContainer:"card-__loadMoreContainer--3EDlr",loadMoreText:"card-__loadMoreText--3vtio",loader:"card-__loader--2m8Ix"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".controls__controlsContainer--21fDq {\r\n    padding: 10px 20px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n}\r\n\r\n.controls__likesContainer--22J-k {\r\n    display:flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    /*width: 50px;*/\r\n\r\n}\r\n.controls__likesValue--1hVyq {\r\n    color: white;\r\n}\r\n\r\n.controls__errorContainer--FYlPf {\r\n    margin-left:10px;\r\n    display:flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;\r\n}\r\n\r\n.controls__errorValue--Sftzc {\r\n    color: red;\r\n    font-size: 12px;\r\n    padding:0;\r\n    margin:0;\r\n}\r\n\r\n\r\n\r\n.controls__button--3JkHZ {\r\n    background-color: transparent;\r\n    align-items: center;\r\n    margin-left:10px;\r\n    border:none;\r\n    outline: none;\r\n}\r\n\r\n.controls__button--3JkHZ:hover {\r\n    cursor:pointer;\r\n}",""]),t.locals={controlsContainer:"controls__controlsContainer--21fDq",likesContainer:"controls__likesContainer--22J-k",likesValue:"controls__likesValue--1hVyq",errorContainer:"controls__errorContainer--FYlPf",errorValue:"controls__errorValue--Sftzc",button:"controls__button--3JkHZ"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".info__infoContainer--YdngR {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    /*justify-content: space-evenly;*/\r\n    padding: 10px;\r\n}\r\n\r\n.info__metaContainer--360J7 {\r\n    /*display: flex;*/\r\n    /*flex-flow: row nowrap;*/\r\n    /*justify-content: space-between;*/\r\n    /*margin: 0 0 4px 0;*/\r\n}\r\n\r\n.info__titleContainer--3Y3mx {\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    font-weight: normal;\r\n    padding: 0;\r\n    margin: 10px 0 0 0;\r\n    overflow: hidden;\r\n    /*-webkit-line-clamp: 2;!*строка с 3мя точками вконце*!*/\r\n    /*-webkit-box-orient: vertical;*/\r\n    /*display: -webkit-box;*/\r\n    color: black;\r\n    border: 1px solid red;\r\n}\r\n\r\n.info__titleContainer--3Y3mx:hover {\r\n    color: orange;\r\n}\r\n",""]),t.locals={infoContainer:"info__infoContainer--YdngR",metaContainer:"info__metaContainer--360J7",titleContainer:"info__titleContainer--3Y3mx"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".metadata__metaData--3kaG5 {\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    /*width: 100%;*/\r\n}\r\n\r\n.metadata__userLink--3koP- {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 7px;\r\n    text-decoration: none;\r\n    color: black;\r\n}\r\n.metadata__userLink--3koP-:hover {\r\n    color: orange;\r\n}\r\n\r\n.metadata__avatar--D7gGe {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 20px;\r\n    margin-right: 7px;\r\n}\r\n\r\n.metadata__userName--2Dpvg{\r\n    color: white;\r\n}\r\n\r\n.metadata__userName--2Dpvg:hover{\r\n    color: orange;\r\n    text-decoration: underline;\r\n}\r\n\r\n.metadata__createdAt--2ynfn {\r\n    color: #999999;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n\r\n/*@media all and (min-width: 1024px) {*/\r\n/*    .metaData {*/\r\n/*        font-size: 14px;*/\r\n/*        line-height: 16px;*/\r\n/*    }*/\r\n/*}*/\r\n\r\n/*@media all and (min-width: 1540px) {*/\r\n/*    !*.userLink:hover a {*!*/\r\n/*    !*    text-decoration: underline;*!*/\r\n/*    !*}*!*/\r\n\r\n/*    .username{*/\r\n/*        position: relative;*/\r\n/*        z-index: 1;*/\r\n/*    }*/\r\n\r\n/*}*/",""]),t.locals={metaData:"metadata__metaData--3kaG5",userLink:"metadata__userLink--3koP-",avatar:"metadata__avatar--D7gGe",userName:"metadata__userName--2Dpvg",createdAt:"metadata__createdAt--2ynfn"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".preview__previewContainerButton--3SWLz {\r\n    height: 300px;\r\n    margin:0;\r\n    padding:0;\r\n    border:none;\r\n    outline:none;\r\n}\r\n\r\n.preview__previewContainerButton--3SWLz:hover{\r\n    cursor: pointer;\r\n}\r\n\r\n.preview__previewImg--2WcmC {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n}\r\n",""]),t.locals={previewContainerButton:"preview__previewContainerButton--3SWLz",previewImg:"preview__previewImg--2WcmC"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".placeholderCard__card--3yqGh {\r\n    background-color: darkgrey;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px rgba(0,0,0,0.5) ;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    margin: 0 0 20px 0;\r\n    /*position: relative;!*for exit button*!*/\r\n    width: 32%;\r\n    min-height:390px;\r\n}\r\n\r\n.placeholderCard__infoContainer--2fjRQ {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    /*justify-content: space-evenly;*/\r\n    padding: 10px;\r\n}\r\n\r\n.placeholderCard__metaContainer--3XhQX {\r\n    /*display: flex;*/\r\n    /*flex-flow: row nowrap;*/\r\n    /*justify-content: space-between;*/\r\n    /*margin: 0 0 4px 0;*/\r\n}\r\n\r\n.placeholderCard__titleContainer--xacaF {\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    font-weight: normal;\r\n    padding: 0;\r\n    margin: 10px 0 0 0;\r\n    overflow: hidden;\r\n    /*-webkit-line-clamp: 2;!*строка с 3мя точками вконце*!*/\r\n    /*-webkit-box-orient: vertical;*/\r\n    /*display: -webkit-box;*/\r\n    color: black;\r\n    border: 1px solid red;\r\n}\r\n\r\n.placeholderCard__titleContainer--xacaF:hover {\r\n    color: orange;\r\n}\r\n\r\n.placeholderCard__loadMoreContainer--y51XB {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width:100%;\r\n    height:100%;\r\n}\r\n\r\n.placeholderCard__loadMoreContainer--y51XB:hover {\r\n    cursor:pointer;\r\n    color:orange;\r\n}\r\n\r\n.placeholderCard__loadMoreContainer--y51XB:hover span{\r\n    color:orange;\r\n}\r\n\r\n.placeholderCard__loadMoreText--2n-RY {\r\n    color:white;\r\n    font-size: 20px;\r\n    font-family: Roboto;\r\n}\r\n.placeholderCard__loader--2r4_5 {\r\n    margin: 200px;\r\n    width:100px;\r\n}\r\n.placeholderCard__metaData--2g9T0 {\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-start;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    /*width: 100%;*/\r\n}\r\n\r\n.placeholderCard__userLink--2TsvZ {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 7px;\r\n    color: black;\r\n}\r\n\r\n.placeholderCard__avatar--kJDG1 {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 20px;\r\n    margin-right: 7px;\r\n    background-color: #999999;\r\n}\r\n\r\n.placeholderCard__userName--a7ZvD{\r\n    color: white;\r\n    width:70px;\r\n    background-color: darkgrey;\r\n    height: 16px;\r\n}\r\n\r\n\r\n.placeholderCard__createdAt--3RTWy {\r\n    background-color: darkgrey;\r\n    display: flex;\r\n    align-items: center;\r\n    width:70px;\r\n    height:16px;\r\n}\r\n\r\n.placeholderCard__previewContainerButton--3soOz {\r\n    height: 300px;\r\n    width:100%;\r\n    margin:0;\r\n    padding:0;\r\n    border:none;\r\n    outline:none;\r\n    background-color: lightgrey;\r\n}\r\n\r\n.placeholderCard__previewImg--2-SLn {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.placeholderCard__controlsContainer--3xMaQ {\r\n    padding: 10px 20px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n}\r\n\r\n.placeholderCard__likesContainer--3VhwZ {\r\n    display:flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    /*width: 50px;*/\r\n\r\n}\r\n.placeholderCard__likesValue--2zBST {\r\n    widht:20px;\r\n    height:16px;\r\n}\r\n\r\n.placeholderCard__errorContainer--14ILw {\r\n    margin-left:10px;\r\n}\r\n\r\n.placeholderCard__errorValue--1rVLC {\r\n    color: red;\r\n    font-size: 12px;\r\n}\r\n\r\n.placeholderCard__loader--2r4_5 {\r\n    width:100px;\r\n    position:absolute;\r\n    top:45%;\r\n    left:45%;\r\n}\r\n\r\n.placeholderCard__buttonHeart--o1cdT {\r\n    background-color: transparent;\r\n    align-items: center;\r\n    margin-left:10px;\r\n    border:none;\r\n    outline: none;\r\n}\r\n\r\n@media all and (max-width: 1024px) {\r\n    .placeholderCard__card--3yqGh {\r\n        width: 49%;\r\n    }\r\n}\r\n@media all and (max-width: 763px) {\r\n    .placeholderCard__card--3yqGh {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n",""]),t.locals={card:"placeholderCard__card--3yqGh",infoContainer:"placeholderCard__infoContainer--2fjRQ",metaContainer:"placeholderCard__metaContainer--3XhQX",titleContainer:"placeholderCard__titleContainer--xacaF",loadMoreContainer:"placeholderCard__loadMoreContainer--y51XB",loadMoreText:"placeholderCard__loadMoreText--2n-RY",loader:"placeholderCard__loader--2r4_5",metaData:"placeholderCard__metaData--2g9T0",userLink:"placeholderCard__userLink--2TsvZ",avatar:"placeholderCard__avatar--kJDG1",userName:"placeholderCard__userName--a7ZvD",createdAt:"placeholderCard__createdAt--3RTWy",previewContainerButton:"placeholderCard__previewContainerButton--3soOz",previewImg:"placeholderCard__previewImg--2-SLn",controlsContainer:"placeholderCard__controlsContainer--3xMaQ",likesContainer:"placeholderCard__likesContainer--3VhwZ",likesValue:"placeholderCard__likesValue--2zBST",errorContainer:"placeholderCard__errorContainer--14ILw",errorValue:"placeholderCard__errorValue--1rVLC",buttonHeart:"placeholderCard__buttonHeart--o1cdT"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".header__headerContainer--mzNrd {\r\n    background-color: white;\r\n    padding:10px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: center;\r\n    border-bottom: 1px solid lightgrey;\r\n    font-family: Roboto;\r\n    font-size: 20px;\r\n    position:sticky;\r\n}\r\n\r\n.header__centralContainer--LpLZh {\r\n    width:100%;\r\n    max-width: 1024px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: space-between;\r\n}\r\n\r\n.header__logoContainer--2LE-g{\r\n    width:50px;\r\n    margin-right: 10px;\r\n}\r\n\r\n.header__logoContainer--2LE-g img{\r\n    width:100%;\r\n}\r\n\r\n/*.authButtonContainer {*/\r\n/*    align-items: center;*/\r\n/*    display: flex;*/\r\n/*}*/\r\n\r\n.header__button--287KL{\r\n    background-color: transparent;\r\n    border: none;\r\n    outline: none;\r\n    padding:0;\r\n}\r\n\r\n.header__button--287KL:active {\r\n    outline: none;\r\n    border: none;\r\n}\r\n.header__userContainer--sLu6G {\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    /*justify-content: center;*/\r\n    align-items: center;\r\n}\r\n\r\n.header__avatarImg--37i9E {\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 30px;\r\n}\r\n\r\n.header__avatarText--2zAxI {\r\n    text-decoration: none;\r\n    color: black;\r\n    margin-left: 10px;\r\n    font-family: Roboto;\r\n    font-size: 20px;\r\n}\r\n.header__avatarText--2zAxI:hover{\r\n    color: orange;\r\n    cursor: pointer;\r\n}\r\n.header__logoutText--3hs5I {\r\n    text-decoration: none;\r\n    color: black;\r\n    margin-right: 10px;\r\n    font-family: Roboto;\r\n    font-size: 14px;\r\n}\r\n.header__logoutText--3hs5I:hover{\r\n    color: orange;\r\n}\r\n\r\n\r\n\r\n@media all and (max-width: 1024px) {\r\n    .header__headerContainer--mzNrd {\r\n        padding:10px 20px;\r\n    }\r\n}\r\n",""]),t.locals={headerContainer:"header__headerContainer--mzNrd",centralContainer:"header__centralContainer--LpLZh",logoContainer:"header__logoContainer--2LE-g",button:"header__button--287KL",userContainer:"header__userContainer--sLu6G",avatarImg:"header__avatarImg--37i9E",avatarText:"header__avatarText--2zAxI",logoutText:"header__logoutText--3hs5I"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".footer__footerContainer--1CsPU {\r\n    background-color: #fafafa;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding:20px 0;\r\n    font-size: 14px;\r\n    color: #696969;\r\n    font-family: Roboto;\r\n}\r\n",""]),t.locals={footerContainer:"footer__footerContainer--1CsPU"},e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,".cardPage__cardPage--323w4 {\r\n    background-color: rgba(0,0,0,0.7);\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    top:0;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.cardPage__centralContainer--3JJVA {\r\n    max-width: 1024px;\r\n    width: 80%;\r\n    /*min-width: 50%;*/\r\n    height: 80%;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n}\r\n\r\n.cardPage__imageContainer--3_Bw1 {\r\n    overflow: hidden;\r\n    width:80%;\r\n    /*min-width:300px;*/\r\n}\r\n\r\n.cardPage__imageContainer--3_Bw1 img {\r\n    height:100%;\r\n    width:100%;\r\n    object-fit: cover;\r\n    margin:auto 0;\r\n    display: block;\r\n}\r\n\r\n.cardPage__infoContainer--aB2Ct {\r\n    width: 20%;\r\n    /*min-width: 20%;*/\r\n    background-color: white;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-between;\r\n}\r\n.cardPage__metaContainer--3ChlP {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    padding: 20px;\r\n    border-bottom: 1px solid #f4f4f4;\r\n}\r\n.cardPage__authorContainer--gZkXy {\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    align-items: center;\r\n}\r\n\r\n.cardPage__createdAt--3UMSG {\r\n    color: #999999;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 14px;\r\n    margin-top: 10px;\r\n}\r\n\r\n.cardPage__avatarImg--_2kWE {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 30px;\r\n}\r\n\r\n.cardPage__avatarText--38Akd {\r\n    text-decoration: none;\r\n    color: black;\r\n    margin-left: 10px;\r\n}\r\n\r\n\r\n\r\n.cardPage__likesContainer--3GC4W {\r\n    display:flex;\r\n    flex-flow: row nowrap;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-top: 1px solid #f4f4f4;\r\n\r\n}\r\n.cardPage__likesValue--2JLUo {\r\n    color: #999999;\r\n}\r\n\r\n.cardPage__button--vR0OM {\r\n    background-color: transparent;\r\n    align-items: center;\r\n    margin-left:10px;\r\n    border:none;\r\n}\r\n\r\n.cardPage__button--vR0OM:hover {\r\n    cursor:pointer;\r\n}\r\n\r\n.cardPage__exitButton--12tsW {\r\n    position: absolute;\r\n    top:30px;\r\n    right:30px;\r\n    /*height: 300px;*/\r\n    margin:0;\r\n    padding:0;\r\n    border:none;\r\n    outline:none;\r\n    background-color: transparent;\r\n}\r\n\r\n.cardPage__exitButton--12tsW:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.cardPage__exitImgWhite--3VDB6{\r\n    width: 30px;\r\n}\r\n\r\n@media all and (max-width: 1024px) {\r\n    .cardPage__imageContainer--3_Bw1{\r\n        width: 70%;\r\n    }\r\n    .cardPage__infoContainer--aB2Ct {\r\n        width: 30%;\r\n    }\r\n}\r\n@media all and (max-width: 760px) {\r\n    .cardPage__centralContainer--3JJVA {\r\n        flex-flow: column nowrap;\r\n    }\r\n    .cardPage__imageContainer--3_Bw1{\r\n        width: 100%;\r\n    }\r\n    .cardPage__infoContainer--aB2Ct {\r\n        width: 100%;\r\n    }\r\n\r\n    /*.exitImgBlack{*/\r\n    /*    width: 20px;*/\r\n    /*    display:none;*/\r\n    /*}*/\r\n\r\n    /*.exitImgWhite{*/\r\n    /*    width: 20px;*/\r\n    /*    display: unset;*/\r\n    /*}*/\r\n\r\n}",""]),t.locals={cardPage:"cardPage__cardPage--323w4",centralContainer:"cardPage__centralContainer--3JJVA",imageContainer:"cardPage__imageContainer--3_Bw1",infoContainer:"cardPage__infoContainer--aB2Ct",metaContainer:"cardPage__metaContainer--3ChlP",authorContainer:"cardPage__authorContainer--gZkXy",createdAt:"cardPage__createdAt--3UMSG",avatarImg:"cardPage__avatarImg--_2kWE",avatarText:"cardPage__avatarText--38Akd",likesContainer:"cardPage__likesContainer--3GC4W",likesValue:"cardPage__likesValue--2JLUo",button:"cardPage__button--vR0OM",exitButton:"cardPage__exitButton--12tsW",exitImgWhite:"cardPage__exitImgWhite--3VDB6"},e.exports=t},function(e,t,n){"use strict";var r=n(64);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case g:case v:case c:return e;default:return t}}case a:return t}}}function k(e){return _(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=v,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return k(e)||_(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return _(e)===s},t.isContextProvider=function(e){return _(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return _(e)===p},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===g},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===a},t.isProfiler=function(e){return _(e)===u},t.isStrictMode=function(e){return _(e)===l},t.isSuspense=function(e){return _(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===y)},t.typeOf=_},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(14),i=n.n(a),l=(n(37),n(9)),u=n.n(l),c=n(13),s=n.n(c),f=n(15),d=n.n(f),p=n(10),h=n.n(p);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var v=r.createElement("path",{fill:"gray",d:"M246.122 477.289C101.705 350.922 0 283.985 0 177.515 0 97.002 57.4 31 136 31c54.544 0 95.017 33.497 120 81.015C280.981 64.5 321.454 31 376 31c78.609 0 136 66.015 136 146.515 0 106.457-101.572 173.291-246.122 299.773a15.001 15.001 0 01-19.756.001z"});var g=function(e){return r.createElement("svg",m({height:20,viewBox:"0 0 512 512",width:20},e),v)};function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var b=r.createElement("path",{fill:"red",d:"M246.122 477.289C101.705 350.922 0 283.985 0 177.515 0 97.002 57.4 31 136 31c54.544 0 95.017 33.497 120 81.015C280.981 64.5 321.454 31 376 31c78.609 0 136 66.015 136 146.515 0 106.457-101.572 173.291-246.122 299.773a15.001 15.001 0 01-19.756.001z"});var w=function(e){return r.createElement("svg",y({height:20,viewBox:"0 0 512 512",width:20},e),b)};function x(e){var t=e.likes,n=e.clickedImageObj,r=e.id,a=e.isLiked,i=e.handleClickHeart,l=e.isHeartError;return o.a.createElement("div",{className:h.a.controlsContainer},o.a.createElement("div",{className:h.a.likesContainer},o.a.createElement("span",{className:h.a.likesValue},t),o.a.createElement("button",{className:h.a.button,onClick:function(){return i(r)}},a?o.a.createElement(w,null):o.a.createElement(g,null))),l&&n.id===r&&o.a.createElement("div",{className:h.a.errorContainer},o.a.createElement("span",{className:h.a.errorValue},"You are not authorized")))}var _=n(18),k=n.n(_),E=n(11),C=n.n(E);function T(e){var t=e.created,n=e.profile,r=e.name,a=e.ava,i=t.slice(0,10);return o.a.createElement("div",{className:C.a.metaData},o.a.createElement("a",{href:n,className:C.a.userLink},o.a.createElement("img",{className:C.a.avatar,src:a,alt:"avatar"}),o.a.createElement("span",{className:C.a.userName},r)),o.a.createElement("span",{className:C.a.createdAt},i))}function S(e){var t=e.created,n=e.profile,r=e.name,a=e.ava;return o.a.createElement("div",{className:k.a.infoContainer},o.a.createElement("div",{className:k.a.metaContainer},o.a.createElement(T,{created:t,profile:n,name:r,ava:a})))}var P=n(19),O=n.n(P);function N(e){var t=e.url,n=e.handleClickPreview,r=e.id;return o.a.createElement("button",{className:O.a.previewContainerButton,onClick:function(){return n(r)}},o.a.createElement("img",{className:O.a.previewImg,src:t,alt:"previewPic"}))}function j(e){var t=e.add,n=e.url,r=e.clickedImageObj,a=e.isHeartError,i=(e.setIsHeartError,e.created),l=e.likes,u=e.handleClickHeart,c=e.profile,s=e.name,f=e.ava,p=e.description,h=(e.open,e.id),m=e.handleClickPreview,v=(e.pressed,e.setPressed,e.setLikedId,e.likePhoto,e.isLiked),g=(e.isAuth,e.whoIs);return o.a.createElement("div",{className:d.a.card},"moreButton"===g?o.a.createElement("div",{className:d.a.loadMoreContainer,onClick:t},o.a.createElement("span",{className:d.a.loadMoreText},"Load more")):o.a.createElement(o.a.Fragment,null,o.a.createElement(S,{created:i,profile:c,name:s,ava:f,description:p}),o.a.createElement(N,{url:n,handleClickPreview:m,id:h}),o.a.createElement(x,{clickedImageObj:r,isHeartError:a,likes:l,handleClickHeart:u,isLiked:v,id:h})))}function M(){return(M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var L=r.createElement("g",null,r.createElement("path",{fill:"#ff8c00",d:"M109.25 55.5h-36l12-12a29.54 29.54 0 00-49.53 12H18.75A46.04 46.04 0 0196.9 31.84l12.35-12.34v36zm-90.5 17h36l-12 12a29.54 29.54 0 0049.53-12h16.97A46.04 46.04 0 0131.1 96.16L18.74 108.5v-36z"}),r.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 64 64",to:"360 64 64",dur:"720ms",repeatCount:"indefinite"}));var A=function(e){return r.createElement("svg",M({width:64,height:64,viewBox:"0 0 128 128"},e),L)},I=n(2),R=n.n(I);function z(){return o.a.createElement("div",{className:R.a.card},o.a.createElement("div",{className:R.a.infoContainer},o.a.createElement("div",{className:R.a.metaContainer},o.a.createElement("div",{className:R.a.metaData},o.a.createElement("div",{className:R.a.userLink},o.a.createElement("div",{className:R.a.avatar}),o.a.createElement("div",{className:R.a.userName})),o.a.createElement("div",{className:R.a.createdAt})))),o.a.createElement("div",{className:R.a.previewContainerButton}),o.a.createElement("div",{className:R.a.controlsContainer},o.a.createElement("div",{className:R.a.likesContainer},o.a.createElement("div",{className:R.a.likesValue}),o.a.createElement("button",{className:R.a.buttonHeart}))))}function F(e){var t,n=e.add,r=e.clickedImageObj,a=e.images,i=e.handleClickPreview,l=(e.pressed,e.setPressed,e.setLikedId,e.likePhoto,e.handleClickHeart),u=e.isAuth,c=e.setIsCardOpened,f=e.isHeartError,d=e.setIsHeartError,p=a.length?o.a.createElement(j,{add:n,whoIs:"moreButton"}):null;return t=a.length?a.map((function(e,t){return o.a.createElement(j,{key:e.id,id:e.id,created:e.created_at,name:e.user.first_name,profile:e.user.links.html,likes:e.likes,url:e.urls.thumb,ava:e.user.profile_image.small,handleClickPreview:i,handleClickHeart:l,isLiked:e.liked_by_user,isAuth:u,setIsCardOpened:c,setIsHeartError:d,isHeartError:f,clickedImageObj:r})})):o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:s.a.loader},o.a.createElement(A,null)),o.a.createElement(z,null),o.a.createElement(z,null),o.a.createElement(z,null),o.a.createElement(z,null),o.a.createElement(z,null),o.a.createElement(z,null)),o.a.createElement("main",{className:s.a.mainContainer},o.a.createElement("section",{className:s.a.centralContainer},o.a.createElement("ul",{className:s.a.cardList},t,p)))}var U=n(3);n(12);function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function W(e){return"/"===e.charAt(0)}function B(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var q=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&W(e),i=t&&W(t),l=a||i;if(e&&W(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var c=0,s=o.length;s>=0;s--){var f=o[s];"."===f?B(o,s):".."===f?(B(o,s),c++):c&&(B(o,s),c--)}if(!l)for(;c--;c)o.unshift("..");!l||""===o[0]||o[0]&&W(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var V=function(e,t){if(!e)throw new Error("Invariant failed")};function H(e){return"/"===e.charAt(0)?e:"/"+e}function $(e){return"/"===e.charAt(0)?e.substr(1):e}function G(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function Q(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function K(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function Y(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=D({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=q(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function J(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var X=!("undefined"==typeof window||!window.document||!window.document.createElement);function Z(e,t){t(window.confirm(e))}function ee(){try{return window.history.state||{}}catch(e){return{}}}function te(e){void 0===e&&(e={}),X||V(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,u=a.getUserConfirmation,c=void 0===u?Z:u,s=a.keyLength,f=void 0===s?6:s,d=e.basename?Q(H(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return d&&(a=G(a,d)),Y(a,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=J();function v(e){D(P,e),P.length=n.length,m.notifyListeners(P.location,P.action)}function g(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(p(e.state))}function y(){w(p(ee()))}var b=!1;function w(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",c,(function(t){t?v({action:"POP",location:e}):function(e){var t=P.location,n=_.indexOf(t.key);-1===n&&(n=0);var r=_.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,E(o))}(e)}))}}var x=p(ee()),_=[x.key];function k(e){return d+K(e)}function E(e){n.go(e)}var C=0;function T(e){1===(C+=e)&&1===e?(window.addEventListener("popstate",g),o&&window.addEventListener("hashchange",y)):0===C&&(window.removeEventListener("popstate",g),o&&window.removeEventListener("hashchange",y))}var S=!1;var P={length:n.length,action:"POP",location:x,createHref:k,push:function(e,t){var o=Y(e,t,h(),P.location);m.confirmTransitionTo(o,"PUSH",c,(function(e){if(e){var t=k(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),l)window.location.href=t;else{var u=_.indexOf(P.location.key),c=_.slice(0,u+1);c.push(o.key),_=c,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=Y(e,t,h(),P.location);m.confirmTransitionTo(o,"REPLACE",c,(function(e){if(e){var t=k(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),l)window.location.replace(t);else{var u=_.indexOf(P.location.key);-1!==u&&(_[u]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return S||(T(1),S=!0),function(){return S&&(S=!1,T(-1)),t()}},listen:function(e){var t=m.appendListener(e);return T(1),function(){T(-1),t()}}};return P}var ne={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+$(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:$,decodePath:H},slash:{encodePath:H,decodePath:H}};function re(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function oe(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function ae(e){window.location.replace(re(window.location.href)+"#"+e)}function ie(e){void 0===e&&(e={}),X||V(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?Z:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?Q(H(e.basename)):"",u=ne[i],c=u.encodePath,s=u.decodePath;function f(){var e=s(oe());return l&&(e=G(e,l)),Y(e)}var d=J();function p(e){D(C,e),C.length=t.length,d.notifyListeners(C.location,C.action)}var h=!1,m=null;function v(){var e,t,n=oe(),r=c(n);if(n!==r)ae(r);else{var a=f(),i=C.location;if(!h&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===K(a))return;m=null,function(e){if(h)h=!1,p();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=C.location,n=w.lastIndexOf(K(t));-1===n&&(n=0);var r=w.lastIndexOf(K(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,x(o))}(e)}))}}(a)}}var g=oe(),y=c(g);g!==y&&ae(y);var b=f(),w=[K(b)];function x(e){t.go(e)}var _=0;function k(e){1===(_+=e)&&1===e?window.addEventListener("hashchange",v):0===_&&window.removeEventListener("hashchange",v)}var E=!1;var C={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=re(window.location.href)),n+"#"+c(l+K(e))},push:function(e,t){var n=Y(e,void 0,void 0,C.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=K(n),r=c(l+t);if(oe()!==r){m=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(K(C.location)),a=w.slice(0,o+1);a.push(t),w=a,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=Y(e,void 0,void 0,C.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=K(n),r=c(l+t);oe()!==r&&(m=t,ae(r));var o=w.indexOf(K(C.location));-1!==o&&(w[o]=t),p({action:"REPLACE",location:n})}}))},go:x,goBack:function(){x(-1)},goForward:function(){x(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return E||(k(1),E=!0),function(){return E&&(E=!1,k(-1)),t()}},listen:function(e){var t=d.appendListener(e);return k(1),function(){k(-1),t()}}};return C}function le(e,t,n){return Math.min(Math.max(e,t),n)}function ue(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,a=t.initialIndex,i=void 0===a?0:a,l=t.keyLength,u=void 0===l?6:l,c=J();function s(e){D(v,e),v.length=v.entries.length,c.notifyListeners(v.location,v.action)}function f(){return Math.random().toString(36).substr(2,u)}var d=le(i,0,o.length-1),p=o.map((function(e){return Y(e,void 0,"string"==typeof e?f():e.key||f())})),h=K;function m(e){var t=le(v.index+e,0,v.entries.length-1),r=v.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var v={length:p.length,action:"POP",location:p[d],index:d,entries:p,createHref:h,push:function(e,t){var r=Y(e,t,f(),v.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=Y(e,t,f(),v.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(v.entries[v.index]=r,s({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return v}var ce=n(21),se=n(22),fe=n.n(se);n(29);function de(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(32);var pe=function(e){var t=Object(ce.a)();return t.displayName=e,t}("Router-History"),he=function(e){var t=Object(ce.a)();return t.displayName=e,t}("Router"),me=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(U.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(he.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(pe.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;o.a.Component;var ve={},ge=0;function ye(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ve[n]||(ve[n]={});if(r[e])return r[e];var o=[],a={regexp:fe()(e,o,t),keys:o};return ge<1e4&&(r[e]=a,ge++),a}(n,{end:a,strict:l,sensitive:c}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var be=function(e){function t(){return e.apply(this,arguments)||this}return Object(U.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(he.Consumer,null,(function(t){t||V(!1);var n=e.props.location||t.location,r=D({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?ye(n.pathname,e.props):t.match}),a=e.props,i=a.children,l=a.component,u=a.render;return Array.isArray(i)&&0===i.length&&(i=null),o.a.createElement(he.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:l?o.a.createElement(l,r):u?u(r):null:"function"==typeof i?i(r):null)}))},t}(o.a.Component);function we(e){return"/"===e.charAt(0)?e:"/"+e}function xe(e,t){if(!e)return t;var n=we(e);return 0!==t.pathname.indexOf(n)?t:D({},t,{pathname:t.pathname.substr(n.length)})}function _e(e){return"string"==typeof e?e:K(e)}function ke(e){return function(){V(!1)}}function Ee(){}o.a.Component;var Ce=function(e){function t(){return e.apply(this,arguments)||this}return Object(U.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(he.Consumer,null,(function(t){t||V(!1);var n,r,a=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?ye(a.pathname,D({},e.props,{path:i})):t.match}})),r?o.a.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;var Te=n(5),Se=n.n(Te);function Pe(e){var t,n=e.goToAuthorizePage,r=e.isAuth,a=e.devBtn,i=e.toLogout,l=e.userProfile,u=(t="".concat(l.first_name)).charAt(0).toUpperCase()+t.slice(1);return o.a.createElement("header",{className:Se.a.headerContainer},o.a.createElement("div",{className:Se.a.centralContainer},o.a.createElement("div",{className:Se.a.logoContainer},o.a.createElement("img",{src:"https://www.flaticon.com/svg/static/icons/svg/1/1394.svg",alt:"logo"})),a&&o.a.createElement("button",{type:"button",onClick:a},"dev button (show states in console)"),o.a.createElement("div",{className:Se.a.userContainer},r&&o.a.createElement(o.a.Fragment,null,o.a.createElement("button",{className:Se.a.button,type:"button",onClick:i},o.a.createElement("span",{className:Se.a.logoutText},"Logout")),o.a.createElement("img",{className:Se.a.avatarImg,src:l.profile_image.small,alt:"avatar"}),o.a.createElement("button",{className:Se.a.button,type:"button"},o.a.createElement("a",{className:Se.a.avatarText,href:l.links.html}," ",u))),!r&&o.a.createElement("button",{className:Se.a.button,type:"button",onClick:n},o.a.createElement("span",{className:Se.a.avatarText},"Login")))))}var Oe=n(30),Ne=n.n(Oe),je=function(e){var t=e.isCardOpened;return o.a.createElement(o.a.Fragment,null,!t&&o.a.createElement("div",{className:Ne.a.footerContainer},o.a.createElement("p",null," © 2020 INSTAGhmGhm FROM FOOTBOOK")))},Me=n(1),Le=n.n(Me);function Ae(){return(Ae=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ie=r.createElement("path",{d:"M3.663 410.637a12.465 12.465 0 008.839 3.661c3.199 0 6.398-1.221 8.839-3.661l185.809-185.81 185.81 185.811a12.465 12.465 0 008.84 3.661c3.198 0 6.397-1.221 8.839-3.661 4.881-4.881 4.881-12.796 0-17.679l-185.811-185.81 185.811-185.81c4.881-4.882 4.881-12.796 0-17.678-4.882-4.882-12.796-4.882-17.679 0l-185.81 185.81L21.34 3.663c-4.882-4.882-12.796-4.882-17.678 0-4.882 4.881-4.882 12.796 0 17.678l185.81 185.809L3.663 392.959c-4.882 4.882-4.882 12.797 0 17.678z"});var Re=function(e){return r.createElement("svg",Ae({width:414.298,height:414.299,fill:"#fff"},e),Ie)},ze=n(31),Fe=n.n(ze);function Ue(e){var t=e.handleClickHeart,n=e.clickedImageObj,r=e.setIsCardOpened,a=e.isCardOpened,i=a?n.created_at.slice(0,10):null;return o.a.createElement(o.a.Fragment,null,a&&o.a.createElement("div",{className:Le.a.cardPage},o.a.createElement("div",{className:Le.a.centralContainer},o.a.createElement("div",{className:Le.a.imageContainer},o.a.createElement(Fe.a,{src:n.urls.regular,placeholder:n.urls.thumb},(function(e){return o.a.createElement("img",{src:e,alt:n.alt_description})}))),o.a.createElement("div",{className:Le.a.infoContainer},o.a.createElement("div",{className:Le.a.metaContainer},o.a.createElement("div",{className:Le.a.authorContainer},o.a.createElement("img",{className:Le.a.avatarImg,src:n.user.profile_image.small,alt:"avatar"}),o.a.createElement("a",{className:Le.a.avatarText,href:n.user.links.html},n.user.first_name)),o.a.createElement("span",{className:Le.a.createdAt},i)),o.a.createElement("div",{className:Le.a.likesContainer},o.a.createElement("span",{className:Le.a.likesValue},n.likes),o.a.createElement("button",{className:Le.a.button,onClick:function(){return t(n.id)}},n.liked_by_user?o.a.createElement(w,null):o.a.createElement(g,null)))),o.a.createElement("button",{onClick:function(){return r(!1)},className:Le.a.exitButton},o.a.createElement("div",{className:Le.a.exitImgWhite},o.a.createElement(Re,null))))))}var De=n(20);function We(e){return function(e){if(Array.isArray(e))return Ve(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||qe(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Be(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||qe(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qe(e,t){if(e){if("string"==typeof e)return Ve(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ve(e,t):void 0}}function Ve(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var He=function(){var e=localStorage.accessTokenForUnsplash,t=new u.a({accessKey:"sQ_OK-FHQD1dS6L4h98HkNOr-HHHKRE8KuUPVf9BXAw",secret:"Eu_hWiHa3mUGcHyGtq2Idfj_gGCGYq6Jp0mv1ZL_kjA",callbackUrl:"https://jsdiploma.nef-an.ru/auth",bearerToken:e}),n=Be(Object(r.useState)([]),2),a=n[0],i=n[1],c=Be(Object(r.useState)({}),2),s=c[0],f=c[1],d=Be(Object(r.useState)(!1),2),p=d[0],h=d[1],m=Be(Object(r.useState)(100),2),v=m[0],g=m[1],y=Be(Object(r.useState)(!1),2),b=y[0],w=y[1],x=Be(Object(r.useState)(""),2),_=x[0],k=x[1],E=Be(Object(r.useState)(!1),2),C=E[0],T=E[1],S=function(e){localStorage.setItem("accessTokenForUnsplash",JSON.stringify(e))},P=function(){t.photos.listPhotos(v+1,10,"latest").then(l.toJson).then((function(e){var t=[].concat(We(a),We(e));i(t),g(v+1)}))},O=function(e){console.log("preview is clicked. getting image obj...id:",e);var t=a.find((function(t){return t.id===e}));console.log("clickedImageObj is:",t),f(t),console.log("setClickedImageObj is done"),h(!0),console.log("setIsDone is done - end of handleClickPreview function. ")},N=function(e){console.log("heart is clicked. getting image obj...id:",e);var n=a.find((function(t){return t.id===e}));f(n);var r=n.likes;if(b)if(console.log("heartClick is in process... isAuth is:",b),!1===n.liked_by_user){!function(e){t.photos.likePhoto(e).then(l.toJson).then((function(e){}))}(e);var o=a.filter((function(t){return t.id===e?(t.liked_by_user=!0,t.likes=r+1):t}));i(o)}else{!function(e){t.photos.unlikePhoto(e).then(l.toJson).then((function(e){}))}(e);var u=a.filter((function(t){return t.id===e?(t.liked_by_user=!1,t.likes=r-1):t}));i(u)}else console.log("heartClick failed. isAuth is:",b),T(!0),setTimeout((function(){return T(!1)}),2e3)};return Object(r.useEffect)((function(){!function(){console.log("getting code from url...");var e=window.location.search.split("code=")[1];e?(console.log("check codeFromUrl:",e),t.auth.userAuthentication(e).then(l.toJson).then((function(e){console.log("json answer from url is:",e),S(e.access_token),console.log("set to local from getBearerTokenFromUrlCode is done"),window.location.assign("https://jsdiploma.nef-an.ru"),console.log("reloading from getBearerTokenFromUrlCode is done")}))):console.log("getting code is skipped. codeFromUrl is:",e)}(),console.log("getting UserProfile...bearerToken is:",e),e?(console.log("your app already has tokenAccess key! Sending request..."),t.currentUser.profile().then(l.toJson).then((function(e){console.log("json profile answer is:",e),k(e),console.log("setting UserProfile to state is done"),w(!0),console.log("setIsAuth from getUserProfile is done")}))):console.log("getting UserProfile from server is skipped.  bearerToken is:",e),console.log("getting 10 photos..."),0===a.length?t.photos.listPhotos(v,10,"latest").then(l.toJson).then((function(e){i(We(e)),console.log("getting 10 photos is done")})):console.log("getting 10 photos is skipped. images.length is:",a.length)}),[]),Object(r.useEffect)((function(){p?Object(De.disablePageScroll)():Object(De.enablePageScroll)()}),[p]),o.a.createElement(o.a.Fragment,null,o.a.createElement(Pe,{goToAuthorizePage:function(){var e=t.auth.getAuthenticationUrl(["public","write_likes"]);window.location.assign(e)},toLogout:function(){w(!1),localStorage.removeItem("accessTokenForUnsplash")},isAuth:b,userProfile:_,devBtn:function(){console.log("localStorage.accessTokenForUnsplash is:",localStorage.accessTokenForUnsplash),console.log("process.env.REACT_APP_ACCESSKEY:","sQ_OK-FHQD1dS6L4h98HkNOr-HHHKRE8KuUPVf9BXAw")}}),o.a.createElement(Ce,null,o.a.createElement(be,{exact:!0,path:"/",component:function(){return o.a.createElement(F,{add:P,handleClickHeart:N,images:a,handleClickPreview:O,isAuth:b,isHeartError:C,setIsHeartError:T,clickedImageObj:s})}}),o.a.createElement(be,{exact:!0,path:"/auth",component:function(){return o.a.createElement(Auth,{unsplash:t})}})),o.a.createElement(Ue,{clickedImageObj:s,handleClickHeart:N,images:a,isAuth:b,setIsCardOpened:h,isCardOpened:p}),o.a.createElement(je,{isCardOpened:p}))},$e=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=te(t.props),t}return Object(U.a)(t,e),t.prototype.render=function(){return o.a.createElement(me,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;var Ge=function(e,t){return"function"==typeof e?e(t):e},Qe=function(e,t){return"string"==typeof e?Y(e,null,null,t):e},Ke=function(e){return e},Ye=o.a.forwardRef;void 0===Ye&&(Ye=Ke);var Je=Ye((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,i=de(e,["innerRef","navigate","onClick"]),l=i.target,u=D({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=Ke!==Ye&&t||n,o.a.createElement("a",u)}));var Xe=Ye((function(e,t){var n=e.component,r=void 0===n?Je:n,a=e.replace,i=e.to,l=e.innerRef,u=de(e,["component","replace","to","innerRef"]);return o.a.createElement(he.Consumer,null,(function(e){e||V(!1);var n=e.history,c=Qe(Ge(i,e.location),e.location),s=c?n.createHref(c):"",f=D({},u,{href:s,navigate:function(){var t=Ge(i,e.location);(a?n.replace:n.push)(t)}});return Ke!==Ye?f.ref=t||l:f.innerRef=l,o.a.createElement(r,f)}))})),Ze=function(e){return e},et=o.a.forwardRef;void 0===et&&(et=Ze);et((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,a=e.activeClassName,i=void 0===a?"active":a,l=e.activeStyle,u=e.className,c=e.exact,s=e.isActive,f=e.location,d=e.sensitive,p=e.strict,h=e.style,m=e.to,v=e.innerRef,g=de(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement(he.Consumer,null,(function(e){e||V(!1);var n=f||e.location,a=Qe(Ge(m,n),n),y=a.pathname,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=b?ye(n.pathname,{path:b,exact:c,sensitive:d,strict:p}):null,x=!!(s?s(w,n):w),_=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,i):u,k=x?D({},h,{},l):h,E=D({"aria-current":x&&r||null,className:_,style:k,to:a},g);return Ze!==et?E.ref=t||v:E.innerRef=v,o.a.createElement(Xe,E)}))}));i.a.render(o.a.createElement($e,null,o.a.createElement(He,null)),document.querySelector("#root"))},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r.default})),n.d(t,"parseRootMargin",(function(){return o.c})),n.d(t,"useIntersectionObserver",(function(){return u}));var r=n(27),o=n(4),a=n(0),i=n(8),l=function(){},u=function(e,t){var n=void 0===t?{}:t,r=n.root,u=n.rootMargin,c=n.threshold,s=n.disabled,f=Object(a.useRef)(!1),d=Object(a.useRef)({handleChange:function(t){e(t,l)}}),p=Object(a.useCallback)((function(){d.current.target&&f.current&&(Object(i.c)(d.current,d.current.target),f.current=!1)}),[]);d.current.handleChange=function(t){e(t,p)};var h=function(){d.current.observer&&d.current.target&&!f.current&&(Object(i.b)(d.current),f.current=!0)},m=Object(a.useMemo)((function(){return c}),[Object(o.e)(c)]),v=Object(a.useMemo)((function(){if(s)return p(),void(d.current.observer=void 0);var e="string"==typeof r?document.querySelector(r):r,t=Object(i.a)({root:e,rootMargin:u,threshold:m});return d.current.observer=t,p(),h(),t}),[r,u,m,s]);return[Object(a.useCallback)((function(e){var t=null!=e&&d.current.target!==e;v||p(),t&&(p(),d.current.target=e,h()),e||(p(),d.current.target=void 0)}),[v]),p]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQYWdlL2NhcmRQYWdlLmNzcz9jOWY5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9QbGFjZWhvbGRlckNhcmQvcGxhY2Vob2xkZXJDYXJkLmNzcz8zNzliIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzZWFyY2hnYXRlL3JlYWN0LWludGVyc2VjdGlvbi1vYnNlcnZlci9saWIvZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2hlYWRlci5jc3M/MzYxNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJlc2VhcmNoZ2F0ZS9yZWFjdC1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvbGliL2VzL29ic2VydmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bnNwbGFzaC1qcy9saWIvdW5zcGxhc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZHNMaXN0L0NhcmQvQ29udHJvbHMvY29udHJvbHMuY3NzP2ZhMTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZHNMaXN0L0NhcmQvSW5mby9NZXRhRGF0YS9tZXRhZGF0YS5jc3M/NWNjZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvY2FyZExpc3QuY3NzP2ZjZjAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9jYXJkLi5jc3M/YWUxZiIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkL0luZm8vaW5mby5jc3M/Njc4YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9QcmV2aWV3L3ByZXZpZXcuY3NzPzNmNWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Njcm9sbC1sb2NrL2Rpc3Qvc2Nyb2xsLWxvY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Vuc3BsYXNoLWpzL2xpYi9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Vuc3BsYXNoLWpzL2xpYi91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzZWFyY2hnYXRlL3JlYWN0LWludGVyc2VjdGlvbi1vYnNlcnZlci9saWIvZXMvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci9mb290ZXIuY3NzPzAxNzUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXByb2dyZXNzaXZlLWdyYWNlZnVsLWltYWdlL2Rpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmdsb2JhbC5jc3M/MDUxZiIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5nbG9iYWwuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtLXVybGVuY29kZWQvZm9ybS11cmxlbmNvZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bnNwbGFzaC1qcy9ub2RlX21vZHVsZXMvdXJsLXBhcnNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXF1aXJlcy1wb3J0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZ2lmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5zcGxhc2gtanMvbGliL21ldGhvZHMvYXV0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5zcGxhc2gtanMvbGliL21ldGhvZHMvY3VycmVudFVzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Vuc3BsYXNoLWpzL2xpYi9tZXRob2RzL3VzZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bnNwbGFzaC1qcy9saWIvbWV0aG9kcy9waG90b3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5nZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Vuc3BsYXNoLWpzL2xpYi9tZXRob2RzL2NvbGxlY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bnNwbGFzaC1qcy9saWIvbWV0aG9kcy9zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Vuc3BsYXNoLWpzL2xpYi9tZXRob2RzL3N0YXRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9jYXJkTGlzdC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZHNMaXN0L0NhcmQvY2FyZC4uY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkL0NvbnRyb2xzL2NvbnRyb2xzLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9JbmZvL2luZm8uY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkL0luZm8vTWV0YURhdGEvbWV0YWRhdGEuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkL1ByZXZpZXcvcHJldmlldy5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZHNMaXN0L1BsYWNlaG9sZGVyQ2FyZC9wbGFjZWhvbGRlckNhcmQuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9oZWFkZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci9mb290ZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRQYWdlL2NhcmRQYWdlLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL0hlYXJ0SWNvblVucHJlc3NlZC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9IZWFydEljb25QcmVzc2VkLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9Db250cm9scy9Db250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9JbmZvL01ldGFEYXRhL01ldGFEYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkL0luZm8vSW5mby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkc0xpc3QvQ2FyZC9QcmV2aWV3L1ByZXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZHNMaXN0L0NhcmQvQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nLzMuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9QbGFjZWhvbGRlckNhcmQvUGxhY2Vob2xkZXJDYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmRzTGlzdC9DYXJkTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9vdGVyL0Zvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL2Nyb3NzMi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZFBhZ2UvQ2FyZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZXNlYXJjaGdhdGUvcmVhY3QtaW50ZXJzZWN0aW9uLW9ic2VydmVyL2xpYi9lcy9ob29rLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJvcHRpb25zIiwibG9jYWxzIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9hIiwibWFyZ2luUkUiLCJwYXJzZVJvb3RNYXJnaW4iLCJyb290TWFyZ2luIiwicmVzdWx0IiwidHJpbSIsInNwbGl0IiwibWFwIiwibWFyZ2luIiwidGVzdCIsIkVycm9yIiwibTAiLCJzaGlmdCIsIm0xIiwiX2IiLCJtMiIsIl9jIiwic2hhbGxvd0NvbXBhcmUiLCJuZXh0IiwicHJldiIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInNvbWUiLCJfIiwiaW5kZXgiLCJ0b1N0cmluZyIsImlzQ2hpbGRyZW5XaXRoUmVmIiwiY2hpbGRyZW4iLCJ0aHJlc2hvbGRDYWNoZUtleSIsInRocmVzaG9sZCIsImpvaW4iLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwidXNlU291cmNlTWFwIiwidGhpcyIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0IiwiZGF0YSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm9ic2VydmVyRWxlbWVudHNNYXAiLCJNYXAiLCJmaW5kT2JzZXJ2ZXJFbGVtZW50Iiwib2JzZXJ2ZXIiLCJlbnRyeSIsImVsZW1lbnRzIiwidmFsdWVzIiwiZWxlbWVudCIsImNhbGxiYWNrIiwiZW50cmllcyIsImhhbmRsZUNoYW5nZSIsImNyZWF0ZU9ic2VydmVyIiwicG9vbGVkIiwicm9vdCIsIm9ic2VydmVycyIsInRocmVzaG9sZHMiLCJnZXRQb29sZWQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInNldCIsIlNldCIsIm9ic2VydmVFbGVtZW50IiwiYWRkIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZUVsZW1lbnQiLCJoYXMiLCJ0YXJnZXRzIiwiZGVsZXRlIiwic2l6ZSIsInVub2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInRvSnNvbiIsInJlcyIsImpzb24iLCJfY29uc3RhbnRzIiwiX3V0aWxzIiwiX2F1dGgyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jdXJyZW50VXNlcjIiLCJfdXNlcnMyIiwiX3Bob3RvczIiLCJfY29sbGVjdGlvbnMyIiwiX3NlYXJjaDIiLCJfc3RhdHMyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJVbnNwbGFzaCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9hcGlVcmwiLCJhcGlVcmwiLCJBUElfVVJMIiwiX2FwaVZlcnNpb24iLCJhcGlWZXJzaW9uIiwiQVBJX1ZFUlNJT04iLCJfYWNjZXNzS2V5IiwiYWNjZXNzS2V5IiwiX3NlY3JldCIsInNlY3JldCIsIl9jYWxsYmFja1VybCIsImNhbGxiYWNrVXJsIiwiX2JlYXJlclRva2VuIiwiYmVhcmVyVG9rZW4iLCJfaGVhZGVycyIsImhlYWRlcnMiLCJfdGltZW91dCIsInRpbWVvdXQiLCJhdXRoIiwiY3VycmVudFVzZXIiLCJ1c2VycyIsInBob3RvcyIsImNvbGxlY3Rpb25zIiwic2VhcmNoIiwic3RhdHMiLCJyZXF1ZXN0T3B0aW9ucyIsIl9idWlsZEZldGNoT3B0aW9ucyRiaSIsImJ1aWxkRmV0Y2hPcHRpb25zIiwidXJsIiwiZmV0Y2giLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImciLCJGdW5jdGlvbiIsImZhY3RvcnkiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiYXJndW1lbnRBc0FycmF5IiwiYXJndW1lbnQiLCJpc0VsZW1lbnQiLCJOb2RlIiwiZWFjaE5vZGUiLCJub2RlTGlzdCIsIk5vZGVMaXN0IiwiaXNFbGVtZW50TGlzdCIsInRocm93RXJyb3IiLCJtZXNzYWdlIiwiYXJyYXlBc1NlbGVjdG9yIiwiYXJyYXkiLCJub2RlTGlzdEFzQXJyYXkiLCJub2RlcyIsIm5vZGUiLCJmaW5kUGFyZW50QnlTZWxlY3RvciIsIiRlbCIsInNlbGVjdG9yIiwic2VsZiIsIiRyb290IiwicXVlcnlTZWxlY3RvckFsbCIsImluZGV4T2YiLCJwYXJlbnRFbGVtZW50IiwiZWxlbWVudEhhc1NlbGVjdG9yIiwiZWxlbWVudEhhc092ZXJmbG93SGlkZGVuIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93IiwiZWxlbWVudFNjcm9sbFRvcE9uU3RhcnQiLCJzY3JvbGxUb3AiLCJlbGVtZW50U2Nyb2xsVG9wT25FbmQiLCJzY3JvbGxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJlbGVtZW50U2Nyb2xsTGVmdE9uU3RhcnQiLCJzY3JvbGxMZWZ0IiwiZWxlbWVudFNjcm9sbExlZnRPbkVuZCIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJlbGVtZW50SXNTY3JvbGxhYmxlRmllbGQiLCJlbGVtZW50SXNJbnB1dFJhbmdlIiwiX2RlZmluZVByb3BlcnR5IiwiZGlzYWJsZVBhZ2VTY3JvbGwiLCJlbmFibGVQYWdlU2Nyb2xsIiwiZ2V0U2Nyb2xsU3RhdGUiLCJjbGVhclF1ZXVlU2Nyb2xsTG9ja3MiLCJzY3JvbGxfbG9ja19nZXRUYXJnZXRTY3JvbGxCYXJXaWR0aCIsInNjcm9sbF9sb2NrX2dldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aCIsImdldFBhZ2VTY3JvbGxCYXJXaWR0aCIsImdldEN1cnJlbnRQYWdlU2Nyb2xsQmFyV2lkdGgiLCJzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlVGFyZ2V0Iiwic2Nyb2xsX2xvY2tfcmVtb3ZlU2Nyb2xsYWJsZVRhcmdldCIsInNjcm9sbF9sb2NrX2FkZFNjcm9sbGFibGVTZWxlY3RvciIsInNjcm9sbF9sb2NrX3JlbW92ZVNjcm9sbGFibGVTZWxlY3RvciIsInNjcm9sbF9sb2NrX2FkZExvY2thYmxlVGFyZ2V0Iiwic2Nyb2xsX2xvY2tfYWRkTG9ja2FibGVTZWxlY3RvciIsInNjcm9sbF9sb2NrX3NldEZpbGxHYXBNZXRob2QiLCJzY3JvbGxfbG9ja19hZGRGaWxsR2FwVGFyZ2V0Iiwic2Nyb2xsX2xvY2tfcmVtb3ZlRmlsbEdhcFRhcmdldCIsInNjcm9sbF9sb2NrX2FkZEZpbGxHYXBTZWxlY3RvciIsInNjcm9sbF9sb2NrX3JlbW92ZUZpbGxHYXBTZWxlY3RvciIsInJlZmlsbEdhcHMiLCJGSUxMX0dBUF9BVkFJTEFCTEVfTUVUSE9EUyIsInN0YXRlIiwic2Nyb2xsIiwicXVldWUiLCJzY3JvbGxhYmxlU2VsZWN0b3JzIiwibG9ja2FibGVTZWxlY3RvcnMiLCJmaWxsR2FwU2VsZWN0b3JzIiwiZmlsbEdhcE1ldGhvZCIsInN0YXJ0VG91Y2hZIiwic3RhcnRUb3VjaFgiLCJzY3JvbGxfbG9ja19oaWRlTG9ja2FibGVPdmVyZmxvdyIsImZpbGxHYXBzIiwic2Nyb2xsX2xvY2tfc2hvd0xvY2thYmxlT3ZlcmZsb3ciLCJ1bmZpbGxHYXBzIiwiJHRhcmdldCIsIm9ubHlFeGlzdHMiLCJjdXJyZW50T3ZlcmZsb3dZUHJvcGVydHkiLCJvdmVyZmxvd1kiLCJnZXRBdHRyaWJ1dGUiLCJ3aWR0aCIsImJvZHkiLCJkb2N1bWVudFdpZHRoIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiYm9yZGVyTGVmdFdpZHRoQ3VycmVudFByb3BlcnR5IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aEN1cnJlbnRQcm9wZXJ0eSIsImJvcmRlclJpZ2h0V2lkdGgiLCJfY3VycmVudFdpZHRoIiwiJHRhcmdldHMiLCJzU2VsZWN0b3IiLCJtZXRob2QiLCJtZXRob2RzIiwic2Nyb2xsX2xvY2tfZmlsbEdhcFRhcmdldCIsInNjcm9sbF9sb2NrX3VuZmlsbEdhcFRhcmdldCIsInNjcm9sbF9sb2NrX2ZpbGxHYXBTZWxlY3RvciIsImZTZWxlY3RvciIsInNjcm9sbF9sb2NrX3VuZmlsbEdhcFNlbGVjdG9yIiwic2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3dTZWxlY3RvciIsInNjcm9sbF9sb2NrX3Nob3dMb2NrYWJsZU92ZXJmbG93U2VsZWN0b3IiLCJzY3JvbGxfbG9ja19oaWRlTG9ja2FibGVPdmVyZmxvd1RhcmdldCIsInNjcm9sbF9sb2NrX3Nob3dMb2NrYWJsZU92ZXJmbG93VGFyZ2V0IiwiY29tcHV0ZWRTdHlsZSIsImlzTG9ja2FibGUiLCJzY3JvbGxCYXJXaWR0aCIsIiRsb2NrYWJsZVBhcmVudCIsImN1cnJlbnRNYXJnaW4iLCJwYXJzZUZsb2F0IiwibWFyZ2luUmlnaHQiLCJtYXhXaWR0aCIsImN1cnJlbnRQYWRkaW5nIiwicGFkZGluZ1JpZ2h0IiwiY3VycmVudEZpbGxHYXBNZXRob2QiLCJhZGRFdmVudExpc3RlbmVyIiwidG91Y2hlcyIsImNsaWVudFkiLCJjbGllbnRYIiwiY3VycmVudENsaWVudFkiLCJjdXJyZW50Q2xpZW50WCIsImRpcmVjdGlvbiIsInVwIiwiZG93biIsImxlZnQiLCJyaWdodCIsImRpcmVjdGlvbldpdGhPZmZzZXQiLCJoYW5kbGUiLCJza2lwIiwicGFyZW50U2Nyb2xsYWJsZUVsIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwicGFzc2l2ZSIsImRlcHJlY2F0ZWRNZXRob2RzIiwiaGlkZSIsInNob3ciLCJ0b2dnbGUiLCJnZXRTdGF0ZSIsImdldFdpZHRoIiwiZ2V0Q3VycmVudFdpZHRoIiwic2V0U2Nyb2xsYWJsZVRhcmdldHMiLCJzZXRGaWxsR2FwU2VsZWN0b3JzIiwic2V0RmlsbEdhcFRhcmdldHMiLCJjbGVhclF1ZXVlIiwic2Nyb2xsTG9jayIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkIiwiZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGgiLCJnZXRDdXJyZW50VGFyZ2V0U2Nyb2xsQmFyV2lkdGgiLCJhZGRTY3JvbGxhYmxlU2VsZWN0b3IiLCJyZW1vdmVTY3JvbGxhYmxlU2VsZWN0b3IiLCJhZGRTY3JvbGxhYmxlVGFyZ2V0IiwicmVtb3ZlU2Nyb2xsYWJsZVRhcmdldCIsImFkZExvY2thYmxlU2VsZWN0b3IiLCJhZGRMb2NrYWJsZVRhcmdldCIsImFkZEZpbGxHYXBTZWxlY3RvciIsInJlbW92ZUZpbGxHYXBTZWxlY3RvciIsImFkZEZpbGxHYXBUYXJnZXQiLCJyZW1vdmVGaWxsR2FwVGFyZ2V0Iiwic2V0RmlsbEdhcE1ldGhvZCIsIl9zdGF0ZSIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiaCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiYXBwbHkiLCJlbWl0dGVyIiwiX3Byb3RvIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIngiLCJ5IiwicmVuZGVyIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJpc1JlcXVpcmVkIiwiQ29uc3VtZXIiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNvbnRleHRUeXBlcyIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJzbGljZSIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJyZXBsYWNlIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsImZsYWdzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJhdHRhY2hLZXlzIiwicmUiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJlbmQiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwibWF0Y2giLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIk9BVVRIX0FVVEhPUklaRV9VUkwiLCJPQVVUSF9UT0tFTl9VUkwiLCJfZXh0ZW5kcyIsImZvcm1VcmxFbmNvZGUiLCJnZXRVcmxDb21wb25lbnRzIiwidXJpIiwiX3VybFBhcnNlMiIsInF1ZXJ5Iiwib2F1dGgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJfcXVlcnlzdHJpbmciLCJfZm9ybVVybGVuY29kZWQyIiwiZGVjb2RlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fIiwib2JzZXJ2ZXJPcHRpb25zIiwib2JzZXJ2YWJsZVByb3BzIiwiZ2V0T3B0aW9ucyIsInJlZHVjZSIsImlzUm9vdFN0cmluZyIsIlJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJfc3VwZXIiLCJldmVudCIsIm9uQ2hhbmdlIiwiZXh0ZXJuYWxVbm9ic2VydmUiLCJoYW5kbGVOb2RlIiwiY2hpbGRlblJlZiIsInJlZiIsImN1cnJlbnQiLCJ0YXJnZXROb2RlIiwibm9kZVR5cGUiLCJkaXNhYmxlZCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwicHJldlByb3BzIiwicHJldlRhcmdldE5vZGUiLCJyZWxhdGVkUHJvcHNDaGFuZ2VkIiwicHJvcCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInRhcmdldE5vZGVDaGFuZ2VkIiwiY2xvbmVFbGVtZW50IiwiQ2hpbGRyZW4iLCJvbmx5IiwiZGlzcGxheU5hbWUiLCJDb21wb25lbnQiLCJSZWFjdCIsIl90eXBlb2YiLCJjYWNoZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdEludGVyc2VjdGlvbk9ic2VydmVyIiwiV2Vha01hcCIsIml0ZXJhdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfZ2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsImhhc1dpbmRvdyIsIlByb2dyZXNzaXZlSW1hZ2UiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJpc09ubGluZSIsIm5hdmlnYXRvciIsIm9uTGluZSIsInNyYyIsInNyY1NldERhdGEiLCJpbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJJbWFnZSIsIm9uTG9hZCIsIm9uRXJyb3IiLCJzcmNzZXQiLCJzcmNTZXQiLCJzaXplcyIsImRlbGF5Iiwic2V0SW1hZ2VXaXRoRGVsYXkiLCJzZXRJbWFnZSIsInNldFRpbWVvdXQiLCJfaXNNb3VudGVkIiwibG9hZGluZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVPbmxpbmVTdGF0dXMiLCJlcnJvckV2ZW50IiwiaXNJbnRlcnNlY3RpbmciLCJfdGhpcyRwcm9wcyIsImxvYWRJbWFnZSIsInBsYWNlaG9sZGVyIiwiX2luaGVyaXRzIiwiX3RoaXMkcHJvcHMyIiwiY2xlYXJUaW1lb3V0IiwiX3RoaXMzIiwiaGFuZGxlSW50ZXJzZWN0aW9uIiwibm9MYXp5TG9hZCIsIl90aGlzJHN0YXRlIiwiX3RoaXMkcHJvcHMzIiwibm9SZXRyeSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY29udGV4dFR5cGUiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwiTWVtbyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJmb3IiLCJxIiwidSIsInYiLCJ3IiwieiIsIkEiLCJCIiwiQyIsImEiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwicmVmcyIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiayIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiUyIsIlYiLCJUIiwiVSIsImRvbmUiLCJlc2NhcGUiLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ1YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsIndhIiwiZGVwZW5kZW5jaWVzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInRvTG93ZXJDYXNlIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJSYSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsImNvbnRhaW5lciIsIkxjIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIlZjIiwiV2MiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJiZCIsImNkIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiT2MiLCJqZCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsIm1kIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsImlzIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsImNvbnRlbnRXaW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJwcmV2aW91c1NpYmxpbmciLCJMZCIsIk1hdGgiLCJyYW5kb20iLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsImxlIiwibWUiLCJuZSIsIm9lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJrZXlDb2RlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwiTWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIk9nIiwiUGciLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwiZWxlbWVudFR5cGUiLCJVZyIsImltcGxlbWVudGF0aW9uIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJ0YWdOYW1lIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJ4aCIsInloIiwiemgiLCJBaCIsImRlc3Ryb3kiLCJkZXBzIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJnaSIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJpaSIsInJldHJ5VGltZSIsImppIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiZGlzcGxheSIsIlVpIiwiVmkiLCJ0aGVuIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJmb3JtIiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsInFzIiwic2VwIiwiZXEiLCJyZWdleHAiLCJtYXhLZXlzIiwibGVuIiwia3N0ciIsInZzdHIiLCJpZHgiLCJ4cyIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwib2JqZWN0S2V5cyIsImtzIiwic29ydGVkIiwic29ydCIsImZpbHRlcmpvaW4iLCJhcnIiLCJuZXN0IiwiaWdub3JlbnVsbCIsImVsZW0iLCJhcnJuZXN0Iiwib2JqbmVzdCIsInJlcXVpcmVkIiwic2xhc2hlcyIsInByb3RvY29scmUiLCJ0cmltTGVmdCIsInJ1bGVzIiwiYWRkcmVzcyIsIk5hTiIsImlnbm9yZSIsImhhc2giLCJsb2xjYXRpb24iLCJsb2MiLCJmaW5hbGRlc3RpbmF0aW9uIiwicHJvdG9jb2wiLCJVcmwiLCJwYXRobmFtZSIsImV4dHJhY3RQcm90b2NvbCIsInJlc3QiLCJwYXJzZXIiLCJyZWxhdGl2ZSIsImV4dHJhY3RlZCIsImluc3RydWN0aW9uIiwiaW5zdHJ1Y3Rpb25zIiwidW5zaGlmdCIsInJlc29sdmUiLCJwb3J0IiwiaG9zdCIsImhvc3RuYW1lIiwidXNlcm5hbWUiLCJvcmlnaW4iLCJwYXJ0IiwiZm4iLCJpbnMiLCJwYWlycyIsImdldEF1dGhlbnRpY2F0aW9uVXJsIiwic2NvcGUiLCJxdWVyeXN0cmluZ3MiLCJfcXVlcnlzdHJpbmcyIiwiY2xpZW50X2lkIiwicmVkaXJlY3RfdXJpIiwicmVzcG9uc2VfdHlwZSIsInVzZXJBdXRoZW50aWNhdGlvbiIsImNvZGUiLCJyZXF1ZXN0IiwiY2xpZW50X3NlY3JldCIsImdyYW50X3R5cGUiLCJzZXRCZWFyZXJUb2tlbiIsImFjY2Vzc1Rva2VuIiwicHJvZmlsZSIsInVwZGF0ZVByb2ZpbGUiLCJlbmRwb2ludFVybCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiYmlvIiwiaW5zdGFncmFtVXNlcm5hbWUiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiaW5zdGFncmFtX3VzZXJuYW1lIiwicGFnZSIsInBlclBhZ2UiLCJvcmRlckJ5IiwicGVyX3BhZ2UiLCJvcmRlcl9ieSIsIm9yaWVudGF0aW9uIiwibGlrZXMiLCJzdGF0aXN0aWNzIiwicmVzb2x1dGlvbiIsInF1YW50aXR5IiwibGlzdFBob3RvcyIsImdldFBob3RvIiwiZ2V0UGhvdG9TdGF0cyIsImdldFJhbmRvbVBob3RvIiwiZmVhdHVyZWQiLCJjYWNoZUJ1c3RlciIsImdldFRpbWUiLCJsaWtlUGhvdG8iLCJ1bmxpa2VQaG90byIsImRvd25sb2FkUGhvdG8iLCJ0cmFja0Rvd25sb2FkIiwiX2xvZGFzaCIsIl9sb2Rhc2gyIiwicGhvdG8iLCJkb3dubG9hZExvY2F0aW9uIiwidXJsQ29tcG9uZW50cyIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZUxlYWRpbmdEb3QiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwicmVJc0hvc3RDdG9yIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwidWlkIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsImZ1bmNUb1N0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwicmVJc05hdGl2ZSIsImdldE5hdGl2ZSIsIm5hdGl2ZUNyZWF0ZSIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJIYXNoIiwiY2xlYXIiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsImFzc29jSW5kZXhPZiIsIm90aGVyIiwiYmFzZUdldCIsImlzU3ltYm9sIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJ0b0tleSIsImJhc2VJc05hdGl2ZSIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzSG9zdE9iamVjdCIsInRvU291cmNlIiwiZ2V0TWFwRGF0YSIsIl9fZGF0YV9fIiwibWVtb2l6ZSIsInN0cmluZyIsImJhc2VUb1N0cmluZyIsInF1b3RlIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsImFyZ3MiLCJDYWNoZSIsImlzT2JqZWN0TGlrZSIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uUGhvdG9zIiwiY3JlYXRlVXBkYXRlQ29sbGVjdGlvbiIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJpc1ByaXZhdGUiLCJsaXN0Q29sbGVjdGlvbnMiLCJnZXRDb2xsZWN0aW9uIiwiZ2V0Q29sbGVjdGlvblBob3RvcyIsImNyZWF0ZUNvbGxlY3Rpb24iLCJ1cGRhdGVDb2xsZWN0aW9uIiwiZGVsZXRlQ29sbGVjdGlvbiIsImFkZFBob3RvVG9Db2xsZWN0aW9uIiwiY29sbGVjdGlvbklkIiwicGhvdG9JZCIsInBob3RvX2lkIiwicmVtb3ZlUGhvdG9Gcm9tQ29sbGVjdGlvbiIsImxpc3RSZWxhdGVkQ29sbGVjdGlvbnMiLCJrZXl3b3JkIiwiY29udGVudF9maWx0ZXIiLCJjb250ZW50RmlsdGVyIiwibGFuZyIsInRvdGFsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiZmlsbCIsInZpZXdCb3giLCJDb250cm9scyIsImNsaWNrZWRJbWFnZU9iaiIsImlzTGlrZWQiLCJoYW5kbGVDbGlja0hlYXJ0IiwiaXNIZWFydEVycm9yIiwiY2xhc3NOYW1lIiwic3R5bGVzIiwiY29udHJvbHNDb250YWluZXIiLCJsaWtlc0NvbnRhaW5lciIsImxpa2VzVmFsdWUiLCJIZWFydEljb25QcmVzc2VkIiwiSGVhcnRJY29uVW5wcmVzc2VkIiwiZXJyb3JDb250YWluZXIiLCJlcnJvclZhbHVlIiwiTWV0YURhdGEiLCJjcmVhdGVkIiwiYXZhIiwibWV0YURhdGEiLCJ1c2VyTGluayIsImF2YXRhciIsImFsdCIsInVzZXJOYW1lIiwiY3JlYXRlZEF0IiwiSW5mbyIsImluZm9Db250YWluZXIiLCJtZXRhQ29udGFpbmVyIiwiUHJldmlldyIsImhhbmRsZUNsaWNrUHJldmlldyIsInByZXZpZXdDb250YWluZXJCdXR0b24iLCJwcmV2aWV3SW1nIiwiQ2FyZCIsInNldElzSGVhcnRFcnJvciIsIm9wZW4iLCJwcmVzc2VkIiwic2V0UHJlc3NlZCIsInNldExpa2VkSWQiLCJ3aG9JcyIsImlzQXV0aCIsImNhcmQiLCJsb2FkTW9yZUNvbnRhaW5lciIsImxvYWRNb3JlVGV4dCIsImR1ciIsInJlcGVhdENvdW50IiwiUGxhY2Vob2xkZXJDYXJkIiwiYnV0dG9uSGVhcnQiLCJDYXJkTGlzdCIsImNhcmRMaXN0IiwiaW1hZ2VzIiwic2V0SXNDYXJkT3BlbmVkIiwibG9hZE1vcmVCdG4iLCJjcmVhdGVkX2F0IiwidXNlciIsImxpbmtzIiwiaHRtbCIsInVybHMiLCJ0aHVtYiIsInByb2ZpbGVfaW1hZ2UiLCJzbWFsbCIsImxpa2VkX2J5X3VzZXIiLCJsb2FkZXIiLCJtYWluQ29udGFpbmVyIiwiY2VudHJhbENvbnRhaW5lciIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJSb3V0ZXIiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3dpdGNoIiwiSGVhZGVyIiwiZ29Ub0F1dGhvcml6ZVBhZ2UiLCJkZXZCdG4iLCJ0b0xvZ291dCIsInVzZXJQcm9maWxlIiwiaGVhZGVyQ29udGFpbmVyIiwibG9nb0NvbnRhaW5lciIsInVzZXJDb250YWluZXIiLCJsb2dvdXRUZXh0IiwiYXZhdGFySW1nIiwiYXZhdGFyVGV4dCIsIkZvb3RlciIsImlzQ2FyZE9wZW5lZCIsImZvb3RlckNvbnRhaW5lciIsIkNhcmRQYWdlIiwiY2FyZFBhZ2UiLCJpbWFnZUNvbnRhaW5lciIsInJlZ3VsYXIiLCJhbHRfZGVzY3JpcHRpb24iLCJhdXRob3JDb250YWluZXIiLCJleGl0QnV0dG9uIiwiZXhpdEltZ1doaXRlIiwiQXBwIiwibG9jYWxTdG9yYWdlIiwiYWNjZXNzVG9rZW5Gb3JVbnNwbGFzaCIsInVuc3BsYXNoIiwicHJvY2VzcyIsInNldEltYWdlcyIsInNldENsaWNrZWRJbWFnZU9iaiIsInNldFBhZ2UiLCJzZXRJc0F1dGgiLCJzZXRVc2VyUHJvZmlsZSIsInNldEJlYXJlclRva2VuVG9Mb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiYWRkUGhvdG9zIiwibmV3SW1hZ2VzQXJyIiwibG9nIiwiY2xpY2tlZE9iaiIsImZpbmQiLCJjbGlja2VkT2JqTGlrZXNBbW91bnQiLCJsaWtlUGhvdG9SZXF1ZXN0IiwibG9jYWxGaWx0ZXJlZEltYWdlcyIsInVubGlrZVBob3RvUmVxdWVzdCIsImNvZGVGcm9tVXJsIiwiYWNjZXNzX3Rva2VuIiwiZ2V0QmVhcmVyVG9rZW5Gcm9tVXJsQ29kZSIsImF1dGhlbnRpY2F0aW9uVXJsIiwicmVtb3ZlSXRlbSIsIkF1dGgiLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiIsIl9yZWYyJGNvbXBvbmVudCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiUmVhY3RET00iLCJ1c2VJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmluZ1JlZiIsImluc3RhbmNlUmVmIiwibWVtb2l6ZWRUaHJlc2hvbGQiLCJyb290T3B0aW9uIiwib2JzIiwiaXNOZXdOb2RlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMv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RCxRQUFRN1ksYUFBZSxTQUFzQnVZLEdBRXJEQyxFQUFTRCxFQUFPclgsSUFFcEIsSUFBSU4sRUFBVSxXQUNOcWlFLEVBQVlwcUQsUUFBUXBaLFVBQ3BCd2pFLEVBQVlwcUQsUUFBUTVlLFNBQ25CK29FLEVBQWFucUQsVUFDZCxZQUFlb3FELEVBQVlwcUQsU0FDM0JtcUQsRUFBYW5xRCxTQUFVLElBRzNCcXFELEVBQW9CLG1CQUFRLFdBQWMsT0FBTzNwRSxJQUFjLENBQy9ELFlBQWtCQSxLQUVsQmtHLEVBQVcsbUJBQVEsV0FDbkIsR0FBSXVaLEVBR0EsT0FGQTlYLFNBQ0EraEUsRUFBWXBxRCxRQUFRcFosY0FBV3NELEdBR25DLElBQUlvZ0UsRUFBNkIsaUJBQVRoakUsRUFBb0J0RyxTQUFTTSxjQUFjZ0csR0FBUUEsRUFDdkVpakUsRUFBTSxZQUFlLENBQ3JCampFLEtBQU1nakUsRUFDTnZyRSxXQUFZQSxFQUNaMkIsVUFBVzJwRSxJQUtmLE9BSEFELEVBQVlwcUQsUUFBUXBaLFNBQVcyakUsRUFDL0JsaUUsSUFDQU4sSUFDT3dpRSxJQUNSLENBQUNqakUsRUFBTXZJLEVBQVlzckUsRUFBbUJscUQsSUFnQnpDLE1BQU8sQ0FmTSx1QkFBWSxTQUFVM1MsR0FDL0IsSUFBSWc5RCxFQUFvQixNQUFSaDlELEdBQWdCNDhELEVBQVlwcUQsUUFBUTVlLFNBQVdvTSxFQUMxRDVHLEdBQ0R5QixJQUVBbWlFLElBQ0FuaUUsSUFDQStoRSxFQUFZcHFELFFBQVE1ZSxPQUFTb00sRUFDN0J6RixLQUVDeUYsSUFDRG5GLElBQ0EraEUsRUFBWXBxRCxRQUFRNWUsWUFBUzhJLEtBRWxDLENBQUN0RCxJQUNZeUIiLCJmaWxlIjoiaW5kZXhfYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS01LTEhLi9jYXJkUGFnZS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNS0xIS4vcGxhY2Vob2xkZXJDYXJkLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsInZhciBfYTtcbnZhciBtYXJnaW5SRSA9IC9eLT9cXGQqXFwuP1xcZCsocHh8JSkkLztcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJvb3RNYXJnaW4ocm9vdE1hcmdpbikge1xuICAgIHZhciBtYXJnaW5TdHJpbmcgPSByb290TWFyZ2luID8gcm9vdE1hcmdpbi50cmltKCkgOiAnMHB4JztcbiAgICB2YXIgcmVzdWx0ID0gbWFyZ2luU3RyaW5nLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgaWYgKCFtYXJnaW5SRS50ZXN0KG1hcmdpbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdE1hcmdpbiBtdXN0IGJlIGEgc3RyaW5nIGxpdGVyYWwgY29udGFpbmluZyBwaXhlbHMgYW5kL29yIHBlcmNlbnQgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9KTtcbiAgICB2YXIgbTAgPSByZXN1bHQuc2hpZnQoKTtcbiAgICB2YXIgX2EgPSByZXN1bHRbMF0sIG0xID0gX2EgPT09IHZvaWQgMCA/IG0wIDogX2EsIF9iID0gcmVzdWx0WzFdLCBtMiA9IF9iID09PSB2b2lkIDAgPyBtMCA6IF9iLCBfYyA9IHJlc3VsdFsyXSwgbTMgPSBfYyA9PT0gdm9pZCAwID8gbTEgOiBfYztcbiAgICByZXR1cm4gbTAgKyBcIiBcIiArIG0xICsgXCIgXCIgKyBtMiArIFwiIFwiICsgbTM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5leHQpICYmIEFycmF5LmlzQXJyYXkocHJldikpIHtcbiAgICAgICAgaWYgKG5leHQubGVuZ3RoID09PSBwcmV2Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQuc29tZShmdW5jdGlvbiAoXywgaW5kZXgpIHsgcmV0dXJuIHNoYWxsb3dDb21wYXJlKG5leHRbaW5kZXhdLCBwcmV2W2luZGV4XSk7IH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0ICE9PSBwcmV2O1xufVxuZXhwb3J0IHZhciBoYXNPd25Qcm9wZXJ0eSA9IChfYSA9IE9iamVjdC5wcm90b3R5cGUsIF9hLmhhc093blByb3BlcnR5KSwgdG9TdHJpbmcgPSBfYS50b1N0cmluZztcbmV4cG9ydCBmdW5jdGlvbiBpc0NoaWxkcmVuV2l0aFJlZihjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGNoaWxkcmVuLCAncmVmJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyZXNob2xkQ2FjaGVLZXkodGhyZXNob2xkKSB7XG4gICAgaWYgKCF0aHJlc2hvbGQgfHwgdHlwZW9mIHRocmVzaG9sZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZDtcbiAgICB9XG4gICAgcmV0dXJuIHRocmVzaG9sZC5qb2luKCcsJyk7XG59XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMSEuL2hlYWRlci5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiaW1wb3J0IHsgcGFyc2VSb290TWFyZ2luLCBzaGFsbG93Q29tcGFyZSB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBvYnNlcnZlckVsZW1lbnRzTWFwID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvb2xlZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgcm9vdCA9IG9wdGlvbnMucm9vdCB8fCBudWxsO1xuICAgIHZhciByb290TWFyZ2luID0gcGFyc2VSb290TWFyZ2luKG9wdGlvbnMucm9vdE1hcmdpbik7XG4gICAgdmFyIHRocmVzaG9sZCA9IEFycmF5LmlzQXJyYXkob3B0aW9ucy50aHJlc2hvbGQpXG4gICAgICAgID8gb3B0aW9ucy50aHJlc2hvbGRcbiAgICAgICAgOiBbb3B0aW9ucy50aHJlc2hvbGQgIT0gbnVsbCA/IG9wdGlvbnMudGhyZXNob2xkIDogMF07XG4gICAgdmFyIG9ic2VydmVycyA9IG9ic2VydmVyRWxlbWVudHNNYXAua2V5cygpO1xuICAgIHZhciBvYnNlcnZlcjtcbiAgICB3aGlsZSAoKG9ic2VydmVyID0gb2JzZXJ2ZXJzLm5leHQoKS52YWx1ZSkpIHtcbiAgICAgICAgdmFyIHVubWF0Y2hlZCA9IHJvb3QgIT09IG9ic2VydmVyLnJvb3QgfHxcbiAgICAgICAgICAgIHJvb3RNYXJnaW4gIT09IG9ic2VydmVyLnJvb3RNYXJnaW4gfHxcbiAgICAgICAgICAgIHNoYWxsb3dDb21wYXJlKHRocmVzaG9sZCwgb2JzZXJ2ZXIudGhyZXNob2xkcyk7XG4gICAgICAgIGlmICghdW5tYXRjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZE9ic2VydmVyRWxlbWVudChvYnNlcnZlciwgZW50cnkpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBvYnNlcnZlckVsZW1lbnRzTWFwLmdldChvYnNlcnZlcik7XG4gICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBlbGVtZW50cy52YWx1ZXMoKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICgoZWxlbWVudCA9IHZhbHVlcy5uZXh0KCkudmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC50YXJnZXQgPT09IGVudHJ5LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBUaGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyIEFQSSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBvbmUgZWxlbWVudFxuICog4oCTIG5hbWVseSB0aGUgdGFyZ2V0IOKAkyBpbnRlcnNlY3RzIGVpdGhlciB0aGUgZGV2aWNlIHZpZXdwb3J0IG9yIGEgc3BlY2lmaWVkIGVsZW1lbnQuXG4gKiBBbHNvIHdpbGwgZ2V0IGNhbGxlZCB3aGVuZXZlciB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgY2hhbmdlcyBhbmRcbiAqIGNyb3NzZXMgZGVzaXJlZCBhbW91bnRzIG9mIGludGVyc2VjdGlvbiB3aXRoIHRoZSByb290LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2soZW50cmllcywgb2JzZXJ2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBmaW5kT2JzZXJ2ZXJFbGVtZW50KG9ic2VydmVyLCBlbnRyaWVzW2ldKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgbGluZSAqL1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5oYW5kbGVDaGFuZ2UoZW50cmllc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIob3B0aW9ucykge1xuICAgIHZhciBwb29sZWQgPSBnZXRQb29sZWQob3B0aW9ucyk7XG4gICAgaWYgKHBvb2xlZCkge1xuICAgICAgICByZXR1cm4gcG9vbGVkO1xuICAgIH1cbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgIG9ic2VydmVyRWxlbWVudHNNYXAuc2V0KG9ic2VydmVyLCBuZXcgU2V0KCkpO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IG9ic2VydmVyRWxlbWVudHNNYXAuZ2V0KGVsZW1lbnQub2JzZXJ2ZXIpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQub2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LnRhcmdldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5vYnNlcnZlRWxlbWVudChlbGVtZW50LCB0YXJnZXQpIHtcbiAgICBpZiAob2JzZXJ2ZXJFbGVtZW50c01hcC5oYXMoZWxlbWVudC5vYnNlcnZlcikpIHtcbiAgICAgICAgdmFyIHRhcmdldHMgPSBvYnNlcnZlckVsZW1lbnRzTWFwLmdldChlbGVtZW50Lm9ic2VydmVyKTtcbiAgICAgICAgaWYgKHRhcmdldHMgPT09IG51bGwgfHwgdGFyZ2V0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGFyZ2V0cy5kZWxldGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5vYnNlcnZlci51bm9ic2VydmUodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyRWxlbWVudHNNYXAuZGVsZXRlKGVsZW1lbnQub2JzZXJ2ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmV4cG9ydHMudG9Kc29uID0gdG9Kc29uO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgX2F1dGggPSByZXF1aXJlKFwiLi9tZXRob2RzL2F1dGhcIik7XG5cbnZhciBfYXV0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRoKTtcblxudmFyIF9jdXJyZW50VXNlciA9IHJlcXVpcmUoXCIuL21ldGhvZHMvY3VycmVudFVzZXJcIik7XG5cbnZhciBfY3VycmVudFVzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3VycmVudFVzZXIpO1xuXG52YXIgX3VzZXJzID0gcmVxdWlyZShcIi4vbWV0aG9kcy91c2Vyc1wiKTtcblxudmFyIF91c2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2Vycyk7XG5cbnZhciBfcGhvdG9zID0gcmVxdWlyZShcIi4vbWV0aG9kcy9waG90b3NcIik7XG5cbnZhciBfcGhvdG9zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bob3Rvcyk7XG5cbnZhciBfY29sbGVjdGlvbnMgPSByZXF1aXJlKFwiLi9tZXRob2RzL2NvbGxlY3Rpb25zXCIpO1xuXG52YXIgX2NvbGxlY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbGxlY3Rpb25zKTtcblxudmFyIF9zZWFyY2ggPSByZXF1aXJlKFwiLi9tZXRob2RzL3NlYXJjaFwiKTtcblxudmFyIF9zZWFyY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VhcmNoKTtcblxudmFyIF9zdGF0cyA9IHJlcXVpcmUoXCIuL21ldGhvZHMvc3RhdHNcIik7XG5cbnZhciBfc3RhdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVW5zcGxhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFVuc3BsYXNoKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbnNwbGFzaCk7XG5cbiAgICB0aGlzLl9hcGlVcmwgPSBvcHRpb25zLmFwaVVybCB8fCBfY29uc3RhbnRzLkFQSV9VUkw7XG4gICAgdGhpcy5fYXBpVmVyc2lvbiA9IG9wdGlvbnMuYXBpVmVyc2lvbiB8fCBfY29uc3RhbnRzLkFQSV9WRVJTSU9OO1xuICAgIHRoaXMuX2FjY2Vzc0tleSA9IG9wdGlvbnMuYWNjZXNzS2V5O1xuICAgIHRoaXMuX3NlY3JldCA9IG9wdGlvbnMuc2VjcmV0O1xuICAgIHRoaXMuX2NhbGxiYWNrVXJsID0gb3B0aW9ucy5jYWxsYmFja1VybDtcbiAgICB0aGlzLl9iZWFyZXJUb2tlbiA9IG9wdGlvbnMuYmVhcmVyVG9rZW47XG4gICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDA7IC8vIDAgZGVmYXVsdHMgdG8gdGhlIE9TIHRpbWVvdXQgYmVoYXZpb3VyLlxuXG4gICAgdGhpcy5hdXRoID0gX2F1dGgyLmRlZmF1bHQuYmluZCh0aGlzKSgpO1xuICAgIHRoaXMuY3VycmVudFVzZXIgPSBfY3VycmVudFVzZXIyLmRlZmF1bHQuYmluZCh0aGlzKSgpO1xuICAgIHRoaXMudXNlcnMgPSBfdXNlcnMyLmRlZmF1bHQuYmluZCh0aGlzKSgpO1xuICAgIHRoaXMucGhvdG9zID0gX3Bob3RvczIuZGVmYXVsdC5iaW5kKHRoaXMpKCk7XG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IF9jb2xsZWN0aW9uczIuZGVmYXVsdC5iaW5kKHRoaXMpKCk7XG4gICAgdGhpcy5zZWFyY2ggPSBfc2VhcmNoMi5kZWZhdWx0LmJpbmQodGhpcykoKTtcbiAgICB0aGlzLnN0YXRzID0gX3N0YXRzMi5kZWZhdWx0LmJpbmQodGhpcykoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVbnNwbGFzaCwgW3tcbiAgICBrZXk6IFwicmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0KCkge1xuICAgICAgdmFyIHJlcXVlc3RPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgdmFyIF9idWlsZEZldGNoT3B0aW9ucyRiaSA9IF91dGlscy5idWlsZEZldGNoT3B0aW9ucy5iaW5kKHRoaXMpKHJlcXVlc3RPcHRpb25zKSxcbiAgICAgICAgICB1cmwgPSBfYnVpbGRGZXRjaE9wdGlvbnMkYmkudXJsLFxuICAgICAgICAgIG9wdGlvbnMgPSBfYnVpbGRGZXRjaE9wdGlvbnMkYmkub3B0aW9ucztcblxuICAgICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFVuc3BsYXNoO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBVbnNwbGFzaDtcbmZ1bmN0aW9uIHRvSnNvbihyZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXMuanNvbiA9PT0gXCJmdW5jdGlvblwiID8gcmVzLmpzb24oKSA6IHJlcztcbn0iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMSEuL2NvbnRyb2xzLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS01LTEhLi9tZXRhZGF0YS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNS0xIS4vY2FyZExpc3QuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtMSEuL2NhcmQuLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS01LTEhLi9pbmZvLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS01LTEhLi9wcmV2aWV3LmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wic2Nyb2xsTG9ja1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJzY3JvbGxMb2NrXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3Rvb2xzLmpzXG52YXIgYXJndW1lbnRBc0FycmF5ID0gZnVuY3Rpb24gYXJndW1lbnRBc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogW2FyZ3VtZW50XTtcbn07XG52YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gaXNFbGVtZW50KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgTm9kZTtcbn07XG52YXIgaXNFbGVtZW50TGlzdCA9IGZ1bmN0aW9uIGlzRWxlbWVudExpc3Qobm9kZUxpc3QpIHtcbiAgcmV0dXJuIG5vZGVMaXN0IGluc3RhbmNlb2YgTm9kZUxpc3Q7XG59O1xudmFyIGVhY2hOb2RlID0gZnVuY3Rpb24gZWFjaE5vZGUobm9kZUxpc3QsIGNhbGxiYWNrKSB7XG4gIGlmIChub2RlTGlzdCAmJiBjYWxsYmFjaykge1xuICAgIG5vZGVMaXN0ID0gaXNFbGVtZW50TGlzdChub2RlTGlzdCkgPyBub2RlTGlzdCA6IFtub2RlTGlzdF07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY2FsbGJhY2sobm9kZUxpc3RbaV0sIGksIG5vZGVMaXN0Lmxlbmd0aCkgPT09IHRydWUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xudmFyIHRocm93RXJyb3IgPSBmdW5jdGlvbiB0aHJvd0Vycm9yKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJbc2Nyb2xsLWxvY2tdIFwiLmNvbmNhdChtZXNzYWdlKSk7XG59O1xudmFyIGFycmF5QXNTZWxlY3RvciA9IGZ1bmN0aW9uIGFycmF5QXNTZWxlY3RvcihhcnJheSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBhcnJheS5qb2luKCcsICcpO1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxufTtcbnZhciBub2RlTGlzdEFzQXJyYXkgPSBmdW5jdGlvbiBub2RlTGlzdEFzQXJyYXkobm9kZUxpc3QpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIGVhY2hOb2RlKG5vZGVMaXN0LCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufTtcbnZhciBmaW5kUGFyZW50QnlTZWxlY3RvciA9IGZ1bmN0aW9uIGZpbmRQYXJlbnRCeVNlbGVjdG9yKCRlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIHNlbGYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gIHZhciAkcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZG9jdW1lbnQ7XG5cbiAgaWYgKHNlbGYgJiYgbm9kZUxpc3RBc0FycmF5KCRyb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKS5pbmRleE9mKCRlbCkgIT09IC0xKSB7XG4gICAgcmV0dXJuICRlbDtcbiAgfVxuXG4gIHdoaWxlICgoJGVsID0gJGVsLnBhcmVudEVsZW1lbnQpICYmIG5vZGVMaXN0QXNBcnJheSgkcm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkuaW5kZXhPZigkZWwpID09PSAtMSkge1xuICAgIDtcbiAgfVxuXG4gIHJldHVybiAkZWw7XG59O1xudmFyIGVsZW1lbnRIYXNTZWxlY3RvciA9IGZ1bmN0aW9uIGVsZW1lbnRIYXNTZWxlY3RvcigkZWwsIHNlbGVjdG9yKSB7XG4gIHZhciAkcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZG9jdW1lbnQ7XG4gIHZhciBoYXMgPSBub2RlTGlzdEFzQXJyYXkoJHJvb3QucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmluZGV4T2YoJGVsKSAhPT0gLTE7XG4gIHJldHVybiBoYXM7XG59O1xudmFyIGVsZW1lbnRIYXNPdmVyZmxvd0hpZGRlbiA9IGZ1bmN0aW9uIGVsZW1lbnRIYXNPdmVyZmxvd0hpZGRlbigkZWwpIHtcbiAgaWYgKCRlbCkge1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSgkZWwpO1xuICAgIHZhciBvdmVyZmxvd0lzSGlkZGVuID0gY29tcHV0ZWRTdHlsZS5vdmVyZmxvdyA9PT0gJ2hpZGRlbic7XG4gICAgcmV0dXJuIG92ZXJmbG93SXNIaWRkZW47XG4gIH1cbn07XG52YXIgZWxlbWVudFNjcm9sbFRvcE9uU3RhcnQgPSBmdW5jdGlvbiBlbGVtZW50U2Nyb2xsVG9wT25TdGFydCgkZWwpIHtcbiAgaWYgKCRlbCkge1xuICAgIGlmIChlbGVtZW50SGFzT3ZlcmZsb3dIaWRkZW4oJGVsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFRvcCA9ICRlbC5zY3JvbGxUb3A7XG4gICAgcmV0dXJuIHNjcm9sbFRvcCA8PSAwO1xuICB9XG59O1xudmFyIGVsZW1lbnRTY3JvbGxUb3BPbkVuZCA9IGZ1bmN0aW9uIGVsZW1lbnRTY3JvbGxUb3BPbkVuZCgkZWwpIHtcbiAgaWYgKCRlbCkge1xuICAgIGlmIChlbGVtZW50SGFzT3ZlcmZsb3dIaWRkZW4oJGVsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFRvcCA9ICRlbC5zY3JvbGxUb3A7XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9ICRlbC5zY3JvbGxIZWlnaHQ7XG4gICAgdmFyIHNjcm9sbFRvcFdpdGhIZWlnaHQgPSBzY3JvbGxUb3AgKyAkZWwub2Zmc2V0SGVpZ2h0O1xuICAgIHJldHVybiBzY3JvbGxUb3BXaXRoSGVpZ2h0ID49IHNjcm9sbEhlaWdodDtcbiAgfVxufTtcbnZhciBlbGVtZW50U2Nyb2xsTGVmdE9uU3RhcnQgPSBmdW5jdGlvbiBlbGVtZW50U2Nyb2xsTGVmdE9uU3RhcnQoJGVsKSB7XG4gIGlmICgkZWwpIHtcbiAgICBpZiAoZWxlbWVudEhhc092ZXJmbG93SGlkZGVuKCRlbCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxMZWZ0ID0gJGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHNjcm9sbExlZnQgPD0gMDtcbiAgfVxufTtcbnZhciBlbGVtZW50U2Nyb2xsTGVmdE9uRW5kID0gZnVuY3Rpb24gZWxlbWVudFNjcm9sbExlZnRPbkVuZCgkZWwpIHtcbiAgaWYgKCRlbCkge1xuICAgIGlmIChlbGVtZW50SGFzT3ZlcmZsb3dIaWRkZW4oJGVsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbExlZnQgPSAkZWwuc2Nyb2xsTGVmdDtcbiAgICB2YXIgc2Nyb2xsV2lkdGggPSAkZWwuc2Nyb2xsV2lkdGg7XG4gICAgdmFyIHNjcm9sbExlZnRXaXRoV2lkdGggPSBzY3JvbGxMZWZ0ICsgJGVsLm9mZnNldFdpZHRoO1xuICAgIHJldHVybiBzY3JvbGxMZWZ0V2l0aFdpZHRoID49IHNjcm9sbFdpZHRoO1xuICB9XG59O1xudmFyIGVsZW1lbnRJc1Njcm9sbGFibGVGaWVsZCA9IGZ1bmN0aW9uIGVsZW1lbnRJc1Njcm9sbGFibGVGaWVsZCgkZWwpIHtcbiAgdmFyIHNlbGVjdG9yID0gJ3RleHRhcmVhLCBbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSc7XG4gIHJldHVybiBlbGVtZW50SGFzU2VsZWN0b3IoJGVsLCBzZWxlY3Rvcik7XG59O1xudmFyIGVsZW1lbnRJc0lucHV0UmFuZ2UgPSBmdW5jdGlvbiBlbGVtZW50SXNJbnB1dFJhbmdlKCRlbCkge1xuICB2YXIgc2VsZWN0b3IgPSAnaW5wdXRbdHlwZT1cInJhbmdlXCJdJztcbiAgcmV0dXJuIGVsZW1lbnRIYXNTZWxlY3RvcigkZWwsIHNlbGVjdG9yKTtcbn07XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JvbGwtbG9jay5qc1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRpc2FibGVQYWdlU2Nyb2xsXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZGlzYWJsZVBhZ2VTY3JvbGw7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImVuYWJsZVBhZ2VTY3JvbGxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBlbmFibGVQYWdlU2Nyb2xsOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJnZXRTY3JvbGxTdGF0ZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGdldFNjcm9sbFN0YXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJjbGVhclF1ZXVlU2Nyb2xsTG9ja3NcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjbGVhclF1ZXVlU2Nyb2xsTG9ja3M7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdldFRhcmdldFNjcm9sbEJhcldpZHRoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGg7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX2dldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZ2V0UGFnZVNjcm9sbEJhcldpZHRoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2V0UGFnZVNjcm9sbEJhcldpZHRoOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJnZXRDdXJyZW50UGFnZVNjcm9sbEJhcldpZHRoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2V0Q3VycmVudFBhZ2VTY3JvbGxCYXJXaWR0aDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYWRkU2Nyb2xsYWJsZVRhcmdldFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX2FkZFNjcm9sbGFibGVUYXJnZXQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcInJlbW92ZVNjcm9sbGFibGVUYXJnZXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzY3JvbGxfbG9ja19yZW1vdmVTY3JvbGxhYmxlVGFyZ2V0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhZGRTY3JvbGxhYmxlU2VsZWN0b3JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlU2VsZWN0b3I7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcInJlbW92ZVNjcm9sbGFibGVTZWxlY3RvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX3JlbW92ZVNjcm9sbGFibGVTZWxlY3RvcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYWRkTG9ja2FibGVUYXJnZXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzY3JvbGxfbG9ja19hZGRMb2NrYWJsZVRhcmdldDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYWRkTG9ja2FibGVTZWxlY3RvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX2FkZExvY2thYmxlU2VsZWN0b3I7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcInNldEZpbGxHYXBNZXRob2RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzY3JvbGxfbG9ja19zZXRGaWxsR2FwTWV0aG9kOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhZGRGaWxsR2FwVGFyZ2V0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFRhcmdldDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwicmVtb3ZlRmlsbEdhcFRhcmdldFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX3JlbW92ZUZpbGxHYXBUYXJnZXQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFkZEZpbGxHYXBTZWxlY3RvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNjcm9sbF9sb2NrX2FkZEZpbGxHYXBTZWxlY3RvcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwicmVtb3ZlRmlsbEdhcFNlbGVjdG9yXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2Nyb2xsX2xvY2tfcmVtb3ZlRmlsbEdhcFNlbGVjdG9yOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJyZWZpbGxHYXBzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcmVmaWxsR2FwczsgfSk7XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cblxudmFyIEZJTExfR0FQX0FWQUlMQUJMRV9NRVRIT0RTID0gWydwYWRkaW5nJywgJ21hcmdpbicsICd3aWR0aCcsICdtYXgtd2lkdGgnLCAnbm9uZSddO1xudmFyIFRPVUNIX0RJUkVDVElPTl9ERVRFQ1RfT0ZGU0VUID0gMztcbnZhciBzdGF0ZSA9IHtcbiAgc2Nyb2xsOiB0cnVlLFxuICBxdWV1ZTogMCxcbiAgc2Nyb2xsYWJsZVNlbGVjdG9yczogWydbZGF0YS1zY3JvbGwtbG9jay1zY3JvbGxhYmxlXSddLFxuICBsb2NrYWJsZVNlbGVjdG9yczogWydib2R5JywgJ1tkYXRhLXNjcm9sbC1sb2NrLWxvY2thYmxlXSddLFxuICBmaWxsR2FwU2VsZWN0b3JzOiBbJ2JvZHknLCAnW2RhdGEtc2Nyb2xsLWxvY2stZmlsbC1nYXBdJywgJ1tkYXRhLXNjcm9sbC1sb2NrLWxvY2thYmxlXSddLFxuICBmaWxsR2FwTWV0aG9kOiBGSUxMX0dBUF9BVkFJTEFCTEVfTUVUSE9EU1swXSxcbiAgLy9cbiAgc3RhcnRUb3VjaFk6IDAsXG4gIHN0YXJ0VG91Y2hYOiAwXG59O1xudmFyIGRpc2FibGVQYWdlU2Nyb2xsID0gZnVuY3Rpb24gZGlzYWJsZVBhZ2VTY3JvbGwodGFyZ2V0KSB7XG4gIGlmIChzdGF0ZS5xdWV1ZSA8PSAwKSB7XG4gICAgc3RhdGUuc2Nyb2xsID0gZmFsc2U7XG4gICAgc2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3coKTtcbiAgICBmaWxsR2FwcygpO1xuICB9XG5cbiAgc2Nyb2xsX2xvY2tfYWRkU2Nyb2xsYWJsZVRhcmdldCh0YXJnZXQpO1xuICBzdGF0ZS5xdWV1ZSsrO1xufTtcbnZhciBlbmFibGVQYWdlU2Nyb2xsID0gZnVuY3Rpb24gZW5hYmxlUGFnZVNjcm9sbCh0YXJnZXQpIHtcbiAgc3RhdGUucXVldWUgPiAwICYmIHN0YXRlLnF1ZXVlLS07XG5cbiAgaWYgKHN0YXRlLnF1ZXVlIDw9IDApIHtcbiAgICBzdGF0ZS5zY3JvbGwgPSB0cnVlO1xuICAgIHNjcm9sbF9sb2NrX3Nob3dMb2NrYWJsZU92ZXJmbG93KCk7XG4gICAgdW5maWxsR2FwcygpO1xuICB9XG5cbiAgc2Nyb2xsX2xvY2tfcmVtb3ZlU2Nyb2xsYWJsZVRhcmdldCh0YXJnZXQpO1xufTtcbnZhciBnZXRTY3JvbGxTdGF0ZSA9IGZ1bmN0aW9uIGdldFNjcm9sbFN0YXRlKCkge1xuICByZXR1cm4gc3RhdGUuc2Nyb2xsO1xufTtcbnZhciBjbGVhclF1ZXVlU2Nyb2xsTG9ja3MgPSBmdW5jdGlvbiBjbGVhclF1ZXVlU2Nyb2xsTG9ja3MoKSB7XG4gIHN0YXRlLnF1ZXVlID0gMDtcbn07XG52YXIgc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGggPSBmdW5jdGlvbiBnZXRUYXJnZXRTY3JvbGxCYXJXaWR0aCgkdGFyZ2V0KSB7XG4gIHZhciBvbmx5RXhpc3RzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICBpZiAoaXNFbGVtZW50KCR0YXJnZXQpKSB7XG4gICAgdmFyIGN1cnJlbnRPdmVyZmxvd1lQcm9wZXJ0eSA9ICR0YXJnZXQuc3R5bGUub3ZlcmZsb3dZO1xuXG4gICAgaWYgKG9ubHlFeGlzdHMpIHtcbiAgICAgIGlmICghZ2V0U2Nyb2xsU3RhdGUoKSkge1xuICAgICAgICAkdGFyZ2V0LnN0eWxlLm92ZXJmbG93WSA9ICR0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNhdmVkLW92ZXJmbG93LXktcHJvcGVydHknKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJHRhcmdldC5zdHlsZS5vdmVyZmxvd1kgPSAnc2Nyb2xsJztcbiAgICB9XG5cbiAgICB2YXIgd2lkdGggPSBzY3JvbGxfbG9ja19nZXRDdXJyZW50VGFyZ2V0U2Nyb2xsQmFyV2lkdGgoJHRhcmdldCk7XG4gICAgJHRhcmdldC5zdHlsZS5vdmVyZmxvd1kgPSBjdXJyZW50T3ZlcmZsb3dZUHJvcGVydHk7XG4gICAgcmV0dXJuIHdpZHRoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xudmFyIHNjcm9sbF9sb2NrX2dldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aCgkdGFyZ2V0KSB7XG4gIGlmIChpc0VsZW1lbnQoJHRhcmdldCkpIHtcbiAgICBpZiAoJHRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgdmFyIGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHZhciBjdXJyZW50V2lkdGggPSB3aW5kb3dXaWR0aCAtIGRvY3VtZW50V2lkdGg7XG4gICAgICByZXR1cm4gY3VycmVudFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYm9yZGVyTGVmdFdpZHRoQ3VycmVudFByb3BlcnR5ID0gJHRhcmdldC5zdHlsZS5ib3JkZXJMZWZ0V2lkdGg7XG4gICAgICB2YXIgYm9yZGVyUmlnaHRXaWR0aEN1cnJlbnRQcm9wZXJ0eSA9ICR0YXJnZXQuc3R5bGUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgICAgICR0YXJnZXQuc3R5bGUuYm9yZGVyTGVmdFdpZHRoID0gJzBweCc7XG4gICAgICAkdGFyZ2V0LnN0eWxlLmJvcmRlclJpZ2h0V2lkdGggPSAnMHB4JztcblxuICAgICAgdmFyIF9jdXJyZW50V2lkdGggPSAkdGFyZ2V0Lm9mZnNldFdpZHRoIC0gJHRhcmdldC5jbGllbnRXaWR0aDtcblxuICAgICAgJHRhcmdldC5zdHlsZS5ib3JkZXJMZWZ0V2lkdGggPSBib3JkZXJMZWZ0V2lkdGhDdXJyZW50UHJvcGVydHk7XG4gICAgICAkdGFyZ2V0LnN0eWxlLmJvcmRlclJpZ2h0V2lkdGggPSBib3JkZXJSaWdodFdpZHRoQ3VycmVudFByb3BlcnR5O1xuICAgICAgcmV0dXJuIF9jdXJyZW50V2lkdGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xudmFyIGdldFBhZ2VTY3JvbGxCYXJXaWR0aCA9IGZ1bmN0aW9uIGdldFBhZ2VTY3JvbGxCYXJXaWR0aCgpIHtcbiAgdmFyIG9ubHlFeGlzdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICByZXR1cm4gc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGgoZG9jdW1lbnQuYm9keSwgb25seUV4aXN0cyk7XG59O1xudmFyIGdldEN1cnJlbnRQYWdlU2Nyb2xsQmFyV2lkdGggPSBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZVNjcm9sbEJhcldpZHRoKCkge1xuICByZXR1cm4gc2Nyb2xsX2xvY2tfZ2V0Q3VycmVudFRhcmdldFNjcm9sbEJhcldpZHRoKGRvY3VtZW50LmJvZHkpO1xufTtcbnZhciBzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlVGFyZ2V0ID0gZnVuY3Rpb24gYWRkU2Nyb2xsYWJsZVRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCkge1xuICAgIHZhciB0YXJnZXRzID0gYXJndW1lbnRBc0FycmF5KHRhcmdldCk7XG4gICAgdGFyZ2V0cy5tYXAoZnVuY3Rpb24gKCR0YXJnZXRzKSB7XG4gICAgICBlYWNoTm9kZSgkdGFyZ2V0cywgZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudCgkdGFyZ2V0KSkge1xuICAgICAgICAgICR0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNjcm9sbGFibGUnLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihcIlxcXCJcIi5jb25jYXQoJHRhcmdldCwgXCJcXFwiIGlzIG5vdCBhIEVsZW1lbnQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgc2Nyb2xsX2xvY2tfcmVtb3ZlU2Nyb2xsYWJsZVRhcmdldCA9IGZ1bmN0aW9uIHJlbW92ZVNjcm9sbGFibGVUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdGFyZ2V0cyA9IGFyZ3VtZW50QXNBcnJheSh0YXJnZXQpO1xuICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uICgkdGFyZ2V0cykge1xuICAgICAgZWFjaE5vZGUoJHRhcmdldHMsIGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgICAgIGlmIChpc0VsZW1lbnQoJHRhcmdldCkpIHtcbiAgICAgICAgICAkdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtbG9jay1zY3JvbGxhYmxlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihcIlxcXCJcIi5jb25jYXQoJHRhcmdldCwgXCJcXFwiIGlzIG5vdCBhIEVsZW1lbnQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgc2Nyb2xsX2xvY2tfYWRkU2Nyb2xsYWJsZVNlbGVjdG9yID0gZnVuY3Rpb24gYWRkU2Nyb2xsYWJsZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHZhciBzZWxlY3RvcnMgPSBhcmd1bWVudEFzQXJyYXkoc2VsZWN0b3IpO1xuICAgIHNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBzdGF0ZS5zY3JvbGxhYmxlU2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgIH0pO1xuICB9XG59O1xudmFyIHNjcm9sbF9sb2NrX3JlbW92ZVNjcm9sbGFibGVTZWxlY3RvciA9IGZ1bmN0aW9uIHJlbW92ZVNjcm9sbGFibGVTZWxlY3RvcihzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IpIHtcbiAgICB2YXIgc2VsZWN0b3JzID0gYXJndW1lbnRBc0FycmF5KHNlbGVjdG9yKTtcbiAgICBzZWxlY3RvcnMubWFwKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgc3RhdGUuc2Nyb2xsYWJsZVNlbGVjdG9ycyA9IHN0YXRlLnNjcm9sbGFibGVTZWxlY3RvcnMuZmlsdGVyKGZ1bmN0aW9uIChzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHNTZWxlY3RvciAhPT0gc2VsZWN0b3I7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBzY3JvbGxfbG9ja19hZGRMb2NrYWJsZVRhcmdldCA9IGZ1bmN0aW9uIGFkZExvY2thYmxlVGFyZ2V0KHRhcmdldCkge1xuICBpZiAodGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldHMgPSBhcmd1bWVudEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoJHRhcmdldHMpIHtcbiAgICAgIGVhY2hOb2RlKCR0YXJnZXRzLCBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgICAgICBpZiAoaXNFbGVtZW50KCR0YXJnZXQpKSB7XG4gICAgICAgICAgJHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stbG9ja2FibGUnLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihcIlxcXCJcIi5jb25jYXQoJHRhcmdldCwgXCJcXFwiIGlzIG5vdCBhIEVsZW1lbnQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIWdldFNjcm9sbFN0YXRlKCkpIHtcbiAgICAgIHNjcm9sbF9sb2NrX2hpZGVMb2NrYWJsZU92ZXJmbG93KCk7XG4gICAgfVxuICB9XG59O1xudmFyIHNjcm9sbF9sb2NrX2FkZExvY2thYmxlU2VsZWN0b3IgPSBmdW5jdGlvbiBhZGRMb2NrYWJsZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHZhciBzZWxlY3RvcnMgPSBhcmd1bWVudEFzQXJyYXkoc2VsZWN0b3IpO1xuICAgIHNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBzdGF0ZS5sb2NrYWJsZVNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcbiAgICB9KTtcblxuICAgIGlmICghZ2V0U2Nyb2xsU3RhdGUoKSkge1xuICAgICAgc2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICBzY3JvbGxfbG9ja19hZGRGaWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9XG59O1xudmFyIHNjcm9sbF9sb2NrX3NldEZpbGxHYXBNZXRob2QgPSBmdW5jdGlvbiBzZXRGaWxsR2FwTWV0aG9kKG1ldGhvZCkge1xuICBpZiAobWV0aG9kKSB7XG4gICAgaWYgKEZJTExfR0FQX0FWQUlMQUJMRV9NRVRIT0RTLmluZGV4T2YobWV0aG9kKSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLmZpbGxHYXBNZXRob2QgPSBtZXRob2Q7XG4gICAgICByZWZpbGxHYXBzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtZXRob2RzID0gRklMTF9HQVBfQVZBSUxBQkxFX01FVEhPRFMuam9pbignLCAnKTtcbiAgICAgIHRocm93RXJyb3IoXCJcXFwiXCIuY29uY2F0KG1ldGhvZCwgXCJcXFwiIG1ldGhvZCBpcyBub3QgYXZhaWxhYmxlIVxcbkF2YWlsYWJsZSBmaWxsIGdhcCBtZXRob2RzOiBcIikuY29uY2F0KG1ldGhvZHMsIFwiLlwiKSk7XG4gICAgfVxuICB9XG59O1xudmFyIHNjcm9sbF9sb2NrX2FkZEZpbGxHYXBUYXJnZXQgPSBmdW5jdGlvbiBhZGRGaWxsR2FwVGFyZ2V0KHRhcmdldCkge1xuICBpZiAodGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldHMgPSBhcmd1bWVudEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoJHRhcmdldHMpIHtcbiAgICAgIGVhY2hOb2RlKCR0YXJnZXRzLCBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgICAgICBpZiAoaXNFbGVtZW50KCR0YXJnZXQpKSB7XG4gICAgICAgICAgJHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stZmlsbC1nYXAnLCAnJyk7XG5cbiAgICAgICAgICBpZiAoIXN0YXRlLnNjcm9sbCkge1xuICAgICAgICAgICAgc2Nyb2xsX2xvY2tfZmlsbEdhcFRhcmdldCgkdGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihcIlxcXCJcIi5jb25jYXQoJHRhcmdldCwgXCJcXFwiIGlzIG5vdCBhIEVsZW1lbnQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgc2Nyb2xsX2xvY2tfcmVtb3ZlRmlsbEdhcFRhcmdldCA9IGZ1bmN0aW9uIHJlbW92ZUZpbGxHYXBUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdGFyZ2V0cyA9IGFyZ3VtZW50QXNBcnJheSh0YXJnZXQpO1xuICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uICgkdGFyZ2V0cykge1xuICAgICAgZWFjaE5vZGUoJHRhcmdldHMsIGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgICAgIGlmIChpc0VsZW1lbnQoJHRhcmdldCkpIHtcbiAgICAgICAgICAkdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtbG9jay1maWxsLWdhcCcpO1xuXG4gICAgICAgICAgaWYgKCFzdGF0ZS5zY3JvbGwpIHtcbiAgICAgICAgICAgIHNjcm9sbF9sb2NrX3VuZmlsbEdhcFRhcmdldCgkdGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihcIlxcXCJcIi5jb25jYXQoJHRhcmdldCwgXCJcXFwiIGlzIG5vdCBhIEVsZW1lbnQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFNlbGVjdG9yID0gZnVuY3Rpb24gYWRkRmlsbEdhcFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHZhciBzZWxlY3RvcnMgPSBhcmd1bWVudEFzQXJyYXkoc2VsZWN0b3IpO1xuICAgIHNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc3RhdGUuZmlsbEdhcFNlbGVjdG9ycy5pbmRleE9mKHNlbGVjdG9yKSA9PT0gLTEpIHtcbiAgICAgICAgc3RhdGUuZmlsbEdhcFNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAoIXN0YXRlLnNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbF9sb2NrX2ZpbGxHYXBTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbnZhciBzY3JvbGxfbG9ja19yZW1vdmVGaWxsR2FwU2VsZWN0b3IgPSBmdW5jdGlvbiByZW1vdmVGaWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgaWYgKHNlbGVjdG9yKSB7XG4gICAgdmFyIHNlbGVjdG9ycyA9IGFyZ3VtZW50QXNBcnJheShzZWxlY3Rvcik7XG4gICAgc2VsZWN0b3JzLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIHN0YXRlLmZpbGxHYXBTZWxlY3RvcnMgPSBzdGF0ZS5maWxsR2FwU2VsZWN0b3JzLmZpbHRlcihmdW5jdGlvbiAoZlNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmU2VsZWN0b3IgIT09IHNlbGVjdG9yO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghc3RhdGUuc2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbF9sb2NrX3VuZmlsbEdhcFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbnZhciByZWZpbGxHYXBzID0gZnVuY3Rpb24gcmVmaWxsR2FwcygpIHtcbiAgaWYgKCFzdGF0ZS5zY3JvbGwpIHtcbiAgICBmaWxsR2FwcygpO1xuICB9XG59O1xuXG52YXIgc2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3cgPSBmdW5jdGlvbiBoaWRlTG9ja2FibGVPdmVyZmxvdygpIHtcbiAgdmFyIHNlbGVjdG9yID0gYXJyYXlBc1NlbGVjdG9yKHN0YXRlLmxvY2thYmxlU2VsZWN0b3JzKTtcbiAgc2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3dTZWxlY3RvcihzZWxlY3Rvcik7XG59O1xuXG52YXIgc2Nyb2xsX2xvY2tfc2hvd0xvY2thYmxlT3ZlcmZsb3cgPSBmdW5jdGlvbiBzaG93TG9ja2FibGVPdmVyZmxvdygpIHtcbiAgdmFyIHNlbGVjdG9yID0gYXJyYXlBc1NlbGVjdG9yKHN0YXRlLmxvY2thYmxlU2VsZWN0b3JzKTtcbiAgc2Nyb2xsX2xvY2tfc2hvd0xvY2thYmxlT3ZlcmZsb3dTZWxlY3RvcihzZWxlY3Rvcik7XG59O1xuXG52YXIgc2Nyb2xsX2xvY2tfaGlkZUxvY2thYmxlT3ZlcmZsb3dTZWxlY3RvciA9IGZ1bmN0aW9uIGhpZGVMb2NrYWJsZU92ZXJmbG93U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgdmFyICR0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIGVhY2hOb2RlKCR0YXJnZXRzLCBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgIHNjcm9sbF9sb2NrX2hpZGVMb2NrYWJsZU92ZXJmbG93VGFyZ2V0KCR0YXJnZXQpO1xuICB9KTtcbn07XG5cbnZhciBzY3JvbGxfbG9ja19zaG93TG9ja2FibGVPdmVyZmxvd1NlbGVjdG9yID0gZnVuY3Rpb24gc2hvd0xvY2thYmxlT3ZlcmZsb3dTZWxlY3RvcihzZWxlY3Rvcikge1xuICB2YXIgJHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgZWFjaE5vZGUoJHRhcmdldHMsIGZ1bmN0aW9uICgkdGFyZ2V0KSB7XG4gICAgc2Nyb2xsX2xvY2tfc2hvd0xvY2thYmxlT3ZlcmZsb3dUYXJnZXQoJHRhcmdldCk7XG4gIH0pO1xufTtcblxudmFyIHNjcm9sbF9sb2NrX2hpZGVMb2NrYWJsZU92ZXJmbG93VGFyZ2V0ID0gZnVuY3Rpb24gaGlkZUxvY2thYmxlT3ZlcmZsb3dUYXJnZXQoJHRhcmdldCkge1xuICBpZiAoaXNFbGVtZW50KCR0YXJnZXQpICYmICR0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWxvY2tlZCcpICE9PSAndHJ1ZScpIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCR0YXJnZXQpO1xuICAgICR0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNhdmVkLW92ZXJmbG93LXktcHJvcGVydHknLCBjb21wdXRlZFN0eWxlLm92ZXJmbG93WSk7XG4gICAgJHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stc2F2ZWQtaW5saW5lLW92ZXJmbG93LXByb3BlcnR5JywgJHRhcmdldC5zdHlsZS5vdmVyZmxvdyk7XG4gICAgJHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stc2F2ZWQtaW5saW5lLW92ZXJmbG93LXktcHJvcGVydHknLCAkdGFyZ2V0LnN0eWxlLm92ZXJmbG93WSk7XG4gICAgJHRhcmdldC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICR0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWxvY2tlZCcsICd0cnVlJyk7XG4gIH1cbn07XG5cbnZhciBzY3JvbGxfbG9ja19zaG93TG9ja2FibGVPdmVyZmxvd1RhcmdldCA9IGZ1bmN0aW9uIHNob3dMb2NrYWJsZU92ZXJmbG93VGFyZ2V0KCR0YXJnZXQpIHtcbiAgaWYgKGlzRWxlbWVudCgkdGFyZ2V0KSAmJiAkdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtbG9jay1sb2NrZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgJHRhcmdldC5zdHlsZS5vdmVyZmxvdyA9ICR0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNhdmVkLWlubGluZS1vdmVyZmxvdy1wcm9wZXJ0eScpO1xuICAgICR0YXJnZXQuc3R5bGUub3ZlcmZsb3dZID0gJHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stc2F2ZWQtaW5saW5lLW92ZXJmbG93LXktcHJvcGVydHknKTtcbiAgICAkdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtbG9jay1zYXZlZC1vdmVyZmxvdy1wcm9wZXJ0eScpO1xuICAgICR0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNhdmVkLWlubGluZS1vdmVyZmxvdy1wcm9wZXJ0eScpO1xuICAgICR0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLXNhdmVkLWlubGluZS1vdmVyZmxvdy15LXByb3BlcnR5Jyk7XG4gICAgJHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stbG9ja2VkJyk7XG4gIH1cbn07XG5cbnZhciBmaWxsR2FwcyA9IGZ1bmN0aW9uIGZpbGxHYXBzKCkge1xuICBzdGF0ZS5maWxsR2FwU2VsZWN0b3JzLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICBzY3JvbGxfbG9ja19maWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9KTtcbn07XG5cbnZhciB1bmZpbGxHYXBzID0gZnVuY3Rpb24gdW5maWxsR2FwcygpIHtcbiAgc3RhdGUuZmlsbEdhcFNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgc2Nyb2xsX2xvY2tfdW5maWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9KTtcbn07XG5cbnZhciBzY3JvbGxfbG9ja19maWxsR2FwU2VsZWN0b3IgPSBmdW5jdGlvbiBmaWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgdmFyICR0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIHZhciBpc0xvY2thYmxlID0gc3RhdGUubG9ja2FibGVTZWxlY3RvcnMuaW5kZXhPZihzZWxlY3RvcikgIT09IC0xO1xuICBlYWNoTm9kZSgkdGFyZ2V0cywgZnVuY3Rpb24gKCR0YXJnZXQpIHtcbiAgICBzY3JvbGxfbG9ja19maWxsR2FwVGFyZ2V0KCR0YXJnZXQsIGlzTG9ja2FibGUpO1xuICB9KTtcbn07XG5cbnZhciBzY3JvbGxfbG9ja19maWxsR2FwVGFyZ2V0ID0gZnVuY3Rpb24gZmlsbEdhcFRhcmdldCgkdGFyZ2V0KSB7XG4gIHZhciBpc0xvY2thYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICBpZiAoaXNFbGVtZW50KCR0YXJnZXQpKSB7XG4gICAgdmFyIHNjcm9sbEJhcldpZHRoO1xuXG4gICAgaWYgKCR0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWxvY2thYmxlJykgPT09ICcnIHx8IGlzTG9ja2FibGUpIHtcbiAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGgoJHRhcmdldCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciAkbG9ja2FibGVQYXJlbnQgPSBmaW5kUGFyZW50QnlTZWxlY3RvcigkdGFyZ2V0LCBhcnJheUFzU2VsZWN0b3Ioc3RhdGUubG9ja2FibGVTZWxlY3RvcnMpKTtcbiAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGgoJGxvY2thYmxlUGFyZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoJHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stZmlsbGVkLWdhcCcpID09PSAndHJ1ZScpIHtcbiAgICAgIHNjcm9sbF9sb2NrX3VuZmlsbEdhcFRhcmdldCgkdGFyZ2V0KTtcbiAgICB9XG5cbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCR0YXJnZXQpO1xuICAgICR0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWZpbGxlZC1nYXAnLCAndHJ1ZScpO1xuICAgICR0YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWN1cnJlbnQtZmlsbC1nYXAtbWV0aG9kJywgc3RhdGUuZmlsbEdhcE1ldGhvZCk7XG5cbiAgICBpZiAoc3RhdGUuZmlsbEdhcE1ldGhvZCA9PT0gJ21hcmdpbicpIHtcbiAgICAgIHZhciBjdXJyZW50TWFyZ2luID0gcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0KTtcbiAgICAgICR0YXJnZXQuc3R5bGUubWFyZ2luUmlnaHQgPSBcIlwiLmNvbmNhdChjdXJyZW50TWFyZ2luICsgc2Nyb2xsQmFyV2lkdGgsIFwicHhcIik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5maWxsR2FwTWV0aG9kID09PSAnd2lkdGgnKSB7XG4gICAgICAkdGFyZ2V0LnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgLSBcIi5jb25jYXQoc2Nyb2xsQmFyV2lkdGgsIFwicHgpXCIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuZmlsbEdhcE1ldGhvZCA9PT0gJ21heC13aWR0aCcpIHtcbiAgICAgICR0YXJnZXQuc3R5bGUubWF4V2lkdGggPSBcImNhbGMoMTAwJSAtIFwiLmNvbmNhdChzY3JvbGxCYXJXaWR0aCwgXCJweClcIik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5maWxsR2FwTWV0aG9kID09PSAncGFkZGluZycpIHtcbiAgICAgIHZhciBjdXJyZW50UGFkZGluZyA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgJHRhcmdldC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChjdXJyZW50UGFkZGluZyArIHNjcm9sbEJhcldpZHRoLCBcInB4XCIpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHNjcm9sbF9sb2NrX3VuZmlsbEdhcFNlbGVjdG9yID0gZnVuY3Rpb24gdW5maWxsR2FwU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgdmFyICR0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIGVhY2hOb2RlKCR0YXJnZXRzLCBmdW5jdGlvbiAoJHRhcmdldCkge1xuICAgIHNjcm9sbF9sb2NrX3VuZmlsbEdhcFRhcmdldCgkdGFyZ2V0KTtcbiAgfSk7XG59O1xuXG52YXIgc2Nyb2xsX2xvY2tfdW5maWxsR2FwVGFyZ2V0ID0gZnVuY3Rpb24gdW5maWxsR2FwVGFyZ2V0KCR0YXJnZXQpIHtcbiAgaWYgKGlzRWxlbWVudCgkdGFyZ2V0KSkge1xuICAgIGlmICgkdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtbG9jay1maWxsZWQtZ2FwJykgPT09ICd0cnVlJykge1xuICAgICAgdmFyIGN1cnJlbnRGaWxsR2FwTWV0aG9kID0gJHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWxvY2stY3VycmVudC1maWxsLWdhcC1tZXRob2QnKTtcbiAgICAgICR0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWZpbGxlZC1nYXAnKTtcbiAgICAgICR0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjcm9sbC1sb2NrLWN1cnJlbnQtZmlsbC1nYXAtbWV0aG9kJyk7XG5cbiAgICAgIGlmIChjdXJyZW50RmlsbEdhcE1ldGhvZCA9PT0gJ21hcmdpbicpIHtcbiAgICAgICAgJHRhcmdldC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiXCI7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRGaWxsR2FwTWV0aG9kID09PSAnd2lkdGgnKSB7XG4gICAgICAgICR0YXJnZXQuc3R5bGUud2lkdGggPSBcIlwiO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50RmlsbEdhcE1ldGhvZCA9PT0gJ21heC13aWR0aCcpIHtcbiAgICAgICAgJHRhcmdldC5zdHlsZS5tYXhXaWR0aCA9IFwiXCI7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRGaWxsR2FwTWV0aG9kID09PSAncGFkZGluZycpIHtcbiAgICAgICAgJHRhcmdldC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIG9uUmVzaXplID0gZnVuY3Rpb24gb25SZXNpemUoZSkge1xuICByZWZpbGxHYXBzKCk7XG59O1xuXG52YXIgb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgaWYgKCFzdGF0ZS5zY3JvbGwpIHtcbiAgICBzdGF0ZS5zdGFydFRvdWNoWSA9IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIHN0YXRlLnN0YXJ0VG91Y2hYID0gZS50b3VjaGVzWzBdLmNsaWVudFg7XG4gIH1cbn07XG5cbnZhciBzY3JvbGxfbG9ja19vblRvdWNoTW92ZSA9IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgaWYgKCFzdGF0ZS5zY3JvbGwpIHtcbiAgICB2YXIgc3RhcnRUb3VjaFkgPSBzdGF0ZS5zdGFydFRvdWNoWSxcbiAgICAgICAgc3RhcnRUb3VjaFggPSBzdGF0ZS5zdGFydFRvdWNoWDtcbiAgICB2YXIgY3VycmVudENsaWVudFkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB2YXIgY3VycmVudENsaWVudFggPSBlLnRvdWNoZXNbMF0uY2xpZW50WDtcblxuICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIHNlbGVjdG9yID0gYXJyYXlBc1NlbGVjdG9yKHN0YXRlLnNjcm9sbGFibGVTZWxlY3RvcnMpO1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHtcbiAgICAgICAgdXA6IHN0YXJ0VG91Y2hZIDwgY3VycmVudENsaWVudFksXG4gICAgICAgIGRvd246IHN0YXJ0VG91Y2hZID4gY3VycmVudENsaWVudFksXG4gICAgICAgIGxlZnQ6IHN0YXJ0VG91Y2hYIDwgY3VycmVudENsaWVudFgsXG4gICAgICAgIHJpZ2h0OiBzdGFydFRvdWNoWCA+IGN1cnJlbnRDbGllbnRYXG4gICAgICB9O1xuICAgICAgdmFyIGRpcmVjdGlvbldpdGhPZmZzZXQgPSB7XG4gICAgICAgIHVwOiBzdGFydFRvdWNoWSArIFRPVUNIX0RJUkVDVElPTl9ERVRFQ1RfT0ZGU0VUIDwgY3VycmVudENsaWVudFksXG4gICAgICAgIGRvd246IHN0YXJ0VG91Y2hZIC0gVE9VQ0hfRElSRUNUSU9OX0RFVEVDVF9PRkZTRVQgPiBjdXJyZW50Q2xpZW50WSxcbiAgICAgICAgbGVmdDogc3RhcnRUb3VjaFggKyBUT1VDSF9ESVJFQ1RJT05fREVURUNUX09GRlNFVCA8IGN1cnJlbnRDbGllbnRYLFxuICAgICAgICByaWdodDogc3RhcnRUb3VjaFggLSBUT1VDSF9ESVJFQ1RJT05fREVURUNUX09GRlNFVCA+IGN1cnJlbnRDbGllbnRYXG4gICAgICB9O1xuXG4gICAgICB2YXIgaGFuZGxlID0gZnVuY3Rpb24gaGFuZGxlKCRlbCkge1xuICAgICAgICB2YXIgc2tpcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgICAgaWYgKCRlbCkge1xuICAgICAgICAgIHZhciBwYXJlbnRTY3JvbGxhYmxlRWwgPSBmaW5kUGFyZW50QnlTZWxlY3RvcigkZWwsIHNlbGVjdG9yLCBmYWxzZSk7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudElzSW5wdXRSYW5nZSgkZWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNraXAgfHwgZWxlbWVudElzU2Nyb2xsYWJsZUZpZWxkKCRlbCkgJiYgZmluZFBhcmVudEJ5U2VsZWN0b3IoJGVsLCBzZWxlY3RvcikgfHwgZWxlbWVudEhhc1NlbGVjdG9yKCRlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICB2YXIgcHJldmVudCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoZWxlbWVudFNjcm9sbExlZnRPblN0YXJ0KCRlbCkgJiYgZWxlbWVudFNjcm9sbExlZnRPbkVuZCgkZWwpKSB7XG4gICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24udXAgJiYgZWxlbWVudFNjcm9sbFRvcE9uU3RhcnQoJGVsKSB8fCBkaXJlY3Rpb24uZG93biAmJiBlbGVtZW50U2Nyb2xsVG9wT25FbmQoJGVsKSkge1xuICAgICAgICAgICAgICAgIHByZXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRTY3JvbGxUb3BPblN0YXJ0KCRlbCkgJiYgZWxlbWVudFNjcm9sbFRvcE9uRW5kKCRlbCkpIHtcbiAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbi5sZWZ0ICYmIGVsZW1lbnRTY3JvbGxMZWZ0T25TdGFydCgkZWwpIHx8IGRpcmVjdGlvbi5yaWdodCAmJiBlbGVtZW50U2Nyb2xsTGVmdE9uRW5kKCRlbCkpIHtcbiAgICAgICAgICAgICAgICBwcmV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb25XaXRoT2Zmc2V0LnVwICYmIGVsZW1lbnRTY3JvbGxUb3BPblN0YXJ0KCRlbCkgfHwgZGlyZWN0aW9uV2l0aE9mZnNldC5kb3duICYmIGVsZW1lbnRTY3JvbGxUb3BPbkVuZCgkZWwpIHx8IGRpcmVjdGlvbldpdGhPZmZzZXQubGVmdCAmJiBlbGVtZW50U2Nyb2xsTGVmdE9uU3RhcnQoJGVsKSB8fCBkaXJlY3Rpb25XaXRoT2Zmc2V0LnJpZ2h0ICYmIGVsZW1lbnRTY3JvbGxMZWZ0T25FbmQoJGVsKSkge1xuICAgICAgICAgICAgICBwcmV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKHBhcmVudFNjcm9sbGFibGVFbCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZShwYXJlbnRTY3JvbGxhYmxlRWwsIHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGUocGFyZW50U2Nyb2xsYWJsZUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBoYW5kbGUoZS50YXJnZXQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIG9uVG91Y2hFbmQgPSBmdW5jdGlvbiBvblRvdWNoRW5kKGUpIHtcbiAgaWYgKCFzdGF0ZS5zY3JvbGwpIHtcbiAgICBzdGF0ZS5zdGFydFRvdWNoWSA9IDA7XG4gICAgc3RhdGUuc3RhcnRUb3VjaFggPSAwO1xuICB9XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTtcbn1cblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHNjcm9sbF9sb2NrX29uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCk7XG59XG5cbnZhciBkZXByZWNhdGVkTWV0aG9kcyA9IHtcbiAgaGlkZTogZnVuY3Rpb24gaGlkZSh0YXJnZXQpIHtcbiAgICB0aHJvd0Vycm9yKCdcImhpZGVcIiBpcyBkZXByZWNhdGVkISBVc2UgXCJkaXNhYmxlUGFnZVNjcm9sbFwiIGluc3RlYWQuIFxcbiBodHRwczovL2dpdGh1Yi5jb20vRkwzTktFWS9zY3JvbGwtbG9jayNkaXNhYmxlcGFnZXNjcm9sbHNjcm9sbGFibGV0YXJnZXQnKTtcbiAgICBkaXNhYmxlUGFnZVNjcm9sbCh0YXJnZXQpO1xuICB9LFxuICBzaG93OiBmdW5jdGlvbiBzaG93KHRhcmdldCkge1xuICAgIHRocm93RXJyb3IoJ1wic2hvd1wiIGlzIGRlcHJlY2F0ZWQhIFVzZSBcImVuYWJsZVBhZ2VTY3JvbGxcIiBpbnN0ZWFkLiBcXG4gaHR0cHM6Ly9naXRodWIuY29tL0ZMM05LRVkvc2Nyb2xsLWxvY2sjZW5hYmxlcGFnZXNjcm9sbHNjcm9sbGFibGV0YXJnZXQnKTtcbiAgICBlbmFibGVQYWdlU2Nyb2xsKHRhcmdldCk7XG4gIH0sXG4gIHRvZ2dsZTogZnVuY3Rpb24gdG9nZ2xlKHRhcmdldCkge1xuICAgIHRocm93RXJyb3IoJ1widG9nZ2xlXCIgaXMgZGVwcmVjYXRlZCEgRG8gbm90IHVzZSBpdC4nKTtcblxuICAgIGlmIChnZXRTY3JvbGxTdGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFnZVNjcm9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmFibGVQYWdlU2Nyb2xsKHRhcmdldCk7XG4gICAgfVxuICB9LFxuICBnZXRTdGF0ZTogZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgdGhyb3dFcnJvcignXCJnZXRTdGF0ZVwiIGlzIGRlcHJlY2F0ZWQhIFVzZSBcImdldFNjcm9sbFN0YXRlXCIgaW5zdGVhZC4gXFxuIGh0dHBzOi8vZ2l0aHViLmNvbS9GTDNOS0VZL3Njcm9sbC1sb2NrI2dldHNjcm9sbHN0YXRlJyk7XG4gICAgcmV0dXJuIGdldFNjcm9sbFN0YXRlKCk7XG4gIH0sXG4gIGdldFdpZHRoOiBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICB0aHJvd0Vycm9yKCdcImdldFdpZHRoXCIgaXMgZGVwcmVjYXRlZCEgVXNlIFwiZ2V0UGFnZVNjcm9sbEJhcldpZHRoXCIgaW5zdGVhZC4gXFxuIGh0dHBzOi8vZ2l0aHViLmNvbS9GTDNOS0VZL3Njcm9sbC1sb2NrI2dldHBhZ2VzY3JvbGxiYXJ3aWR0aCcpO1xuICAgIHJldHVybiBnZXRQYWdlU2Nyb2xsQmFyV2lkdGgoKTtcbiAgfSxcbiAgZ2V0Q3VycmVudFdpZHRoOiBmdW5jdGlvbiBnZXRDdXJyZW50V2lkdGgoKSB7XG4gICAgdGhyb3dFcnJvcignXCJnZXRDdXJyZW50V2lkdGhcIiBpcyBkZXByZWNhdGVkISBVc2UgXCJnZXRDdXJyZW50UGFnZVNjcm9sbEJhcldpZHRoXCIgaW5zdGVhZC4gXFxuIGh0dHBzOi8vZ2l0aHViLmNvbS9GTDNOS0VZL3Njcm9sbC1sb2NrI2dldGN1cnJlbnRwYWdlc2Nyb2xsYmFyd2lkdGgnKTtcbiAgICByZXR1cm4gZ2V0Q3VycmVudFBhZ2VTY3JvbGxCYXJXaWR0aCgpO1xuICB9LFxuICBzZXRTY3JvbGxhYmxlVGFyZ2V0czogZnVuY3Rpb24gc2V0U2Nyb2xsYWJsZVRhcmdldHModGFyZ2V0KSB7XG4gICAgdGhyb3dFcnJvcignXCJzZXRTY3JvbGxhYmxlVGFyZ2V0c1wiIGlzIGRlcHJlY2F0ZWQhIFVzZSBcImFkZFNjcm9sbGFibGVUYXJnZXRcIiBpbnN0ZWFkLiBcXG4gaHR0cHM6Ly9naXRodWIuY29tL0ZMM05LRVkvc2Nyb2xsLWxvY2sjYWRkc2Nyb2xsYWJsZXRhcmdldHNjcm9sbGFibGV0YXJnZXQnKTtcbiAgICBzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlVGFyZ2V0KHRhcmdldCk7XG4gIH0sXG4gIHNldEZpbGxHYXBTZWxlY3RvcnM6IGZ1bmN0aW9uIHNldEZpbGxHYXBTZWxlY3RvcnMoc2VsZWN0b3IpIHtcbiAgICB0aHJvd0Vycm9yKCdcInNldEZpbGxHYXBTZWxlY3RvcnNcIiBpcyBkZXByZWNhdGVkISBVc2UgXCJhZGRGaWxsR2FwU2VsZWN0b3JcIiBpbnN0ZWFkLiBcXG4gaHR0cHM6Ly9naXRodWIuY29tL0ZMM05LRVkvc2Nyb2xsLWxvY2sjYWRkZmlsbGdhcHNlbGVjdG9yZmlsbGdhcHNlbGVjdG9yJyk7XG4gICAgc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfSxcbiAgc2V0RmlsbEdhcFRhcmdldHM6IGZ1bmN0aW9uIHNldEZpbGxHYXBUYXJnZXRzKHRhcmdldCkge1xuICAgIHRocm93RXJyb3IoJ1wic2V0RmlsbEdhcFRhcmdldHNcIiBpcyBkZXByZWNhdGVkISBVc2UgXCJhZGRGaWxsR2FwVGFyZ2V0XCIgaW5zdGVhZC4gXFxuIGh0dHBzOi8vZ2l0aHViLmNvbS9GTDNOS0VZL3Njcm9sbC1sb2NrI2FkZGZpbGxnYXB0YXJnZXRmaWxsZ2FwdGFyZ2V0Jyk7XG4gICAgc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFRhcmdldCh0YXJnZXQpO1xuICB9LFxuICBjbGVhclF1ZXVlOiBmdW5jdGlvbiBjbGVhclF1ZXVlKCkge1xuICAgIHRocm93RXJyb3IoJ1wiY2xlYXJRdWV1ZVwiIGlzIGRlcHJlY2F0ZWQhIFVzZSBcImNsZWFyUXVldWVTY3JvbGxMb2Nrc1wiIGluc3RlYWQuIFxcbiBodHRwczovL2dpdGh1Yi5jb20vRkwzTktFWS9zY3JvbGwtbG9jayNjbGVhcnF1ZXVlc2Nyb2xsbG9ja3MnKTtcbiAgICBjbGVhclF1ZXVlU2Nyb2xsTG9ja3MoKTtcbiAgfVxufTtcblxudmFyIHNjcm9sbExvY2sgPSBfb2JqZWN0U3ByZWFkKHtcbiAgZGlzYWJsZVBhZ2VTY3JvbGw6IGRpc2FibGVQYWdlU2Nyb2xsLFxuICBlbmFibGVQYWdlU2Nyb2xsOiBlbmFibGVQYWdlU2Nyb2xsLFxuICBnZXRTY3JvbGxTdGF0ZTogZ2V0U2Nyb2xsU3RhdGUsXG4gIGNsZWFyUXVldWVTY3JvbGxMb2NrczogY2xlYXJRdWV1ZVNjcm9sbExvY2tzLFxuICBnZXRUYXJnZXRTY3JvbGxCYXJXaWR0aDogc2Nyb2xsX2xvY2tfZ2V0VGFyZ2V0U2Nyb2xsQmFyV2lkdGgsXG4gIGdldEN1cnJlbnRUYXJnZXRTY3JvbGxCYXJXaWR0aDogc2Nyb2xsX2xvY2tfZ2V0Q3VycmVudFRhcmdldFNjcm9sbEJhcldpZHRoLFxuICBnZXRQYWdlU2Nyb2xsQmFyV2lkdGg6IGdldFBhZ2VTY3JvbGxCYXJXaWR0aCxcbiAgZ2V0Q3VycmVudFBhZ2VTY3JvbGxCYXJXaWR0aDogZ2V0Q3VycmVudFBhZ2VTY3JvbGxCYXJXaWR0aCxcbiAgYWRkU2Nyb2xsYWJsZVNlbGVjdG9yOiBzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlU2VsZWN0b3IsXG4gIHJlbW92ZVNjcm9sbGFibGVTZWxlY3Rvcjogc2Nyb2xsX2xvY2tfcmVtb3ZlU2Nyb2xsYWJsZVNlbGVjdG9yLFxuICBhZGRTY3JvbGxhYmxlVGFyZ2V0OiBzY3JvbGxfbG9ja19hZGRTY3JvbGxhYmxlVGFyZ2V0LFxuICByZW1vdmVTY3JvbGxhYmxlVGFyZ2V0OiBzY3JvbGxfbG9ja19yZW1vdmVTY3JvbGxhYmxlVGFyZ2V0LFxuICBhZGRMb2NrYWJsZVNlbGVjdG9yOiBzY3JvbGxfbG9ja19hZGRMb2NrYWJsZVNlbGVjdG9yLFxuICBhZGRMb2NrYWJsZVRhcmdldDogc2Nyb2xsX2xvY2tfYWRkTG9ja2FibGVUYXJnZXQsXG4gIGFkZEZpbGxHYXBTZWxlY3Rvcjogc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFNlbGVjdG9yLFxuICByZW1vdmVGaWxsR2FwU2VsZWN0b3I6IHNjcm9sbF9sb2NrX3JlbW92ZUZpbGxHYXBTZWxlY3RvcixcbiAgYWRkRmlsbEdhcFRhcmdldDogc2Nyb2xsX2xvY2tfYWRkRmlsbEdhcFRhcmdldCxcbiAgcmVtb3ZlRmlsbEdhcFRhcmdldDogc2Nyb2xsX2xvY2tfcmVtb3ZlRmlsbEdhcFRhcmdldCxcbiAgc2V0RmlsbEdhcE1ldGhvZDogc2Nyb2xsX2xvY2tfc2V0RmlsbEdhcE1ldGhvZCxcbiAgcmVmaWxsR2FwczogcmVmaWxsR2FwcyxcbiAgX3N0YXRlOiBzdGF0ZVxufSwgZGVwcmVjYXRlZE1ldGhvZHMpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzY3JvbGxfbG9jayA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKHNjcm9sbExvY2spO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSlbXCJkZWZhdWx0XCJdO1xufSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIEFQSV9VUkwgPSBleHBvcnRzLkFQSV9VUkwgPSBcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbVwiO1xudmFyIEFQSV9WRVJTSU9OID0gZXhwb3J0cy5BUElfVkVSU0lPTiA9IFwidjFcIjtcbnZhciBPQVVUSF9BVVRIT1JJWkVfVVJMID0gZXhwb3J0cy5PQVVUSF9BVVRIT1JJWkVfVVJMID0gXCJodHRwczovL3Vuc3BsYXNoLmNvbS9vYXV0aC9hdXRob3JpemVcIjtcbnZhciBPQVVUSF9UT0tFTl9VUkwgPSBleHBvcnRzLk9BVVRIX1RPS0VOX1VSTCA9IFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vb2F1dGgvdG9rZW5cIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5mb3JtVXJsRW5jb2RlID0gZm9ybVVybEVuY29kZTtcbmV4cG9ydHMuZ2V0VXJsQ29tcG9uZW50cyA9IGdldFVybENvbXBvbmVudHM7XG5leHBvcnRzLmJ1aWxkRmV0Y2hPcHRpb25zID0gYnVpbGRGZXRjaE9wdGlvbnM7XG5cbnZhciBfcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cbnZhciBfZm9ybVVybGVuY29kZWQgPSByZXF1aXJlKFwiZm9ybS11cmxlbmNvZGVkXCIpO1xuXG52YXIgX2Zvcm1VcmxlbmNvZGVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvcm1VcmxlbmNvZGVkKTtcblxudmFyIF91cmxQYXJzZSA9IHJlcXVpcmUoXCJ1cmwtcGFyc2VcIik7XG5cbnZhciBfdXJsUGFyc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXJsUGFyc2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBmb3JtVXJsRW5jb2RlKGJvZHkpIHtcbiAgcmV0dXJuICgwLCBfZm9ybVVybGVuY29kZWQyLmRlZmF1bHQpKGJvZHkpO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxDb21wb25lbnRzKHVyaSkge1xuICByZXR1cm4gKDAsIF91cmxQYXJzZTIuZGVmYXVsdCkodXJpLCB7fSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRmV0Y2hPcHRpb25zKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCxcbiAgICAgIHF1ZXJ5ID0gb3B0aW9ucy5xdWVyeSxcbiAgICAgIG9hdXRoID0gb3B0aW9ucy5vYXV0aCxcbiAgICAgIGJvZHkgPSBvcHRpb25zLmJvZHk7XG5cbiAgdmFyIHVybCA9IG9hdXRoID09PSB0cnVlID8gb3B0aW9ucy51cmwgOiBcIlwiICsgdGhpcy5fYXBpVXJsICsgb3B0aW9ucy51cmw7XG4gIHZhciBoZWFkZXJzID0gX2V4dGVuZHMoe30sIHRoaXMuX2hlYWRlcnMsIG9wdGlvbnMuaGVhZGVycywge1xuICAgIFwiQWNjZXB0LVZlcnNpb25cIjogdGhpcy5fYXBpVmVyc2lvbixcbiAgICBcIkF1dGhvcml6YXRpb25cIjogdGhpcy5fYmVhcmVyVG9rZW4gPyBcIkJlYXJlciBcIiArIHRoaXMuX2JlYXJlclRva2VuIDogXCJDbGllbnQtSUQgXCIgKyB0aGlzLl9hY2Nlc3NLZXlcbiAgfSk7XG4gIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcblxuICBpZiAoYm9keSkge1xuICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuICB9XG5cbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCArIFwiP1wiICsgKDAsIF9xdWVyeXN0cmluZy5zdHJpbmdpZnkpKHF1ZXJ5KSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHVybDogdXJsLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBib2R5OiBtZXRob2QgIT09IFwiR0VUXCIgJiYgYm9keSA/IGZvcm1VcmxFbmNvZGUoYm9keSkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjcmVhdGVPYnNlcnZlciwgb2JzZXJ2ZUVsZW1lbnQsIHVub2JzZXJ2ZUVsZW1lbnQgfSBmcm9tICcuL29ic2VydmVyJztcbmltcG9ydCB7IHNoYWxsb3dDb21wYXJlLCBpc0NoaWxkcmVuV2l0aFJlZiwgaGFzT3duUHJvcGVydHksIHRvU3RyaW5nLCB9IGZyb20gJy4vdXRpbHMnO1xudmFyIG9ic2VydmVyT3B0aW9ucyA9IFsncm9vdCcsICdyb290TWFyZ2luJywgJ3RocmVzaG9sZCddO1xudmFyIG9ic2VydmFibGVQcm9wcyA9IFsncm9vdCcsICdyb290TWFyZ2luJywgJ3RocmVzaG9sZCcsICdkaXNhYmxlZCddO1xuZXhwb3J0IHZhciBnZXRPcHRpb25zID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIG9ic2VydmVyT3B0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKG9wdGlvbnMsIGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBpc1Jvb3RTdHJpbmcgPSBrZXkgPT09ICdyb290JyAmJiB0b1N0cmluZy5jYWxsKHByb3BzLnJvb3QpID09PSAnW29iamVjdCBTdHJpbmddJztcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgKF9hID0ge30sXG4gICAgICAgICAgICBfYVtrZXldID0gaXNSb290U3RyaW5nXG4gICAgICAgICAgICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb3BzW2tleV0pXG4gICAgICAgICAgICAgICAgOiBwcm9wc1trZXldLFxuICAgICAgICAgICAgX2EpKTtcbiAgICB9LCB7fSk7XG59O1xudmFyIFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVhY3RJbnRlcnNlY3Rpb25PYnNlcnZlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQsIF90aGlzLmV4dGVybmFsVW5vYnNlcnZlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlTm9kZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IF90aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGb3J3YXJkIGhpamFja2VkIHJlZiB0byB1c2VyLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoaXNDaGlsZHJlbldpdGhSZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkZW5SZWYgPSBjaGlsZHJlbi5yZWY7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZGVuUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkZW5SZWYodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGRlblJlZiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGNoaWxkZW5SZWYsICdjdXJyZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICogVGhlIGNoaWxkcmVuIHJlZi5jdXJyZW50IGlzIHJlYWQtb25seSwgd2UgYXJlbid0IGFsbG93ZWQgdG8gZG8gdGhpcywgc29cbiAgICAgICAgICAgICAgICAgICAgICogaW4gZnV0dXJlIHJlbGVhc2UgaXQgaGFzIHRvIGdvIGF3YXksIGFuZCB0aGUgcmVmIHNoYWxsIGJlXG4gICAgICAgICAgICAgICAgICAgICAqIGZvcndhcmRlZCBhbmQgYXNzaWduZWQgdG8gYSBET00gbm9kZSBieSB0aGUgdXNlci5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkZW5SZWYuY3VycmVudCA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy50YXJnZXROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXROb2RlID0gZmluZERPTU5vZGUodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Tm9kZSAmJiB0YXJnZXROb2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRhcmdldE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5jaGlsZHJlbiA9PSBudWxsIHx8IF90aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfdGhpcy50YXJnZXROb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhY3RJbnRlcnNlY3Rpb25PYnNlcnZlcjogQ2FuJ3QgZmluZCBET00gbm9kZSBpbiB0aGUgcHJvdmlkZWQgY2hpbGRyZW4uIE1ha2Ugc3VyZSB0byByZW5kZXIgYXQgbGVhc3Qgb25lIERPTSBub2RlIGluIHRoZSB0cmVlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLm9ic2VydmVyID0gY3JlYXRlT2JzZXJ2ZXIoZ2V0T3B0aW9ucyhfdGhpcy5wcm9wcykpO1xuICAgICAgICAgICAgX3RoaXMudGFyZ2V0ID0gX3RoaXMudGFyZ2V0Tm9kZTtcbiAgICAgICAgICAgIG9ic2VydmVFbGVtZW50KF90aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy51bm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICB1bm9ic2VydmVFbGVtZW50KF90aGlzLCB0YXJnZXQpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5leHRlcm5hbFVub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy50YXJnZXROb2RlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudW5vYnNlcnZlKF90aGlzLnRhcmdldE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByZXZUYXJnZXROb2RlID0gdGhpcy50YXJnZXROb2RlO1xuICAgICAgICB2YXIgcmVsYXRlZFByb3BzQ2hhbmdlZCA9IG9ic2VydmFibGVQcm9wcy5zb21lKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvd0NvbXBhcmUoX3RoaXMucHJvcHNbcHJvcF0sIHByZXZQcm9wc1twcm9wXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVsYXRlZFByb3BzQ2hhbmdlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldlRhcmdldE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXZQcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZSh0aGlzLnByZXZUYXJnZXROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGF0ZWRQcm9wc0NoYW5nZWQ7XG4gICAgfTtcbiAgICBSZWFjdEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoXywgX18sIHJlbGF0ZWRQcm9wc0NoYW5nZWQpIHtcbiAgICAgICAgdmFyIHRhcmdldE5vZGVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIGRpZG4ndCB1bm9ic2VydmUgcHJldmlvdXNseSBkdWUgdG8gYSBwcm9wIGNoYW5nZVxuICAgICAgICBpZiAoIXJlbGF0ZWRQcm9wc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHRhcmdldE5vZGVDaGFuZ2VkID0gdGhpcy5wcmV2VGFyZ2V0Tm9kZSAhPT0gdGhpcy50YXJnZXROb2RlO1xuICAgICAgICAgICAgLy8gY2hlY2sgd2UgaGF2ZSBhIHByZXZpb3VzIG5vZGUgd2Ugd2FudCB0byB1bm9ic2VydmVcbiAgICAgICAgICAgIGlmICh0YXJnZXROb2RlQ2hhbmdlZCAmJiB0aGlzLnByZXZUYXJnZXROb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZSh0aGlzLnByZXZUYXJnZXROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsYXRlZFByb3BzQ2hhbmdlZCB8fCB0YXJnZXROb2RlQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICB9O1xuICAgIFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZSh0aGlzLnRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWFjdEludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBjaGlsZHJlbiAhPSBudWxsXG4gICAgICAgICAgICA/IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwge1xuICAgICAgICAgICAgICAgIHJlZjogdGhpcy5oYW5kbGVOb2RlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9O1xuICAgIFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIuZGlzcGxheU5hbWUgPSAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInO1xuICAgIHJldHVybiBSZWFjdEludGVyc2VjdGlvbk9ic2VydmVyO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS01LTEhLi9mb290ZXIuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAcmVzZWFyY2hnYXRlL3JlYWN0LWludGVyc2VjdGlvbi1vYnNlcnZlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGhhc1dpbmRvdyA9IGZ1bmN0aW9uIGhhc1dpbmRvdygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xufTtcblxudmFyIFByb2dyZXNzaXZlSW1hZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb2dyZXNzaXZlSW1hZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb2dyZXNzaXZlSW1hZ2UocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvZ3Jlc3NpdmVJbWFnZSk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihQcm9ncmVzc2l2ZUltYWdlKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW1hZ2VcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVPbmxpbmVTdGF0dXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc09ubGluZTogd2luZG93Lm5hdmlnYXRvci5vbkxpbmVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxvYWRJbWFnZVwiLCBmdW5jdGlvbiAoc3JjLCBzcmNTZXREYXRhKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGltYWdlIHdlIG51bGxpZnkgdGhlIG9ubG9hZFxuICAgICAgLy8gYW5kIG9uZXJyb3IgcHJvcHMgc28gaXQgZG9lcyBub3QgaW5jb3JyZWN0bHkgc2V0IHN0YXRlXG4gICAgICAvLyB3aGVuIGl0IHJlc29sdmVzXG4gICAgICBpZiAoX3RoaXMuaW1hZ2UpIHtcbiAgICAgICAgX3RoaXMuaW1hZ2Uub25sb2FkID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaW1hZ2Uub25lcnJvciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgX3RoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IF90aGlzLm9uTG9hZDtcblxuICAgICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMub25FcnJvcjtcbiAgICAgICAgcmV0dXJuOyAvLyB0aGlzLmhhbmRsZUltYWdlUmV0cmllcyhpbWFnZSk7XG4gICAgICB9O1xuXG4gICAgICBpbWFnZS5zcmMgPSBzcmM7XG5cbiAgICAgIGlmIChzcmNTZXREYXRhKSB7XG4gICAgICAgIGltYWdlLnNyY3NldCA9IHNyY1NldERhdGEuc3JjU2V0O1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNyY1NldERhdGEuc2l6ZXM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Mb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHVzZSB0aGlzLmltYWdlLnNyYyBpbnN0ZWFkIG9mIHRoaXMucHJvcHMuc3JjIHRvXG4gICAgICAvLyBhdm9pZCB0aGUgcG9zc2liaWxpdHkgb2YgcHJvcHMgYmVpbmcgdXBkYXRlZCBhbmQgdGhlXG4gICAgICAvLyBuZXcgaW1hZ2UgbG9hZGluZyBiZWZvcmUgdGhlIG5ldyBwcm9wcyBhcmUgYXZhaWxhYmxlIGFzXG4gICAgICAvLyB0aGlzLnByb3BzLlxuICAgICAgaWYgKF90aGlzLnByb3BzLmRlbGF5KSB7XG4gICAgICAgIF90aGlzLnNldEltYWdlV2l0aERlbGF5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXRJbWFnZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEltYWdlV2l0aERlbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXRJbWFnZSgpO1xuICAgICAgfSwgX3RoaXMucHJvcHMuZGVsYXkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEltYWdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbWFnZTogX3RoaXMuaW1hZ2Uuc3JjLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIHNyY1NldERhdGE6IHtcbiAgICAgICAgICAgIHNyY1NldDogX3RoaXMuaW1hZ2Uuc3Jjc2V0IHx8ICcnLFxuICAgICAgICAgICAgc2l6ZXM6IF90aGlzLmltYWdlLnNpemVzIHx8ICcnXG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubGluZScsIF90aGlzLmhhbmRsZU9ubGluZVN0YXR1cyk7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBfdGhpcy5oYW5kbGVPbmxpbmVTdGF0dXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkVycm9yXCIsIGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7XG4gICAgICB2YXIgb25FcnJvciA9IF90aGlzLnByb3BzLm9uRXJyb3I7XG5cbiAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgIG9uRXJyb3IoZXJyb3JFdmVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSW50ZXJzZWN0aW9uXCIsIGZ1bmN0aW9uIChldmVudCwgdW5vYnNlcnZlLCBpc09ubGluZSkge1xuICAgICAgaWYgKGV2ZW50LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgc3JjID0gX3RoaXMkcHJvcHMuc3JjLFxuICAgICAgICAgICAgc3JjU2V0RGF0YSA9IF90aGlzJHByb3BzLnNyY1NldERhdGE7XG5cbiAgICAgICAgaWYgKGlzT25saW5lKSB7XG4gICAgICAgICAgX3RoaXMubG9hZEltYWdlKHNyYywgc3JjU2V0RGF0YSk7XG5cbiAgICAgICAgICB1bm9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNPbmxpbmU6IGhhc1dpbmRvdygpID8gd2luZG93Lm5hdmlnYXRvci5vbkxpbmUgOiB0cnVlLFxuICAgICAgaW1hZ2U6IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIHNyY1NldERhdGE6IHtcbiAgICAgICAgc3JjU2V0OiAnJyxcbiAgICAgICAgc2l6ZXM6ICcnXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZ3Jlc3NpdmVJbWFnZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoIWhhc1dpbmRvdygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIHRoaXMuaGFuZGxlT25saW5lU3RhdHVzKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgdGhpcy5oYW5kbGVPbmxpbmVTdGF0dXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHNyYyA9IF90aGlzJHByb3BzMi5zcmMsXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRwcm9wczIucGxhY2Vob2xkZXIsXG4gICAgICAgICAgc3JjU2V0RGF0YSA9IF90aGlzJHByb3BzMi5zcmNTZXREYXRhOyAvLyBXZSBvbmx5IGludmFsaWRhdGUgdGhlIGN1cnJlbnQgaW1hZ2UgaWYgdGhlIHNyYyBoYXMgY2hhbmdlZC5cblxuICAgICAgaWYgKHNyYyAhPT0gcHJldlByb3BzLnNyYykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpbWFnZTogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgbG9hZGluZzogdHJ1ZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLmxvYWRJbWFnZShzcmMsIHNyY1NldERhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuaW1hZ2UpIHtcbiAgICAgICAgdGhpcy5pbWFnZS5vbmxvYWQgPSBudWxsO1xuICAgICAgICB0aGlzLmltYWdlLm9uZXJyb3IgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH1cblxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubGluZScsIHRoaXMuaGFuZGxlT25saW5lU3RhdHVzKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgdGhpcy5oYW5kbGVPbmxpbmVTdGF0dXMpOyAvLyB0aGlzLmNsZWFyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGV2ZW50LCB1bm9ic2VydmUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLmhhbmRsZUludGVyc2VjdGlvbihldmVudCwgdW5vYnNlcnZlLCBfdGhpczMuc3RhdGUuaXNPbmxpbmUpO1xuICAgICAgICB9LFxuICAgICAgICByb290TWFyZ2luOiB0aGlzLnByb3BzLnJvb3RNYXJnaW4gfHwgJzAlIDAlIDI1JScsXG4gICAgICAgIHRocmVzaG9sZDogdGhpcy5wcm9wcy50aHJlc2hvbGQgfHwgWzBdLFxuICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5ub0xhenlMb2FkIHx8IGZhbHNlXG4gICAgICB9O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBpbWFnZSA9IF90aGlzJHN0YXRlLmltYWdlLFxuICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRzdGF0ZS5sb2FkaW5nLFxuICAgICAgICAgIHNyY1NldERhdGEgPSBfdGhpcyRzdGF0ZS5zcmNTZXREYXRhO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc3JjID0gX3RoaXMkcHJvcHMzLnNyYyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBub1JldHJ5ID0gX3RoaXMkcHJvcHMzLm5vUmV0cnksXG4gICAgICAgICAgbm9MYXp5TG9hZCA9IF90aGlzJHByb3BzMy5ub0xhenlMb2FkO1xuXG4gICAgICBpZiAoIWNoaWxkcmVuIHx8IHR5cGVvZiBjaGlsZHJlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9ncmVzc2l2ZUltYWdlIHJlcXVpcmVzIGEgZnVuY3Rpb24gYXMgaXRzIG9ubHkgY2hpbGRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChub0xhenlMb2FkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbihzcmMsIGZhbHNlLCB0aGlzLnByb3BzLnNyY1NldERhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3RJbnRlcnNlY3Rpb25PYnNlcnZlcltcImRlZmF1bHRcIl0sIG9wdGlvbnMsIGNoaWxkcmVuKGltYWdlLCBsb2FkaW5nLCBzcmNTZXREYXRhKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb2dyZXNzaXZlSW1hZ2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUHJvZ3Jlc3NpdmVJbWFnZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMy4xXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5nbG9iYWwuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDE2cHg7XFxyXFxuICBmb250LWZhbWlseTogJ1JvYm90bycsIHNlcmlmO1xcclxcbn1cXHJcXG5cXHJcXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gRmlsZW5hbWU6IGZvcm11cmxlbmNvZGVkLmpzXG4vLyBUaW1lc3RhbXA6IDIwMTYuMDEuMTgtMTU6MzY6MzcgKGxhc3QgbW9kaWZpZWQpXG4vLyBBdXRob3Iocyk6IEJ1bWJsZWhlYWQgKHd3dy5idW1ibGVoZWFkLmNvbSksIEpCbGFzaGlsbCAoamFtZXNAYmxhc2hpbGwuY29tKVxuLy9cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjdXJsLWVuY29kZWQtZm9ybS1kYXRhXG4vLyBpbnB1dDoge29uZToxLHR3bzoyfSByZXR1cm46ICdbb25lXT0xJlt0d29dPTInXG5cbnZhciBmb3JtdXJsZW5jb2RlZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRhdGEsIG9wdHMpIHtcbiAgb3B0cyA9IHR5cGVvZiBvcHRzID09PSAnb2JqZWN0JyA/IG9wdHMgOiB7fTtcblxuICBmdW5jdGlvbiBlbmNvZGUgKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSlcbiAgICAgIC5yZXBsYWNlKC9bXiAhJygpflxcKl0qL2csIGVuY29kZVVSSUNvbXBvbmVudClcbiAgICAgIC5yZXBsYWNlKC8gL2csICcrJylcbiAgICAgIC5yZXBsYWNlKC9bIScoKX5cXCpdL2csIGZ1bmN0aW9uIChjaCkge1xuICAgICAgICByZXR1cm4gJyUnICsgY2guY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KS5zbGljZSgtMikudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5cyAob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgcmV0dXJuIG9wdHMuc29ydGVkID8ga2V5cy5zb3J0KCkgOiBrZXlzO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyam9pbiAoYXJyKSB7XG4gICAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGU7IH0pLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9iam5lc3QgKG5hbWUsIG9iaikge1xuICAgIHJldHVybiBmaWx0ZXJqb2luKGtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG5lc3QobmFtZSArICdbJyArIGtleSArICddJywgb2JqW2tleV0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycm5lc3QgKG5hbWUsIGFycikge1xuICAgIHJldHVybiBmaWx0ZXJqb2luKGFyci5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHJldHVybiBuZXN0KG5hbWUgKyAnW10nLCBlbGVtKTtcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXN0IChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuICAgICAgICBmID0gbnVsbDtcblxuICAgIGlmICh2YWx1ZSA9PT0gZikge1xuICAgICAgZiA9IG9wdHMuaWdub3JlbnVsbCA/IGYgOiBlbmNvZGUobmFtZSkgKyAnPScgKyBmO1xuICAgIH0gZWxzZSBpZiAoL3N0cmluZ3xudW1iZXJ8Ym9vbGVhbi8udGVzdCh0eXBlKSkge1xuICAgICAgZiA9IGVuY29kZShuYW1lKSArICc9JyArIGVuY29kZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgZiA9IGFycm5lc3QobmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGYgPSBvYmpuZXN0KG5hbWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZjtcbiAgfVxuXG4gIHJldHVybiBmaWx0ZXJqb2luKGtleXMoZGF0YSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbmVzdChrZXksIGRhdGFba2V5XSk7XG4gIH0pKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlZCA9IHJlcXVpcmUoJ3JlcXVpcmVzLXBvcnQnKVxuICAsIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmdpZnknKVxuICAsIHNsYXNoZXMgPSAvXltBLVphLXpdW0EtWmEtejAtOSstLl0qOlxcL1xcLy9cbiAgLCBwcm90b2NvbHJlID0gL14oW2Etel1bYS16MC05ListXSo6KT8oXFwvXFwvKT8oW1xcU1xcc10qKS9pXG4gICwgd2hpdGVzcGFjZSA9ICdbXFxcXHgwOVxcXFx4MEFcXFxceDBCXFxcXHgwQ1xcXFx4MERcXFxceDIwXFxcXHhBMFxcXFx1MTY4MFxcXFx1MTgwRVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwQVxcXFx1MjAyRlxcXFx1MjA1RlxcXFx1MzAwMFxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1RkVGRl0nXG4gICwgbGVmdCA9IG5ldyBSZWdFeHAoJ14nKyB3aGl0ZXNwYWNlICsnKycpO1xuXG4vKipcbiAqIFRyaW0gYSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBTdHJpbmcgdG8gdHJpbS5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdHJpbUxlZnQoc3RyKSB7XG4gIHJldHVybiAoc3RyIHx8ICcnKS5yZXBsYWNlKGxlZnQsICcnKTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgZnVuY3Rpb24gc2FuaXRpemUoYWRkcmVzcykgeyAgICAgICAgICAvLyBTYW5pdGl6ZSB3aGF0IGlzIGxlZnQgb2YgdGhlIGFkZHJlc3NcbiAgICByZXR1cm4gYWRkcmVzcy5yZXBsYWNlKCdcXFxcJywgJy8nKTtcbiAgfSxcbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKykkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGNvcGllZCBvciBpbmhlcml0ZWQgZnJvbS4gVGhpcyBpcyBvbmx5IG5lZWRlZFxuICogZm9yIGFsbCBub24gYmxvYiBVUkwncyBhcyBhIGJsb2IgVVJMIGRvZXMgbm90IGluY2x1ZGUgYSBoYXNoLCBvbmx5IHRoZVxuICogb3JpZ2luLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaWdub3JlID0geyBoYXNoOiAxLCBxdWVyeTogMSB9O1xuXG4vKipcbiAqIFRoZSBsb2NhdGlvbiBvYmplY3QgZGlmZmVycyB3aGVuIHlvdXIgY29kZSBpcyBsb2FkZWQgdGhyb3VnaCBhIG5vcm1hbCBwYWdlLFxuICogV29ya2VyIG9yIHRocm91Z2ggYSB3b3JrZXIgdXNpbmcgYSBibG9iLiBBbmQgd2l0aCB0aGUgYmxvYmJsZSBiZWdpbnMgdGhlXG4gKiB0cm91YmxlIGFzIHRoZSBsb2NhdGlvbiBvYmplY3Qgd2lsbCBjb250YWluIHRoZSBVUkwgb2YgdGhlIGJsb2IsIG5vdCB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBwYWdlIHdoZXJlIG91ciBjb2RlIGlzIGxvYWRlZCBpbi4gVGhlIGFjdHVhbCBvcmlnaW4gaXNcbiAqIGVuY29kZWQgaW4gdGhlIGBwYXRobmFtZWAgc28gd2UgY2FuIHRoYW5rZnVsbHkgZ2VuZXJhdGUgYSBnb29kIFwiZGVmYXVsdFwiXG4gKiBsb2NhdGlvbiBmcm9tIGl0IHNvIHdlIGNhbiBnZW5lcmF0ZSBwcm9wZXIgcmVsYXRpdmUgVVJMJ3MgYWdhaW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBsb2MgT3B0aW9uYWwgZGVmYXVsdCBsb2NhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBsb2xjYXRpb24gb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2xjYXRpb24obG9jKSB7XG4gIHZhciBnbG9iYWxWYXI7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSB3aW5kb3c7XG4gIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSBnbG9iYWw7XG4gIGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gc2VsZjtcbiAgZWxzZSBnbG9iYWxWYXIgPSB7fTtcblxuICB2YXIgbG9jYXRpb24gPSBnbG9iYWxWYXIubG9jYXRpb24gfHwge307XG4gIGxvYyA9IGxvYyB8fCBsb2NhdGlvbjtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVybChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBQcm90b2NvbEV4dHJhY3RcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIG1hdGNoZWQgaW4gdGhlIFVSTCwgaW4gbG93ZXJjYXNlLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBzbGFzaGVzIGB0cnVlYCBpZiBwcm90b2NvbCBpcyBmb2xsb3dlZCBieSBcIi8vXCIsIGVsc2UgYGZhbHNlYC5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSByZXN0IFJlc3Qgb2YgdGhlIFVSTCB0aGF0IGlzIG5vdCBwYXJ0IG9mIHRoZSBwcm90b2NvbC5cbiAqL1xuXG4vKipcbiAqIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gZnJvbSBhIFVSTCB3aXRoL3dpdGhvdXQgZG91YmxlIHNsYXNoIChcIi8vXCIpLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIFVSTCB3ZSB3YW50IHRvIGV4dHJhY3QgZnJvbS5cbiAqIEByZXR1cm4ge1Byb3RvY29sRXh0cmFjdH0gRXh0cmFjdGVkIGluZm9ybWF0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MpIHtcbiAgYWRkcmVzcyA9IHRyaW1MZWZ0KGFkZHJlc3MpO1xuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogbWF0Y2hbMV0gPyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIDogJycsXG4gICAgc2xhc2hlczogISFtYXRjaFsyXSxcbiAgICByZXN0OiBtYXRjaFszXVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSByZWxhdGl2ZSBVUkwgcGF0aG5hbWUgYWdhaW5zdCBhIGJhc2UgVVJMIHBhdGhuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZSBQYXRobmFtZSBvZiB0aGUgcmVsYXRpdmUgVVJMLlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgUGF0aG5hbWUgb2YgdGhlIGJhc2UgVVJMLlxuICogQHJldHVybiB7U3RyaW5nfSBSZXNvbHZlZCBwYXRobmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUocmVsYXRpdmUsIGJhc2UpIHtcbiAgaWYgKHJlbGF0aXZlID09PSAnJykgcmV0dXJuIGJhc2U7XG5cbiAgdmFyIHBhdGggPSAoYmFzZSB8fCAnLycpLnNwbGl0KCcvJykuc2xpY2UoMCwgLTEpLmNvbmNhdChyZWxhdGl2ZS5zcGxpdCgnLycpKVxuICAgICwgaSA9IHBhdGgubGVuZ3RoXG4gICAgLCBsYXN0ID0gcGF0aFtpIC0gMV1cbiAgICAsIHVuc2hpZnQgPSBmYWxzZVxuICAgICwgdXAgPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAocGF0aFtpXSA9PT0gJy4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhdGhbaV0gPT09ICcuLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBpZiAoaSA9PT0gMCkgdW5zaGlmdCA9IHRydWU7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuc2hpZnQpIHBhdGgudW5zaGlmdCgnJyk7XG4gIGlmIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgcGF0aC5wdXNoKCcnKTtcblxuICByZXR1cm4gcGF0aC5qb2luKCcvJyk7XG59XG5cbi8qKlxuICogVGhlIGFjdHVhbCBVUkwgaW5zdGFuY2UuIEluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIG9iamVjdCB3ZSd2ZSBvcHRlZC1pbiB0b1xuICogY3JlYXRlIGFuIGFjdHVhbCBjb25zdHJ1Y3RvciBhcyBpdCdzIG11Y2ggbW9yZSBtZW1vcnkgZWZmaWNpZW50IGFuZFxuICogZmFzdGVyIGFuZCBpdCBwbGVhc2VzIG15IE9DRC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBgVVJMYCBhcyBjbGFzcyBuYW1lIHRvIHByZXZlbnRcbiAqIGNsYXNoZXMgd2l0aCB0aGUgZ2xvYmFsIFVSTCBpbnN0YW5jZSB0aGF0IGdvdCBpbnRyb2R1Y2VkIGluIGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtsb2NhdGlvbl0gTG9jYXRpb24gZGVmYXVsdHMgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBbcGFyc2VyXSBQYXJzZXIgZm9yIHRoZSBxdWVyeSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBVcmwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcikge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVybCkpIHtcbiAgICByZXR1cm4gbmV3IFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKTtcbiAgfVxuXG4gIHZhciByZWxhdGl2ZSwgZXh0cmFjdGVkLCBwYXJzZSwgaW5zdHJ1Y3Rpb24sIGluZGV4LCBrZXlcbiAgICAsIGluc3RydWN0aW9ucyA9IHJ1bGVzLnNsaWNlKClcbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jYXRpb25cbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGkgPSAwO1xuXG4gIC8vXG4gIC8vIFRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50cyBhbGxvd3MgdGhpcyBtb2R1bGUgdHdvIGhhdmUgY29tcGF0aWJpbGl0eSB3aXRoXG4gIC8vIDIgZGlmZmVyZW50IEFQSTpcbiAgLy9cbiAgLy8gMS4gTm9kZS5qcydzIGB1cmwucGFyc2VgIGFwaSB3aGljaCBhY2NlcHRzIGEgVVJMLCBib29sZWFuIGFzIGFyZ3VtZW50c1xuICAvLyAgICB3aGVyZSB0aGUgYm9vbGVhbiBpbmRpY2F0ZXMgdGhhdCB0aGUgcXVlcnkgc3RyaW5nIHNob3VsZCBhbHNvIGJlIHBhcnNlZC5cbiAgLy9cbiAgLy8gMi4gVGhlIGBVUkxgIGludGVyZmFjZSBvZiB0aGUgYnJvd3NlciB3aGljaCBhY2NlcHRzIGEgVVJMLCBvYmplY3QgYXNcbiAgLy8gICAgYXJndW1lbnRzLiBUaGUgc3VwcGxpZWQgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0IHZhbHVlcyAvIGZhbGwtYmFja1xuICAvLyAgICBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gIC8vXG4gIGlmICgnb2JqZWN0JyAhPT0gdHlwZSAmJiAnc3RyaW5nJyAhPT0gdHlwZSkge1xuICAgIHBhcnNlciA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwYXJzZXIgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHBhcnNlcikgcGFyc2VyID0gcXMucGFyc2U7XG5cbiAgbG9jYXRpb24gPSBsb2xjYXRpb24obG9jYXRpb24pO1xuXG4gIC8vXG4gIC8vIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gYmVmb3JlIHJ1bm5pbmcgdGhlIGluc3RydWN0aW9ucy5cbiAgLy9cbiAgZXh0cmFjdGVkID0gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MgfHwgJycpO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKCFleHRyYWN0ZWQuc2xhc2hlcykgaW5zdHJ1Y3Rpb25zWzNdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG5cbiAgZm9yICg7IGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uc1tpXTtcblxuICAgIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFkZHJlc3MgPSBpbnN0cnVjdGlvbihhZGRyZXNzKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHBhcnNlID0gaW5zdHJ1Y3Rpb25bMF07XG4gICAga2V5ID0gaW5zdHJ1Y3Rpb25bMV07XG5cbiAgICBpZiAocGFyc2UgIT09IHBhcnNlKSB7XG4gICAgICB1cmxba2V5XSA9IGFkZHJlc3M7XG4gICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHBhcnNlKSB7XG4gICAgICBpZiAofihpbmRleCA9IGFkZHJlc3MuaW5kZXhPZihwYXJzZSkpKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGluc3RydWN0aW9uWzJdKSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZShpbmRleCArIGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGluZGV4ID0gcGFyc2UuZXhlYyhhZGRyZXNzKSkpIHtcbiAgICAgIHVybFtrZXldID0gaW5kZXhbMV07XG4gICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleC5pbmRleCk7XG4gICAgfVxuXG4gICAgdXJsW2tleV0gPSB1cmxba2V5XSB8fCAoXG4gICAgICByZWxhdGl2ZSAmJiBpbnN0cnVjdGlvblszXSA/IGxvY2F0aW9uW2tleV0gfHwgJycgOiAnJ1xuICAgICk7XG5cbiAgICAvL1xuICAgIC8vIEhvc3RuYW1lLCBob3N0IGFuZCBwcm90b2NvbCBzaG91bGQgYmUgbG93ZXJjYXNlZCBzbyB0aGV5IGNhbiBiZSB1c2VkIHRvXG4gICAgLy8gY3JlYXRlIGEgcHJvcGVyIGBvcmlnaW5gLlxuICAgIC8vXG4gICAgaWYgKGluc3RydWN0aW9uWzRdKSB1cmxba2V5XSA9IHVybFtrZXldLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvL1xuICAvLyBBbHNvIHBhcnNlIHRoZSBzdXBwbGllZCBxdWVyeSBzdHJpbmcgaW4gdG8gYW4gb2JqZWN0LiBJZiB3ZSdyZSBzdXBwbGllZFxuICAvLyB3aXRoIGEgY3VzdG9tIHBhcnNlciBhcyBmdW5jdGlvbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJ1aWxkLWluXG4gIC8vIHBhcnNlci5cbiAgLy9cbiAgaWYgKHBhcnNlcikgdXJsLnF1ZXJ5ID0gcGFyc2VyKHVybC5xdWVyeSk7XG5cbiAgLy9cbiAgLy8gSWYgdGhlIFVSTCBpcyByZWxhdGl2ZSwgcmVzb2x2ZSB0aGUgcGF0aG5hbWUgYWdhaW5zdCB0aGUgYmFzZSBVUkwuXG4gIC8vXG4gIGlmIChcbiAgICAgIHJlbGF0aXZlXG4gICAgJiYgbG9jYXRpb24uc2xhc2hlc1xuICAgICYmIHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJ1xuICAgICYmICh1cmwucGF0aG5hbWUgIT09ICcnIHx8IGxvY2F0aW9uLnBhdGhuYW1lICE9PSAnJylcbiAgKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gcmVzb2x2ZSh1cmwucGF0aG5hbWUsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIHNob3VsZCBub3QgYWRkIHBvcnQgbnVtYmVycyBpZiB0aGV5IGFyZSBhbHJlYWR5IHRoZSBkZWZhdWx0IHBvcnQgbnVtYmVyXG4gIC8vIGZvciBhIGdpdmVuIHByb3RvY29sLiBBcyB0aGUgaG9zdCBhbHNvIGNvbnRhaW5zIHRoZSBwb3J0IG51bWJlciB3ZSdyZSBnb2luZ1xuICAvLyBvdmVycmlkZSBpdCB3aXRoIHRoZSBob3N0bmFtZSB3aGljaCBjb250YWlucyBubyBwb3J0IG51bWJlci5cbiAgLy9cbiAgaWYgKCFyZXF1aXJlZCh1cmwucG9ydCwgdXJsLnByb3RvY29sKSkge1xuICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgIHVybC5wb3J0ID0gJyc7XG4gIH1cblxuICAvL1xuICAvLyBQYXJzZSBkb3duIHRoZSBgYXV0aGAgZm9yIHRoZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQuXG4gIC8vXG4gIHVybC51c2VybmFtZSA9IHVybC5wYXNzd29yZCA9ICcnO1xuICBpZiAodXJsLmF1dGgpIHtcbiAgICBpbnN0cnVjdGlvbiA9IHVybC5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgdXJsLnVzZXJuYW1lID0gaW5zdHJ1Y3Rpb25bMF0gfHwgJyc7XG4gICAgdXJsLnBhc3N3b3JkID0gaW5zdHJ1Y3Rpb25bMV0gfHwgJyc7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIC8vXG4gIC8vIFRoZSBocmVmIGlzIGp1c3QgdGhlIGNvbXBpbGVkIHJlc3VsdC5cbiAgLy9cbiAgdXJsLmhyZWYgPSB1cmwudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgY2hhbmdpbmcgcHJvcGVydGllcyBpbiB0aGUgVVJMIGluc3RhbmNlIHRvXG4gKiBpbnN1cmUgdGhhdCB0aGV5IGFsbCBwcm9wYWdhdGUgY29ycmVjdGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJ0ICAgICAgICAgIFByb3BlcnR5IHdlIG5lZWQgdG8gYWRqdXN0LlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgICAgICAgICAgVGhlIG5ld2x5IGFzc2lnbmVkIHZhbHVlLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBmbiAgV2hlbiBzZXR0aW5nIHRoZSBxdWVyeSwgaXQgd2lsbCBiZSB0aGUgZnVuY3Rpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgdG8gcGFyc2UgdGhlIHF1ZXJ5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiBzZXR0aW5nIHRoZSBwcm90b2NvbCwgZG91YmxlIHNsYXNoIHdpbGwgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgZnJvbSB0aGUgZmluYWwgdXJsIGlmIGl0IGlzIHRydWUuXG4gKiBAcmV0dXJucyB7VVJMfSBVUkwgaW5zdGFuY2UgZm9yIGNoYWluaW5nLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBzZXQocGFydCwgdmFsdWUsIGZuKSB7XG4gIHZhciB1cmwgPSB0aGlzO1xuXG4gIHN3aXRjaCAocGFydCkge1xuICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IChmbiB8fCBxcy5wYXJzZSkodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncG9ydCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKCFyZXF1aXJlZCh2YWx1ZSwgdXJsLnByb3RvY29sKSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICAgICAgdXJsW3BhcnRdID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lICsnOicrIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3RuYW1lJzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAodXJsLnBvcnQpIHZhbHVlICs9ICc6JysgdXJsLnBvcnQ7XG4gICAgICB1cmwuaG9zdCA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoLzpcXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgICB1cmwucG9ydCA9IHZhbHVlLnBvcCgpO1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZS5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwuaG9zdG5hbWUgPSB2YWx1ZTtcbiAgICAgICAgdXJsLnBvcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcm90b2NvbCc6XG4gICAgICB1cmwucHJvdG9jb2wgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdXJsLnNsYXNoZXMgPSAhZm47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhdGhuYW1lJzpcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2hhciA9IHBhcnQgPT09ICdwYXRobmFtZScgPyAnLycgOiAnIyc7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlLmNoYXJBdCgwKSAhPT0gY2hhciA/IGNoYXIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zID0gcnVsZXNbaV07XG5cbiAgICBpZiAoaW5zWzRdKSB1cmxbaW5zWzFdXSA9IHVybFtpbnNbMV1dLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICYmIHVybC5ob3N0ICYmIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgYmFjayBpbiB0byBhIHZhbGlkIGFuZCBmdWxsIFVSTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5naWZ5IE9wdGlvbmFsIHF1ZXJ5IHN0cmluZ2lmeSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IENvbXBpbGVkIHZlcnNpb24gb2YgdGhlIFVSTC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPSBwcm90b2NvbCArICh1cmwuc2xhc2hlcyA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH1cblxuICByZXN1bHQgKz0gdXJsLmhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VcmwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVXJsLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVybC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVybC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuVXJsLnFzID0gcXM7XG5cbm1vZHVsZS5leHBvcnRzID0gVXJsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIHJlcXVpcmVkIHRvIGFkZCBhIHBvcnQgbnVtYmVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkZWZhdWx0LXBvcnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcG9ydCBQb3J0IG51bWJlciB3ZSBuZWVkIHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgd2UgbmVlZCB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IElzIGl0IGEgZGVmYXVsdCBwb3J0IGZvciB0aGUgZ2l2ZW4gcHJvdG9jb2xcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVkKHBvcnQsIHByb3RvY29sKSB7XG4gIHByb3RvY29sID0gcHJvdG9jb2wuc3BsaXQoJzonKVswXTtcbiAgcG9ydCA9ICtwb3J0O1xuXG4gIGlmICghcG9ydCkgcmV0dXJuIGZhbHNlO1xuXG4gIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICBjYXNlICdodHRwJzpcbiAgICBjYXNlICd3cyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDgwO1xuXG4gICAgY2FzZSAnaHR0cHMnOlxuICAgIGNhc2UgJ3dzcyc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDQ0MztcblxuICAgIGNhc2UgJ2Z0cCc6XG4gICAgcmV0dXJuIHBvcnQgIT09IDIxO1xuXG4gICAgY2FzZSAnZ29waGVyJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNzA7XG5cbiAgICBjYXNlICdmaWxlJzpcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcG9ydCAhPT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgdW5kZWY7XG5cbi8qKlxuICogRGVjb2RlIGEgVVJJIGVuY29kZWQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgVVJJIGVuY29kZWQgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dC5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGVuY29kZSBhIGdpdmVuIGlucHV0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgZW5jb2RlZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGVuY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBTaW1wbGUgcXVlcnkgc3RyaW5nIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHF1ZXJ5IHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIHBhcnNlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZyhxdWVyeSkge1xuICB2YXIgcGFyc2VyID0gLyhbXj0/Jl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICB3aGlsZSAocGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KSkge1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydFsxXSlcbiAgICAgICwgdmFsdWUgPSBkZWNvZGUocGFydFsyXSk7XG5cbiAgICAvL1xuICAgIC8vIFByZXZlbnQgb3ZlcnJpZGluZyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBidWlsZC1pblxuICAgIC8vIG1ldGhvZHMgbGlrZSBgdG9TdHJpbmdgIG9yIF9fcHJvdG9fXyBhcmUgbm90IG92ZXJyaWRlbiBieSBtYWxpY2lvdXNcbiAgICAvLyBxdWVyeXN0cmluZ3MuXG4gICAgLy9cbiAgICAvLyBJbiB0aGUgY2FzZSBpZiBmYWlsZWQgZGVjb2RpbmcsIHdlIHdhbnQgdG8gb21pdCB0aGUga2V5L3ZhbHVlIHBhaXJzXG4gICAgLy8gZnJvbSB0aGUgcmVzdWx0LlxuICAgIC8vXG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdXG4gICAgLCB2YWx1ZVxuICAgICwga2V5O1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIC8vXG4gICAgICAvLyBFZGdlIGNhc2VzIHdoZXJlIHdlIGFjdHVhbGx5IHdhbnQgdG8gZW5jb2RlIHRoZSB2YWx1ZSB0byBhbiBlbXB0eVxuICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgLy9cbiAgICAgIGlmICghdmFsdWUgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZiB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGVuY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICAgICAgdmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcGFpcnMucHVzaChrZXkgKyc9JysgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGF1dGg7XG5cbnZhciBfcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cbnZhciBfcXVlcnlzdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVlcnlzdHJpbmcpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGF1dGgoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRBdXRoZW50aWNhdGlvblVybDogZnVuY3Rpb24gZ2V0QXV0aGVudGljYXRpb25VcmwoKSB7XG4gICAgICB2YXIgc2NvcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtcInB1YmxpY1wiXTtcblxuICAgICAgdmFyIHF1ZXJ5c3RyaW5ncyA9IF9xdWVyeXN0cmluZzIuZGVmYXVsdC5zdHJpbmdpZnkoe1xuICAgICAgICBjbGllbnRfaWQ6IF90aGlzLl9hY2Nlc3NLZXksXG4gICAgICAgIHJlZGlyZWN0X3VyaTogX3RoaXMuX2NhbGxiYWNrVXJsLFxuICAgICAgICByZXNwb25zZV90eXBlOiBcImNvZGVcIixcbiAgICAgICAgc2NvcGU6IHNjb3BlLmxlbmd0aCA+IDEgPyBzY29wZS5qb2luKFwiK1wiKSA6IHNjb3BlLnRvU3RyaW5nKClcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KF9jb25zdGFudHMuT0FVVEhfQVVUSE9SSVpFX1VSTCArIFwiP1wiICsgcXVlcnlzdHJpbmdzKTtcbiAgICB9LFxuXG4gICAgdXNlckF1dGhlbnRpY2F0aW9uOiBmdW5jdGlvbiB1c2VyQXV0aGVudGljYXRpb24oY29kZSkge1xuICAgICAgdmFyIHVybCA9IF9jb25zdGFudHMuT0FVVEhfVE9LRU5fVVJMO1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgY2xpZW50X2lkOiBfdGhpcy5fYWNjZXNzS2V5LFxuICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IF90aGlzLl9zZWNyZXQsXG4gICAgICAgICAgcmVkaXJlY3RfdXJpOiBfdGhpcy5fY2FsbGJhY2tVcmwsXG4gICAgICAgICAgZ3JhbnRfdHlwZTogXCJhdXRob3JpemF0aW9uX2NvZGVcIixcbiAgICAgICAgICBjb2RlOiBjb2RlXG4gICAgICAgIH0sXG4gICAgICAgIG9hdXRoOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0QmVhcmVyVG9rZW46IGZ1bmN0aW9uIHNldEJlYXJlclRva2VuKGFjY2Vzc1Rva2VuKSB7XG4gICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgX3RoaXMuX2JlYXJlclRva2VuID0gYWNjZXNzVG9rZW47XG4gICAgICB9XG4gICAgfVxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3VycmVudFVzZXI7XG5mdW5jdGlvbiBjdXJyZW50VXNlcigpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICByZXR1cm4ge1xuICAgIHByb2ZpbGU6IGZ1bmN0aW9uIHByb2ZpbGUoKSB7XG4gICAgICB2YXIgdXJsID0gXCIvbWVcIjtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgdXBkYXRlUHJvZmlsZTogZnVuY3Rpb24gdXBkYXRlUHJvZmlsZSgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgdmFyIGVuZHBvaW50VXJsID0gXCIvbWVcIjtcblxuICAgICAgdmFyIHVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZSxcbiAgICAgICAgICBmaXJzdE5hbWUgPSBvcHRpb25zLmZpcnN0TmFtZSxcbiAgICAgICAgICBsYXN0TmFtZSA9IG9wdGlvbnMubGFzdE5hbWUsXG4gICAgICAgICAgZW1haWwgPSBvcHRpb25zLmVtYWlsLFxuICAgICAgICAgIHVybCA9IG9wdGlvbnMudXJsLFxuICAgICAgICAgIGxvY2F0aW9uID0gb3B0aW9ucy5sb2NhdGlvbixcbiAgICAgICAgICBiaW8gPSBvcHRpb25zLmJpbyxcbiAgICAgICAgICBpbnN0YWdyYW1Vc2VybmFtZSA9IG9wdGlvbnMuaW5zdGFncmFtVXNlcm5hbWU7XG5cblxuICAgICAgdmFyIGJvZHkgPSB7XG4gICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lLFxuICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lLFxuICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGJpbzogYmlvLFxuICAgICAgICBpbnN0YWdyYW1fdXNlcm5hbWU6IGluc3RhZ3JhbVVzZXJuYW1lXG4gICAgICB9O1xuXG4gICAgICBPYmplY3Qua2V5cyhib2R5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFib2R5W2tleV0pIHtcbiAgICAgICAgICBkZWxldGUgYm9keVtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGVuZHBvaW50VXJsLFxuICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgIGJvZHk6IGJvZHlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZXJzO1xuZnVuY3Rpb24gdXNlcnMoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9maWxlOiBmdW5jdGlvbiBwcm9maWxlKHVzZXJuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gXCIvdXNlcnMvXCIgKyB1c2VybmFtZTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgcGhvdG9zOiBmdW5jdGlvbiBwaG90b3ModXNlcm5hbWUpIHtcbiAgICAgIHZhciBwYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICAgICAgdmFyIHBlclBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEwO1xuICAgICAgdmFyIG9yZGVyQnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFwibGF0ZXN0XCI7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICAgIHZhciBzdGF0cyA9IG9wdGlvbnMuc3RhdHMgfHwgZmFsc2U7XG4gICAgICB2YXIgdXJsID0gXCIvdXNlcnMvXCIgKyB1c2VybmFtZSArIFwiL3Bob3Rvc1wiO1xuICAgICAgdmFyIHF1ZXJ5ID0ge1xuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICBwZXJfcGFnZTogcGVyUGFnZSxcbiAgICAgICAgb3JkZXJfYnk6IG9yZGVyQnksXG4gICAgICAgIG9yaWVudGF0aW9uOiBvcHRpb25zLm9yaWVudGF0aW9uLFxuICAgICAgICBzdGF0czogc3RhdHNcbiAgICAgIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFxdWVyeVtrZXldKSB7XG4gICAgICAgICAgZGVsZXRlIHF1ZXJ5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGxpa2VzOiBmdW5jdGlvbiBsaWtlcyh1c2VybmFtZSkge1xuICAgICAgdmFyIHBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgICB2YXIgcGVyUGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7XG4gICAgICB2YXIgb3JkZXJCeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogXCJsYXRlc3RcIjtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7fTtcblxuICAgICAgdmFyIHVybCA9IFwiL3VzZXJzL1wiICsgdXNlcm5hbWUgKyBcIi9saWtlc1wiO1xuICAgICAgdmFyIHF1ZXJ5ID0ge1xuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICBwZXJfcGFnZTogcGVyUGFnZSxcbiAgICAgICAgb3JkZXJfYnk6IG9yZGVyQnksXG4gICAgICAgIG9yaWVudGF0aW9uOiBvcHRpb25zLm9yaWVudGF0aW9uXG4gICAgICB9O1xuXG4gICAgICBPYmplY3Qua2V5cyhxdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghcXVlcnlba2V5XSkge1xuICAgICAgICAgIGRlbGV0ZSBxdWVyeVtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBjb2xsZWN0aW9uczogZnVuY3Rpb24gY29sbGVjdGlvbnModXNlcm5hbWUpIHtcbiAgICAgIHZhciBwYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICAgICAgdmFyIHBlclBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEwO1xuICAgICAgdmFyIG9yZGVyQnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFwicHVibGlzaGVkXCI7XG5cbiAgICAgIHZhciB1cmwgPSBcIi91c2Vycy9cIiArIHVzZXJuYW1lICsgXCIvY29sbGVjdGlvbnNcIjtcbiAgICAgIHZhciBxdWVyeSA9IHtcbiAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgcGVyX3BhZ2U6IHBlclBhZ2UsXG4gICAgICAgIG9yZGVyX2J5OiBvcmRlckJ5XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHN0YXRpc3RpY3M6IGZ1bmN0aW9uIHN0YXRpc3RpY3ModXNlcm5hbWUpIHtcbiAgICAgIHZhciByZXNvbHV0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcImRheXNcIjtcbiAgICAgIHZhciBxdWFudGl0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzA7XG5cbiAgICAgIHZhciB1cmwgPSBcIi91c2Vycy9cIiArIHVzZXJuYW1lICsgXCIvc3RhdGlzdGljc1wiO1xuICAgICAgdmFyIHF1ZXJ5ID0ge1xuICAgICAgICByZXNvbHV0aW9uOiByZXNvbHV0aW9uLFxuICAgICAgICBxdWFudGl0eTogcXVhbnRpdHlcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwaG90b3M7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfbG9kYXNoID0gcmVxdWlyZShcImxvZGFzaC5nZXRcIik7XG5cbnZhciBfbG9kYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZGFzaCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHBob3RvcygpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICByZXR1cm4ge1xuICAgIGxpc3RQaG90b3M6IGZ1bmN0aW9uIGxpc3RQaG90b3MoKSB7XG4gICAgICB2YXIgcGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcbiAgICAgIHZhciBwZXJQYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMDtcbiAgICAgIHZhciBvcmRlckJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcImxhdGVzdFwiO1xuXG4gICAgICB2YXIgdXJsID0gXCIvcGhvdG9zXCI7XG4gICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgIHBlcl9wYWdlOiBwZXJQYWdlLFxuICAgICAgICBvcmRlcl9ieTogb3JkZXJCeVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRQaG90bzogZnVuY3Rpb24gZ2V0UGhvdG8oaWQpIHtcbiAgICAgIHZhciB1cmwgPSBcIi9waG90b3MvXCIgKyBpZDtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0UGhvdG9TdGF0czogZnVuY3Rpb24gZ2V0UGhvdG9TdGF0cyhpZCkge1xuICAgICAgdmFyIHVybCA9IFwiL3Bob3Rvcy9cIiArIGlkICsgXCIvc3RhdGlzdGljc1wiO1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCJcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRSYW5kb21QaG90bzogZnVuY3Rpb24gZ2V0UmFuZG9tUGhvdG8oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgIHZhciB1cmwgPSBcIi9waG90b3MvcmFuZG9tXCI7XG4gICAgICB2YXIgY29sbGVjdGlvbnMgPSBvcHRpb25zLmNvbGxlY3Rpb25zIHx8IFtdO1xuXG4gICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgIGZlYXR1cmVkOiBvcHRpb25zLmZlYXR1cmVkLFxuICAgICAgICB1c2VybmFtZTogb3B0aW9ucy51c2VybmFtZSxcbiAgICAgICAgb3JpZW50YXRpb246IG9wdGlvbnMub3JpZW50YXRpb24sXG4gICAgICAgIGNvbGxlY3Rpb25zOiBjb2xsZWN0aW9ucy5qb2luKCksXG4gICAgICAgIHF1ZXJ5OiBvcHRpb25zLnF1ZXJ5LFxuICAgICAgICBjOiBvcHRpb25zLmNhY2hlQnVzdGVyIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCAvLyBBdm9pZCBhamF4IHJlc3BvbnNlIGNhY2hpbmdcbiAgICAgICAgY291bnQ6IG9wdGlvbnMuY291bnRcbiAgICAgIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFxdWVyeVtrZXldKSB7XG4gICAgICAgICAgZGVsZXRlIHF1ZXJ5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGxpa2VQaG90bzogZnVuY3Rpb24gbGlrZVBob3RvKGlkKSB7XG4gICAgICBpZiAoIV90aGlzLl9iZWFyZXJUb2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1aXJlcyBhIGJlYXJlclRva2VuIHRvIGJlIHNldC5cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciB1cmwgPSBcIi9waG90b3MvXCIgKyBpZCArIFwiL2xpa2VcIjtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIlxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHVubGlrZVBob3RvOiBmdW5jdGlvbiB1bmxpa2VQaG90byhpZCkge1xuICAgICAgaWYgKCFfdGhpcy5fYmVhcmVyVG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWlyZXMgYSBiZWFyZXJUb2tlbiB0byBiZSBzZXQuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdXJsID0gXCIvcGhvdG9zL1wiICsgaWQgKyBcIi9saWtlXCI7XG5cbiAgICAgIHJldHVybiBfdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIlxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIERlcHJlY2F0ZWQgaW4gNi4yXG4gICAgZG93bmxvYWRQaG90bzogdHJhY2suYmluZCh0aGlzKSxcblxuICAgIHRyYWNrRG93bmxvYWQ6IHRyYWNrLmJpbmQodGhpcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhY2socGhvdG8pIHtcbiAgdmFyIGRvd25sb2FkTG9jYXRpb24gPSAoMCwgX2xvZGFzaDIuZGVmYXVsdCkocGhvdG8sIFwibGlua3MuZG93bmxvYWRfbG9jYXRpb25cIiwgdW5kZWZpbmVkKTtcblxuICBpZiAoZG93bmxvYWRMb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0IHJlY2VpdmVkIGlzIG5vdCBhIHBob3RvLiBcIiArIHBob3RvKTtcbiAgfVxuXG4gIHZhciB1cmxDb21wb25lbnRzID0gKDAsIF91dGlscy5nZXRVcmxDb21wb25lbnRzKShkb3dubG9hZExvY2F0aW9uKTtcblxuICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICB1cmw6IHVybENvbXBvbmVudHMucGF0aG5hbWUsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIHF1ZXJ5OiB1cmxDb21wb25lbnRzLnF1ZXJ5XG4gIH0pO1xufSIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgIHJlTGVhZGluZ0RvdCA9IC9eXFwuLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ1RvUGF0aCh2YWx1ZSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZShmdW5jdGlvbihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gQXNzaWduIGNhY2hlIHRvIGBfLm1lbW9pemVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29sbGVjdGlvbnM7XG5mdW5jdGlvbiBjb2xsZWN0aW9ucygpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICByZXR1cm4ge1xuICAgIGxpc3RDb2xsZWN0aW9uczogZnVuY3Rpb24gbGlzdENvbGxlY3Rpb25zKCkge1xuICAgICAgdmFyIHBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG4gICAgICB2YXIgcGVyUGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTA7XG5cbiAgICAgIHZhciB1cmwgPSBcIi9jb2xsZWN0aW9uc1wiO1xuXG4gICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgIHBlcl9wYWdlOiBwZXJQYWdlLFxuICAgICAgICBwYWdlOiBwYWdlXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldENvbGxlY3Rpb246IGNvbGxlY3Rpb24uYmluZCh0aGlzKSxcblxuICAgIGdldENvbGxlY3Rpb25QaG90b3M6IGNvbGxlY3Rpb25QaG90b3MuYmluZCh0aGlzKSxcblxuICAgIGNyZWF0ZUNvbGxlY3Rpb246IGNyZWF0ZVVwZGF0ZUNvbGxlY3Rpb24uYmluZCh0aGlzLCBudWxsKSxcblxuICAgIHVwZGF0ZUNvbGxlY3Rpb246IGNyZWF0ZVVwZGF0ZUNvbGxlY3Rpb24uYmluZCh0aGlzKSxcblxuICAgIGRlbGV0ZUNvbGxlY3Rpb246IGZ1bmN0aW9uIGRlbGV0ZUNvbGxlY3Rpb24oaWQpIHtcbiAgICAgIHZhciB1cmwgPSBcIi9jb2xsZWN0aW9ucy9cIiArIGlkO1xuXG4gICAgICByZXR1cm4gX3RoaXMucmVxdWVzdCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCJcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBhZGRQaG90b1RvQ29sbGVjdGlvbjogZnVuY3Rpb24gYWRkUGhvdG9Ub0NvbGxlY3Rpb24oY29sbGVjdGlvbklkLCBwaG90b0lkKSB7XG4gICAgICB2YXIgdXJsID0gXCIvY29sbGVjdGlvbnMvXCIgKyBjb2xsZWN0aW9uSWQgKyBcIi9hZGRcIjtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIHBob3RvX2lkOiBwaG90b0lkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW1vdmVQaG90b0Zyb21Db2xsZWN0aW9uOiBmdW5jdGlvbiByZW1vdmVQaG90b0Zyb21Db2xsZWN0aW9uKGNvbGxlY3Rpb25JZCwgcGhvdG9JZCkge1xuICAgICAgdmFyIHVybCA9IFwiL2NvbGxlY3Rpb25zL1wiICsgY29sbGVjdGlvbklkICsgXCIvcmVtb3ZlP3Bob3RvX2lkPVwiICsgcGhvdG9JZDtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgbGlzdFJlbGF0ZWRDb2xsZWN0aW9uczogZnVuY3Rpb24gbGlzdFJlbGF0ZWRDb2xsZWN0aW9ucyhjb2xsZWN0aW9uSWQpIHtcbiAgICAgIHZhciB1cmwgPSBcIi9jb2xsZWN0aW9ucy9cIiArIGNvbGxlY3Rpb25JZCArIFwiL3JlbGF0ZWRcIjtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb24oaWQpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgdXJsOiBcIi9jb2xsZWN0aW9ucy9cIiArIGlkLFxuICAgIG1ldGhvZDogXCJHRVRcIlxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvblBob3RvcyhpZCkge1xuICB2YXIgcGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgdmFyIHBlclBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEwO1xuICB2YXIgb3JkZXJCeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogXCJsYXRlc3RcIjtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gIHZhciBxdWVyeSA9IHtcbiAgICBwZXJfcGFnZTogcGVyUGFnZSxcbiAgICBvcmRlcl9ieTogb3JkZXJCeSxcbiAgICBvcmllbnRhdGlvbjogb3B0aW9ucy5vcmllbnRhdGlvbixcbiAgICBwYWdlOiBwYWdlXG4gIH07XG5cbiAgT2JqZWN0LmtleXMocXVlcnkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghcXVlcnlba2V5XSkge1xuICAgICAgZGVsZXRlIHF1ZXJ5W2tleV07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICB1cmw6IFwiL2NvbGxlY3Rpb25zL1wiICsgaWQgKyBcIi9waG90b3NcIixcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVcGRhdGVDb2xsZWN0aW9uKGlkLCB0aXRsZSwgZGVzY3JpcHRpb24sIGlzUHJpdmF0ZSkge1xuICB2YXIgdXJsID0gaWQgPyBcIi9jb2xsZWN0aW9ucy9cIiArIGlkIDogXCIvY29sbGVjdGlvbnNcIjtcbiAgdmFyIGJvZHkgPSB7XG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICBcInByaXZhdGVcIjogaXNQcml2YXRlXG4gIH07XG5cbiAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgdXJsOiB1cmwsXG4gICAgbWV0aG9kOiBpZCA/IFwiUFVUXCIgOiBcIlBPU1RcIixcbiAgICBib2R5OiBib2R5XG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2VhcmNoO1xuZnVuY3Rpb24gc2VhcmNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHJldHVybiB7XG4gICAgcGhvdG9zOiBmdW5jdGlvbiBwaG90b3MoKSB7XG4gICAgICB2YXIga2V5d29yZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgICAgIHZhciBwYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICAgICAgdmFyIHBlclBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDEwO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuXG4gICAgICB2YXIgY29sbGVjdGlvbnMgPSBvcHRpb25zLmNvbGxlY3Rpb25zIHx8IFtdO1xuICAgICAgdmFyIHF1ZXJ5ID0ge1xuICAgICAgICBxdWVyeTogZW5jb2RlVVJJQ29tcG9uZW50KGtleXdvcmQpLFxuICAgICAgICBwZXJfcGFnZTogcGVyUGFnZSxcbiAgICAgICAgb3JpZW50YXRpb246IG9wdGlvbnMub3JpZW50YXRpb24sXG4gICAgICAgIGNvbnRlbnRfZmlsdGVyOiBvcHRpb25zLmNvbnRlbnRGaWx0ZXIsXG4gICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICBvcmRlcl9ieTogb3B0aW9ucy5vcmRlckJ5LFxuICAgICAgICBsYW5nOiBvcHRpb25zLmxhbmcsXG4gICAgICAgIGNvbGxlY3Rpb25zOiBjb2xsZWN0aW9ucy5qb2luKCksXG4gICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFxdWVyeVtrZXldICYmIGtleSAhPSBcInF1ZXJ5XCIpIHtcbiAgICAgICAgICBkZWxldGUgcXVlcnlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBcIi9zZWFyY2gvcGhvdG9zXCIsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgdXNlcnM6IGZ1bmN0aW9uIHVzZXJzKCkge1xuICAgICAgdmFyIGtleXdvcmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiXCI7XG4gICAgICB2YXIgcGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgICAgIHZhciBwZXJQYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxMDtcblxuICAgICAgdmFyIHF1ZXJ5ID0ge1xuICAgICAgICBxdWVyeTogZW5jb2RlVVJJQ29tcG9uZW50KGtleXdvcmQpLFxuICAgICAgICBwZXJfcGFnZTogcGVyUGFnZSxcbiAgICAgICAgcGFnZTogcGFnZVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IFwiL3NlYXJjaC91c2Vyc1wiLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGNvbGxlY3Rpb25zOiBmdW5jdGlvbiBjb2xsZWN0aW9ucygpIHtcbiAgICAgIHZhciBrZXl3b3JkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIlwiO1xuICAgICAgdmFyIHBhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgICB2YXIgcGVyUGFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7XG5cbiAgICAgIHZhciBxdWVyeSA9IHtcbiAgICAgICAgcXVlcnk6IGVuY29kZVVSSUNvbXBvbmVudChrZXl3b3JkKSxcbiAgICAgICAgcGVyX3BhZ2U6IHBlclBhZ2UsXG4gICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBcIi9zZWFyY2gvY29sbGVjdGlvbnNcIixcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXRzO1xuZnVuY3Rpb24gc3RhdHMoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3RhbDogZnVuY3Rpb24gdG90YWwoKSB7XG4gICAgICB2YXIgdXJsID0gXCIvc3RhdHMvdG90YWxcIjtcblxuICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3Qoe1xuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jYXJkTGlzdF9fbWFpbkNvbnRhaW5lci0tM0RqUW0ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBwYWRkaW5nOiAyMHB4IDEwcHg7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxufVxcclxcbi5jYXJkTGlzdF9fY2VudHJhbENvbnRhaW5lci0tRmJsSjYge1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMjRweDtcXHJcXG59XFxyXFxuLmNhcmRMaXN0X19jYXJkTGlzdC0tMm52ZEMge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uY2FyZExpc3RfX2xvYWRlci0tMzlDTTcge1xcclxcbiAgICB3aWR0aDoxMDBweDtcXHJcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxyXFxuICAgIHRvcDo0OCU7XFxyXFxuICAgIGxlZnQ6NDclO1xcclxcbn1cXHJcXG4uY2FyZExpc3RfX2J1dHRvbi0tMXBPT0sge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgIHBhZGRpbmc6MTBweDtcXHJcXG59XFxyXFxuLmNhcmRMaXN0X19idXR0b24tLTFwT09LOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTU0MHB4KSB7XFxyXFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJtYWluQ29udGFpbmVyXCI6IFwiY2FyZExpc3RfX21haW5Db250YWluZXItLTNEalFtXCIsXG5cdFwiY2VudHJhbENvbnRhaW5lclwiOiBcImNhcmRMaXN0X19jZW50cmFsQ29udGFpbmVyLS1GYmxKNlwiLFxuXHRcImNhcmRMaXN0XCI6IFwiY2FyZExpc3RfX2NhcmRMaXN0LS0ybnZkQ1wiLFxuXHRcImxvYWRlclwiOiBcImNhcmRMaXN0X19sb2FkZXItLTM5Q003XCIsXG5cdFwiYnV0dG9uXCI6IFwiY2FyZExpc3RfX2J1dHRvbi0tMXBPT0tcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2FyZC1fX2NhcmQtLTEyTGpUIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDVweCByZ2JhKDAsMCwwLDAuNSkgO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XFxyXFxuICAgIG1hcmdpbjogMCAwIDIwcHggMDtcXHJcXG4gICAgLypwb3NpdGlvbjogcmVsYXRpdmU7ISpmb3IgZXhpdCBidXR0b24qISovXFxyXFxuICAgIHdpZHRoOiAzMiU7XFxyXFxuICAgIG1pbi1oZWlnaHQ6MzkwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5jYXJkLV9fbG9hZE1vcmVDb250YWluZXItLTNFRGxyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxufVxcclxcblxcclxcbi5jYXJkLV9fbG9hZE1vcmVDb250YWluZXItLTNFRGxyOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOnBvaW50ZXI7XFxyXFxuICAgIGNvbG9yOm9yYW5nZTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcmQtX19sb2FkTW9yZUNvbnRhaW5lci0tM0VEbHI6aG92ZXIgc3BhbntcXHJcXG4gICAgY29sb3I6b3JhbmdlO1xcclxcbn1cXHJcXG5cXHJcXG4uY2FyZC1fX2xvYWRNb3JlVGV4dC0tM3Z0aW8ge1xcclxcbiAgICBjb2xvcjp3aGl0ZTtcXHJcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICBmb250LWZhbWlseTogUm9ib3RvO1xcclxcbn1cXHJcXG4uY2FyZC1fX2xvYWRlci0tMm04SXgge1xcclxcbiAgICBtYXJnaW46IDIwMHB4O1xcclxcbiAgICB3aWR0aDoxMDBweDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XFxyXFxuICAgIC5jYXJkLV9fY2FyZC0tMTJMalQge1xcclxcbiAgICAgICAgd2lkdGg6IDQ5JTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWF4LXdpZHRoOiA3NjNweCkge1xcclxcbiAgICAuY2FyZC1fX2NhcmQtLTEyTGpUIHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJjYXJkXCI6IFwiY2FyZC1fX2NhcmQtLTEyTGpUXCIsXG5cdFwibG9hZE1vcmVDb250YWluZXJcIjogXCJjYXJkLV9fbG9hZE1vcmVDb250YWluZXItLTNFRGxyXCIsXG5cdFwibG9hZE1vcmVUZXh0XCI6IFwiY2FyZC1fX2xvYWRNb3JlVGV4dC0tM3Z0aW9cIixcblx0XCJsb2FkZXJcIjogXCJjYXJkLV9fbG9hZGVyLS0ybThJeFwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb250cm9sc19fY29udHJvbHNDb250YWluZXItLTIxZkRxIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxufVxcclxcblxcclxcbi5jb250cm9sc19fbGlrZXNDb250YWluZXItLTIySi1rIHtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgLyp3aWR0aDogNTBweDsqL1xcclxcblxcclxcbn1cXHJcXG4uY29udHJvbHNfX2xpa2VzVmFsdWUtLTFoVnlxIHtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uY29udHJvbHNfX2Vycm9yQ29udGFpbmVyLS1GWWxQZiB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OjEwcHg7XFxyXFxuICAgIGRpc3BsYXk6ZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbnRyb2xzX19lcnJvclZhbHVlLS1TZnR6YyB7XFxyXFxuICAgIGNvbG9yOiByZWQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLmNvbnRyb2xzX19idXR0b24tLTNKa0haIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OjEwcHg7XFxyXFxuICAgIGJvcmRlcjpub25lO1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uY29udHJvbHNfX2J1dHRvbi0tM0prSFo6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6cG9pbnRlcjtcXHJcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImNvbnRyb2xzQ29udGFpbmVyXCI6IFwiY29udHJvbHNfX2NvbnRyb2xzQ29udGFpbmVyLS0yMWZEcVwiLFxuXHRcImxpa2VzQ29udGFpbmVyXCI6IFwiY29udHJvbHNfX2xpa2VzQ29udGFpbmVyLS0yMkota1wiLFxuXHRcImxpa2VzVmFsdWVcIjogXCJjb250cm9sc19fbGlrZXNWYWx1ZS0tMWhWeXFcIixcblx0XCJlcnJvckNvbnRhaW5lclwiOiBcImNvbnRyb2xzX19lcnJvckNvbnRhaW5lci0tRllsUGZcIixcblx0XCJlcnJvclZhbHVlXCI6IFwiY29udHJvbHNfX2Vycm9yVmFsdWUtLVNmdHpjXCIsXG5cdFwiYnV0dG9uXCI6IFwiY29udHJvbHNfX2J1dHRvbi0tM0prSFpcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaW5mb19faW5mb0NvbnRhaW5lci0tWWRuZ1Ige1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XFxyXFxuICAgIC8qanVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7Ki9cXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmluZm9fX21ldGFDb250YWluZXItLTM2MEo3IHtcXHJcXG4gICAgLypkaXNwbGF5OiBmbGV4OyovXFxyXFxuICAgIC8qZmxleC1mbG93OiByb3cgbm93cmFwOyovXFxyXFxuICAgIC8qanVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyovXFxyXFxuICAgIC8qbWFyZ2luOiAwIDAgNHB4IDA7Ki9cXHJcXG59XFxyXFxuXFxyXFxuLmluZm9fX3RpdGxlQ29udGFpbmVyLS0zWTNteCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDE5cHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIG1hcmdpbjogMTBweCAwIDAgMDtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgLyotd2Via2l0LWxpbmUtY2xhbXA6IDI7ISrRgdGC0YDQvtC60LAg0YEgM9C80Y8g0YLQvtGH0LrQsNC80Lgg0LLQutC+0L3RhtC1KiEqL1xcclxcbiAgICAvKi13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7Ki9cXHJcXG4gICAgLypkaXNwbGF5OiAtd2Via2l0LWJveDsqL1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLmluZm9fX3RpdGxlQ29udGFpbmVyLS0zWTNteDpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiBvcmFuZ2U7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJpbmZvQ29udGFpbmVyXCI6IFwiaW5mb19faW5mb0NvbnRhaW5lci0tWWRuZ1JcIixcblx0XCJtZXRhQ29udGFpbmVyXCI6IFwiaW5mb19fbWV0YUNvbnRhaW5lci0tMzYwSjdcIixcblx0XCJ0aXRsZUNvbnRhaW5lclwiOiBcImluZm9fX3RpdGxlQ29udGFpbmVyLS0zWTNteFwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tZXRhZGF0YV9fbWV0YURhdGEtLTNrYUc1IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDE2cHg7XFxyXFxuICAgIC8qd2lkdGg6IDEwMCU7Ki9cXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhX191c2VyTGluay0tM2tvUC0ge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDdweDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxufVxcclxcbi5tZXRhZGF0YV9fdXNlckxpbmstLTNrb1AtOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IG9yYW5nZTtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhX19hdmF0YXItLUQ3Z0dlIHtcXHJcXG4gICAgd2lkdGg6IDIwcHg7XFxyXFxuICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA3cHg7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YV9fdXNlck5hbWUtLTJEcHZne1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5tZXRhZGF0YV9fdXNlck5hbWUtLTJEcHZnOmhvdmVye1xcclxcbiAgICBjb2xvcjogb3JhbmdlO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG59XFxyXFxuXFxyXFxuLm1ldGFkYXRhX19jcmVhdGVkQXQtLTJ5bmZuIHtcXHJcXG4gICAgY29sb3I6ICM5OTk5OTk7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcblxcclxcbi8qQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7Ki9cXHJcXG4vKiAgICAubWV0YURhdGEgeyovXFxyXFxuLyogICAgICAgIGZvbnQtc2l6ZTogMTRweDsqL1xcclxcbi8qICAgICAgICBsaW5lLWhlaWdodDogMTZweDsqL1xcclxcbi8qICAgIH0qL1xcclxcbi8qfSovXFxyXFxuXFxyXFxuLypAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAxNTQwcHgpIHsqL1xcclxcbi8qICAgICEqLnVzZXJMaW5rOmhvdmVyIGEgeyohKi9cXHJcXG4vKiAgICAhKiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsqISovXFxyXFxuLyogICAgISp9KiEqL1xcclxcblxcclxcbi8qICAgIC51c2VybmFtZXsqL1xcclxcbi8qICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7Ki9cXHJcXG4vKiAgICAgICAgei1pbmRleDogMTsqL1xcclxcbi8qICAgIH0qL1xcclxcblxcclxcbi8qfSovXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcIm1ldGFEYXRhXCI6IFwibWV0YWRhdGFfX21ldGFEYXRhLS0za2FHNVwiLFxuXHRcInVzZXJMaW5rXCI6IFwibWV0YWRhdGFfX3VzZXJMaW5rLS0za29QLVwiLFxuXHRcImF2YXRhclwiOiBcIm1ldGFkYXRhX19hdmF0YXItLUQ3Z0dlXCIsXG5cdFwidXNlck5hbWVcIjogXCJtZXRhZGF0YV9fdXNlck5hbWUtLTJEcHZnXCIsXG5cdFwiY3JlYXRlZEF0XCI6IFwibWV0YWRhdGFfX2NyZWF0ZWRBdC0tMnluZm5cIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucHJldmlld19fcHJldmlld0NvbnRhaW5lckJ1dHRvbi0tM1NXTHoge1xcclxcbiAgICBoZWlnaHQ6IDMwMHB4O1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBib3JkZXI6bm9uZTtcXHJcXG4gICAgb3V0bGluZTpub25lO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJldmlld19fcHJldmlld0NvbnRhaW5lckJ1dHRvbi0tM1NXTHo6aG92ZXJ7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnByZXZpZXdfX3ByZXZpZXdJbWctLTJXY21DIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJwcmV2aWV3Q29udGFpbmVyQnV0dG9uXCI6IFwicHJldmlld19fcHJldmlld0NvbnRhaW5lckJ1dHRvbi0tM1NXTHpcIixcblx0XCJwcmV2aWV3SW1nXCI6IFwicHJldmlld19fcHJldmlld0ltZy0tMldjbUNcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGxhY2Vob2xkZXJDYXJkX19jYXJkLS0zeXFHaCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMCA1cHggcmdiYSgwLDAsMCwwLjUpIDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBtYXJnaW46IDAgMCAyMHB4IDA7XFxyXFxuICAgIC8qcG9zaXRpb246IHJlbGF0aXZlOyEqZm9yIGV4aXQgYnV0dG9uKiEqL1xcclxcbiAgICB3aWR0aDogMzIlO1xcclxcbiAgICBtaW4taGVpZ2h0OjM5MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19pbmZvQ29udGFpbmVyLS0yZmpSUSB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcXHJcXG4gICAgLypqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTsqL1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19tZXRhQ29udGFpbmVyLS0zWGhRWCB7XFxyXFxuICAgIC8qZGlzcGxheTogZmxleDsqL1xcclxcbiAgICAvKmZsZXgtZmxvdzogcm93IG5vd3JhcDsqL1xcclxcbiAgICAvKmp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsqL1xcclxcbiAgICAvKm1hcmdpbjogMCAwIDRweCAwOyovXFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX3RpdGxlQ29udGFpbmVyLS14YWNhRiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDE5cHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIG1hcmdpbjogMTBweCAwIDAgMDtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgLyotd2Via2l0LWxpbmUtY2xhbXA6IDI7ISrRgdGC0YDQvtC60LAg0YEgM9C80Y8g0YLQvtGH0LrQsNC80Lgg0LLQutC+0L3RhtC1KiEqL1xcclxcbiAgICAvKi13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7Ki9cXHJcXG4gICAgLypkaXNwbGF5OiAtd2Via2l0LWJveDsqL1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYWNlaG9sZGVyQ2FyZF9fdGl0bGVDb250YWluZXItLXhhY2FGOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IG9yYW5nZTtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYWNlaG9sZGVyQ2FyZF9fbG9hZE1vcmVDb250YWluZXItLXk1MVhCIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2xvYWRNb3JlQ29udGFpbmVyLS15NTFYQjpob3ZlciB7XFxyXFxuICAgIGN1cnNvcjpwb2ludGVyO1xcclxcbiAgICBjb2xvcjpvcmFuZ2U7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2xvYWRNb3JlQ29udGFpbmVyLS15NTFYQjpob3ZlciBzcGFue1xcclxcbiAgICBjb2xvcjpvcmFuZ2U7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2xvYWRNb3JlVGV4dC0tMm4tUlkge1xcclxcbiAgICBjb2xvcjp3aGl0ZTtcXHJcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICBmb250LWZhbWlseTogUm9ib3RvO1xcclxcbn1cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19sb2FkZXItLTJyNF81IHtcXHJcXG4gICAgbWFyZ2luOiAyMDBweDtcXHJcXG4gICAgd2lkdGg6MTAwcHg7XFxyXFxufVxcclxcbi5wbGFjZWhvbGRlckNhcmRfX21ldGFEYXRhLS0yZzlUMCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbiAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxNnB4O1xcclxcbiAgICAvKndpZHRoOiAxMDAlOyovXFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX3VzZXJMaW5rLS0yVHN2WiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogN3B4O1xcclxcbiAgICBjb2xvcjogYmxhY2s7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2F2YXRhci0ta0pERzEge1xcclxcbiAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDdweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk5OTk5OTtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYWNlaG9sZGVyQ2FyZF9fdXNlck5hbWUtLWE3WnZEe1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIHdpZHRoOjcwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5O1xcclxcbiAgICBoZWlnaHQ6IDE2cHg7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2NyZWF0ZWRBdC0tM1JUV3kge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6NzBweDtcXHJcXG4gICAgaGVpZ2h0OjE2cHg7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX3ByZXZpZXdDb250YWluZXJCdXR0b24tLTNzb096IHtcXHJcXG4gICAgaGVpZ2h0OiAzMDBweDtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgYm9yZGVyOm5vbmU7XFxyXFxuICAgIG91dGxpbmU6bm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmV5O1xcclxcbn1cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19wcmV2aWV3SW1nLS0yLVNMbiB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19jb250cm9sc0NvbnRhaW5lci0tM3hNYVEge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYWNlaG9sZGVyQ2FyZF9fbGlrZXNDb250YWluZXItLTNWaHdaIHtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgLyp3aWR0aDogNTBweDsqL1xcclxcblxcclxcbn1cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19saWtlc1ZhbHVlLS0yekJTVCB7XFxyXFxuICAgIHdpZGh0OjIwcHg7XFxyXFxuICAgIGhlaWdodDoxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19lcnJvckNvbnRhaW5lci0tMTRJTHcge1xcclxcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGxhY2Vob2xkZXJDYXJkX19lcnJvclZhbHVlLS0xclZMQyB7XFxyXFxuICAgIGNvbG9yOiByZWQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuLnBsYWNlaG9sZGVyQ2FyZF9fbG9hZGVyLS0ycjRfNSB7XFxyXFxuICAgIHdpZHRoOjEwMHB4O1xcclxcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcXHJcXG4gICAgdG9wOjQ1JTtcXHJcXG4gICAgbGVmdDo0NSU7XFxyXFxufVxcclxcblxcclxcbi5wbGFjZWhvbGRlckNhcmRfX2J1dHRvbkhlYXJ0LS1vMWNkVCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xcclxcbiAgICBib3JkZXI6bm9uZTtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XFxyXFxuICAgIC5wbGFjZWhvbGRlckNhcmRfX2NhcmQtLTN5cUdoIHtcXHJcXG4gICAgICAgIHdpZHRoOiA0OSU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzYzcHgpIHtcXHJcXG4gICAgLnBsYWNlaG9sZGVyQ2FyZF9fY2FyZC0tM3lxR2gge1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImNhcmRcIjogXCJwbGFjZWhvbGRlckNhcmRfX2NhcmQtLTN5cUdoXCIsXG5cdFwiaW5mb0NvbnRhaW5lclwiOiBcInBsYWNlaG9sZGVyQ2FyZF9faW5mb0NvbnRhaW5lci0tMmZqUlFcIixcblx0XCJtZXRhQ29udGFpbmVyXCI6IFwicGxhY2Vob2xkZXJDYXJkX19tZXRhQ29udGFpbmVyLS0zWGhRWFwiLFxuXHRcInRpdGxlQ29udGFpbmVyXCI6IFwicGxhY2Vob2xkZXJDYXJkX190aXRsZUNvbnRhaW5lci0teGFjYUZcIixcblx0XCJsb2FkTW9yZUNvbnRhaW5lclwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fbG9hZE1vcmVDb250YWluZXItLXk1MVhCXCIsXG5cdFwibG9hZE1vcmVUZXh0XCI6IFwicGxhY2Vob2xkZXJDYXJkX19sb2FkTW9yZVRleHQtLTJuLVJZXCIsXG5cdFwibG9hZGVyXCI6IFwicGxhY2Vob2xkZXJDYXJkX19sb2FkZXItLTJyNF81XCIsXG5cdFwibWV0YURhdGFcIjogXCJwbGFjZWhvbGRlckNhcmRfX21ldGFEYXRhLS0yZzlUMFwiLFxuXHRcInVzZXJMaW5rXCI6IFwicGxhY2Vob2xkZXJDYXJkX191c2VyTGluay0tMlRzdlpcIixcblx0XCJhdmF0YXJcIjogXCJwbGFjZWhvbGRlckNhcmRfX2F2YXRhci0ta0pERzFcIixcblx0XCJ1c2VyTmFtZVwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fdXNlck5hbWUtLWE3WnZEXCIsXG5cdFwiY3JlYXRlZEF0XCI6IFwicGxhY2Vob2xkZXJDYXJkX19jcmVhdGVkQXQtLTNSVFd5XCIsXG5cdFwicHJldmlld0NvbnRhaW5lckJ1dHRvblwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fcHJldmlld0NvbnRhaW5lckJ1dHRvbi0tM3NvT3pcIixcblx0XCJwcmV2aWV3SW1nXCI6IFwicGxhY2Vob2xkZXJDYXJkX19wcmV2aWV3SW1nLS0yLVNMblwiLFxuXHRcImNvbnRyb2xzQ29udGFpbmVyXCI6IFwicGxhY2Vob2xkZXJDYXJkX19jb250cm9sc0NvbnRhaW5lci0tM3hNYVFcIixcblx0XCJsaWtlc0NvbnRhaW5lclwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fbGlrZXNDb250YWluZXItLTNWaHdaXCIsXG5cdFwibGlrZXNWYWx1ZVwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fbGlrZXNWYWx1ZS0tMnpCU1RcIixcblx0XCJlcnJvckNvbnRhaW5lclwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fZXJyb3JDb250YWluZXItLTE0SUx3XCIsXG5cdFwiZXJyb3JWYWx1ZVwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fZXJyb3JWYWx1ZS0tMXJWTENcIixcblx0XCJidXR0b25IZWFydFwiOiBcInBsYWNlaG9sZGVyQ2FyZF9fYnV0dG9uSGVhcnQtLW8xY2RUXCJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlcl9faGVhZGVyQ29udGFpbmVyLS1tek5yZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOjEwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBsaWdodGdyZXk7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgcG9zaXRpb246c3RpY2t5O1xcclxcbn1cXHJcXG5cXHJcXG4uaGVhZGVyX19jZW50cmFsQ29udGFpbmVyLS1McExaaCB7XFxyXFxuICAgIHdpZHRoOjEwMCU7XFxyXFxuICAgIG1heC13aWR0aDogMTAyNHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWRlcl9fbG9nb0NvbnRhaW5lci0tMkxFLWd7XFxyXFxuICAgIHdpZHRoOjUwcHg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWRlcl9fbG9nb0NvbnRhaW5lci0tMkxFLWcgaW1ne1xcclxcbiAgICB3aWR0aDoxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4vKi5hdXRoQnV0dG9uQ29udGFpbmVyIHsqL1xcclxcbi8qICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7Ki9cXHJcXG4vKiAgICBkaXNwbGF5OiBmbGV4OyovXFxyXFxuLyp9Ki9cXHJcXG5cXHJcXG4uaGVhZGVyX19idXR0b24tLTI4N0tMe1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxufVxcclxcblxcclxcbi5oZWFkZXJfX2J1dHRvbi0tMjg3S0w6YWN0aXZlIHtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbn1cXHJcXG4uaGVhZGVyX191c2VyQ29udGFpbmVyLS1zTHU2RyB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXHJcXG4gICAgLypqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsqL1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uaGVhZGVyX19hdmF0YXJJbWctLTM3aTlFIHtcXHJcXG4gICAgd2lkdGg6IDUwcHg7XFxyXFxuICAgIGhlaWdodDogNTBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWRlcl9fYXZhdGFyVGV4dC0tMnpBeEkge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG59XFxyXFxuLmhlYWRlcl9fYXZhdGFyVGV4dC0tMnpBeEk6aG92ZXJ7XFxyXFxuICAgIGNvbG9yOiBvcmFuZ2U7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuLmhlYWRlcl9fbG9nb3V0VGV4dC0tM2hzNUkge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcclxcbiAgICBmb250LWZhbWlseTogUm9ib3RvO1xcclxcbiAgICBmb250LXNpemU6IDE0cHg7XFxyXFxufVxcclxcbi5oZWFkZXJfX2xvZ291dFRleHQtLTNoczVJOmhvdmVye1xcclxcbiAgICBjb2xvcjogb3JhbmdlO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcXHJcXG4gICAgLmhlYWRlcl9faGVhZGVyQ29udGFpbmVyLS1tek5yZCB7XFxyXFxuICAgICAgICBwYWRkaW5nOjEwcHggMjBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiaGVhZGVyQ29udGFpbmVyXCI6IFwiaGVhZGVyX19oZWFkZXJDb250YWluZXItLW16TnJkXCIsXG5cdFwiY2VudHJhbENvbnRhaW5lclwiOiBcImhlYWRlcl9fY2VudHJhbENvbnRhaW5lci0tTHBMWmhcIixcblx0XCJsb2dvQ29udGFpbmVyXCI6IFwiaGVhZGVyX19sb2dvQ29udGFpbmVyLS0yTEUtZ1wiLFxuXHRcImJ1dHRvblwiOiBcImhlYWRlcl9fYnV0dG9uLS0yODdLTFwiLFxuXHRcInVzZXJDb250YWluZXJcIjogXCJoZWFkZXJfX3VzZXJDb250YWluZXItLXNMdTZHXCIsXG5cdFwiYXZhdGFySW1nXCI6IFwiaGVhZGVyX19hdmF0YXJJbWctLTM3aTlFXCIsXG5cdFwiYXZhdGFyVGV4dFwiOiBcImhlYWRlcl9fYXZhdGFyVGV4dC0tMnpBeElcIixcblx0XCJsb2dvdXRUZXh0XCI6IFwiaGVhZGVyX19sb2dvdXRUZXh0LS0zaHM1SVwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mb290ZXJfX2Zvb3RlckNvbnRhaW5lci0tMUNzUFUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzoyMHB4IDA7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgY29sb3I6ICM2OTY5Njk7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJmb290ZXJDb250YWluZXJcIjogXCJmb290ZXJfX2Zvb3RlckNvbnRhaW5lci0tMUNzUFVcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2FyZFBhZ2VfX2NhcmRQYWdlLS0zMjN3NCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC43KTtcXHJcXG4gICAgcG9zaXRpb246Zml4ZWQ7XFxyXFxuICAgIHdpZHRoOjEwMCU7XFxyXFxuICAgIGhlaWdodDoxMDAlO1xcclxcbiAgICB0b3A6MDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcmRQYWdlX19jZW50cmFsQ29udGFpbmVyLS0zSkpWQSB7XFxyXFxuICAgIG1heC13aWR0aDogMTAyNHB4O1xcclxcbiAgICB3aWR0aDogODAlO1xcclxcbiAgICAvKm1pbi13aWR0aDogNTAlOyovXFxyXFxuICAgIGhlaWdodDogODAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9faW1hZ2VDb250YWluZXItLTNfQncxIHtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgd2lkdGg6ODAlO1xcclxcbiAgICAvKm1pbi13aWR0aDozMDBweDsqL1xcclxcbn1cXHJcXG5cXHJcXG4uY2FyZFBhZ2VfX2ltYWdlQ29udGFpbmVyLS0zX0J3MSBpbWcge1xcclxcbiAgICBoZWlnaHQ6MTAwJTtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XFxyXFxuICAgIG1hcmdpbjphdXRvIDA7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uY2FyZFBhZ2VfX2luZm9Db250YWluZXItLWFCMkN0IHtcXHJcXG4gICAgd2lkdGg6IDIwJTtcXHJcXG4gICAgLyptaW4td2lkdGg6IDIwJTsqL1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxufVxcclxcbi5jYXJkUGFnZV9fbWV0YUNvbnRhaW5lci0tM0NobFAge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjRmNGY0O1xcclxcbn1cXHJcXG4uY2FyZFBhZ2VfX2F1dGhvckNvbnRhaW5lci0tZ1prWHkge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fY3JlYXRlZEF0LS0zVU1TRyB7XFxyXFxuICAgIGNvbG9yOiAjOTk5OTk5O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fYXZhdGFySW1nLS1fMmtXRSB7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDMwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fYXZhdGFyVGV4dC0tMzhBa2Qge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbi5jYXJkUGFnZV9fbGlrZXNDb250YWluZXItLTNHQzRXIHtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZjRmNGY0O1xcclxcblxcclxcbn1cXHJcXG4uY2FyZFBhZ2VfX2xpa2VzVmFsdWUtLTJKTFVvIHtcXHJcXG4gICAgY29sb3I6ICM5OTk5OTk7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fYnV0dG9uLS12UjBPTSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tbGVmdDoxMHB4O1xcclxcbiAgICBib3JkZXI6bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcmRQYWdlX19idXR0b24tLXZSME9NOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOnBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fZXhpdEJ1dHRvbi0tMTJ0c1cge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDozMHB4O1xcclxcbiAgICByaWdodDozMHB4O1xcclxcbiAgICAvKmhlaWdodDogMzAwcHg7Ki9cXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgYm9yZGVyOm5vbmU7XFxyXFxuICAgIG91dGxpbmU6bm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fZXhpdEJ1dHRvbi0tMTJ0c1c6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jYXJkUGFnZV9fZXhpdEltZ1doaXRlLS0zVkRCNntcXHJcXG4gICAgd2lkdGg6IDMwcHg7XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xcclxcbiAgICAuY2FyZFBhZ2VfX2ltYWdlQ29udGFpbmVyLS0zX0J3MXtcXHJcXG4gICAgICAgIHdpZHRoOiA3MCU7XFxyXFxuICAgIH1cXHJcXG4gICAgLmNhcmRQYWdlX19pbmZvQ29udGFpbmVyLS1hQjJDdCB7XFxyXFxuICAgICAgICB3aWR0aDogMzAlO1xcclxcbiAgICB9XFxyXFxufVxcclxcbkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDc2MHB4KSB7XFxyXFxuICAgIC5jYXJkUGFnZV9fY2VudHJhbENvbnRhaW5lci0tM0pKVkEge1xcclxcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xcclxcbiAgICB9XFxyXFxuICAgIC5jYXJkUGFnZV9faW1hZ2VDb250YWluZXItLTNfQncxe1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG4gICAgLmNhcmRQYWdlX19pbmZvQ29udGFpbmVyLS1hQjJDdCB7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAvKi5leGl0SW1nQmxhY2t7Ki9cXHJcXG4gICAgLyogICAgd2lkdGg6IDIwcHg7Ki9cXHJcXG4gICAgLyogICAgZGlzcGxheTpub25lOyovXFxyXFxuICAgIC8qfSovXFxyXFxuXFxyXFxuICAgIC8qLmV4aXRJbWdXaGl0ZXsqL1xcclxcbiAgICAvKiAgICB3aWR0aDogMjBweDsqL1xcclxcbiAgICAvKiAgICBkaXNwbGF5OiB1bnNldDsqL1xcclxcbiAgICAvKn0qL1xcclxcblxcclxcbn1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiY2FyZFBhZ2VcIjogXCJjYXJkUGFnZV9fY2FyZFBhZ2UtLTMyM3c0XCIsXG5cdFwiY2VudHJhbENvbnRhaW5lclwiOiBcImNhcmRQYWdlX19jZW50cmFsQ29udGFpbmVyLS0zSkpWQVwiLFxuXHRcImltYWdlQ29udGFpbmVyXCI6IFwiY2FyZFBhZ2VfX2ltYWdlQ29udGFpbmVyLS0zX0J3MVwiLFxuXHRcImluZm9Db250YWluZXJcIjogXCJjYXJkUGFnZV9faW5mb0NvbnRhaW5lci0tYUIyQ3RcIixcblx0XCJtZXRhQ29udGFpbmVyXCI6IFwiY2FyZFBhZ2VfX21ldGFDb250YWluZXItLTNDaGxQXCIsXG5cdFwiYXV0aG9yQ29udGFpbmVyXCI6IFwiY2FyZFBhZ2VfX2F1dGhvckNvbnRhaW5lci0tZ1prWHlcIixcblx0XCJjcmVhdGVkQXRcIjogXCJjYXJkUGFnZV9fY3JlYXRlZEF0LS0zVU1TR1wiLFxuXHRcImF2YXRhckltZ1wiOiBcImNhcmRQYWdlX19hdmF0YXJJbWctLV8ya1dFXCIsXG5cdFwiYXZhdGFyVGV4dFwiOiBcImNhcmRQYWdlX19hdmF0YXJUZXh0LS0zOEFrZFwiLFxuXHRcImxpa2VzQ29udGFpbmVyXCI6IFwiY2FyZFBhZ2VfX2xpa2VzQ29udGFpbmVyLS0zR0M0V1wiLFxuXHRcImxpa2VzVmFsdWVcIjogXCJjYXJkUGFnZV9fbGlrZXNWYWx1ZS0tMkpMVW9cIixcblx0XCJidXR0b25cIjogXCJjYXJkUGFnZV9fYnV0dG9uLS12UjBPTVwiLFxuXHRcImV4aXRCdXR0b25cIjogXCJjYXJkUGFnZV9fZXhpdEJ1dHRvbi0tMTJ0c1dcIixcblx0XCJleGl0SW1nV2hpdGVcIjogXCJjYXJkUGFnZV9fZXhpdEltZ1doaXRlLS0zVkRCNlwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxudmFyIF9yZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBmaWxsOiBcImdyYXlcIixcbiAgZDogXCJNMjQ2LjEyMiA0NzcuMjg5QzEwMS43MDUgMzUwLjkyMiAwIDI4My45ODUgMCAxNzcuNTE1IDAgOTcuMDAyIDU3LjQgMzEgMTM2IDMxYzU0LjU0NCAwIDk1LjAxNyAzMy40OTcgMTIwIDgxLjAxNUMyODAuOTgxIDY0LjUgMzIxLjQ1NCAzMSAzNzYgMzFjNzguNjA5IDAgMTM2IDY2LjAxNSAxMzYgMTQ2LjUxNSAwIDEwNi40NTctMTAxLjU3MiAxNzMuMjkxLTI0Ni4xMjIgMjk5Ljc3M2ExNS4wMDEgMTUuMDAxIDAgMDEtMTkuNzU2LjAwMXpcIlxufSk7XG5cbmZ1bmN0aW9uIFN2Z0hlYXJ0SWNvblVucHJlc3NlZChwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIGhlaWdodDogMjAsXG4gICAgdmlld0JveDogXCIwIDAgNTEyIDUxMlwiLFxuICAgIHdpZHRoOiAyMFxuICB9LCBwcm9wcyksIF9yZWYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdmdIZWFydEljb25VbnByZXNzZWQ7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBfcmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJyZWRcIixcbiAgZDogXCJNMjQ2LjEyMiA0NzcuMjg5QzEwMS43MDUgMzUwLjkyMiAwIDI4My45ODUgMCAxNzcuNTE1IDAgOTcuMDAyIDU3LjQgMzEgMTM2IDMxYzU0LjU0NCAwIDk1LjAxNyAzMy40OTcgMTIwIDgxLjAxNUMyODAuOTgxIDY0LjUgMzIxLjQ1NCAzMSAzNzYgMzFjNzguNjA5IDAgMTM2IDY2LjAxNSAxMzYgMTQ2LjUxNSAwIDEwNi40NTctMTAxLjU3MiAxNzMuMjkxLTI0Ni4xMjIgMjk5Ljc3M2ExNS4wMDEgMTUuMDAxIDAgMDEtMTkuNzU2LjAwMXpcIlxufSk7XG5cbmZ1bmN0aW9uIFN2Z0hlYXJ0SWNvblByZXNzZWQocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICBoZWlnaHQ6IDIwLFxuICAgIHZpZXdCb3g6IFwiMCAwIDUxMiA1MTJcIixcbiAgICB3aWR0aDogMjBcbiAgfSwgcHJvcHMpLCBfcmVmKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3ZnSGVhcnRJY29uUHJlc3NlZDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2NvbnRyb2xzLmNzcyc7XG5pbXBvcnQgSGVhcnRJY29uVW5wcmVzc2VkIGZyb20gXCIuLi8uLi8uLi8uLi9pbWcvSGVhcnRJY29uVW5wcmVzc2VkLnN2Z1wiO1xuaW1wb3J0IEhlYXJ0SWNvblByZXNzZWQgZnJvbSBcIi4uLy4uLy4uLy4uL2ltZy9IZWFydEljb25QcmVzc2VkLnN2Z1wiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBDb250cm9scyh7bGlrZXMsIGNsaWNrZWRJbWFnZU9iaixpZCxpc0xpa2VkLCBoYW5kbGVDbGlja0hlYXJ0LCBpc0hlYXJ0RXJyb3J9KSB7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRyb2xzQ29udGFpbmVyfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGlrZXNDb250YWluZXJ9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5saWtlc1ZhbHVlfT57bGlrZXN9PC9zcGFuPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0gb25DbGljaz17KCk9PmhhbmRsZUNsaWNrSGVhcnQoaWQpfT5cbiAgICAgICAgICB7Lyo8aW1nIHNyYz17aXNMaWtlZD8gSGVhcnRJY29uUHJlc3NlZCA6IEhlYXJ0SWNvblVucHJlc3NlZH0gYWx0PXsnaGVhcnQnfS8+Ki99XG4gICAgICAgICAge2lzTGlrZWQ/IDxIZWFydEljb25QcmVzc2VkLz4gOiA8SGVhcnRJY29uVW5wcmVzc2VkLz59XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICAgIHtpc0hlYXJ0RXJyb3IgJiYgY2xpY2tlZEltYWdlT2JqLmlkPT09aWQgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZXJyb3JDb250YWluZXJ9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZXJyb3JWYWx1ZX0+WW91IGFyZSBub3QgYXV0aG9yaXplZDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9tZXRhZGF0YS5jc3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIE1ldGFEYXRhKHtjcmVhdGVkLCBwcm9maWxlLCBuYW1lLCBhdmF9KSB7XG4gIGNvbnN0IGRhdGUgPSBjcmVhdGVkLnNsaWNlKDAsMTApO1xuICAvLyBjb25zdCB0aW1lID0gY3JlYXRlZC5zbGljZSgxMSwxNSk7XG4gIC8vIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBbZGF0ZSwgdGltZV0uam9pbihcIi9cIilcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWV0YURhdGF9PlxuICAgICAgPGEgaHJlZj17cHJvZmlsZX0gY2xhc3NOYW1lPXtzdHlsZXMudXNlckxpbmt9PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFyfVxuICAgICAgICAgIHNyYz17YXZhfVxuICAgICAgICAgIGFsdD1cImF2YXRhclwiXG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnVzZXJOYW1lfT57bmFtZX08L3NwYW4+XG4gICAgICA8L2E+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5jcmVhdGVkQXR9PlxuICAgICAgICB7ZGF0ZX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vaW5mby5jc3MnO1xuaW1wb3J0IHtNZXRhRGF0YX0gZnJvbSBcIi4vTWV0YURhdGEvTWV0YURhdGFcIjtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBJbmZvKHtjcmVhdGVkLCBwcm9maWxlLCBuYW1lLCBhdmF9KSB7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmluZm9Db250YWluZXJ9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tZXRhQ29udGFpbmVyfT5cbiAgICAgICAgPE1ldGFEYXRhIGNyZWF0ZWQ9e2NyZWF0ZWR9IHByb2ZpbGU9e3Byb2ZpbGV9IG5hbWU9e25hbWV9IGF2YT17YXZhfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vcHJldmlldy5jc3MnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3KHt1cmwsIGhhbmRsZUNsaWNrUHJldmlldywgaWR9KSB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3Q29udGFpbmVyQnV0dG9ufSBvbkNsaWNrPXsoKT0+aGFuZGxlQ2xpY2tQcmV2aWV3KGlkKX0+XG4gICAgICA8aW1nIGNsYXNzTmFtZT17c3R5bGVzLnByZXZpZXdJbWd9XG4gICAgICAgICAgIHNyYz17dXJsfVxuICAgICAgICAgICBhbHQ9J3ByZXZpZXdQaWMnXG4gICAgICAvPlxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9jYXJkLi5jc3MnO1xuaW1wb3J0IHtDb250cm9sc30gZnJvbSBcIi4vQ29udHJvbHMvQ29udHJvbHNcIjtcbmltcG9ydCB7SW5mb30gZnJvbSBcIi4vSW5mby9JbmZvXCI7XG5pbXBvcnQge1ByZXZpZXd9IGZyb20gXCIuL1ByZXZpZXcvUHJldmlld1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZCh7YWRkLHVybCwgY2xpY2tlZEltYWdlT2JqLGlzSGVhcnRFcnJvciwgc2V0SXNIZWFydEVycm9yLCBjcmVhdGVkLCBsaWtlcywgaGFuZGxlQ2xpY2tIZWFydCwgcHJvZmlsZSwgbmFtZSwgYXZhLCBkZXNjcmlwdGlvbiwgb3BlbiwgaWQsIGhhbmRsZUNsaWNrUHJldmlldywgcHJlc3NlZCwgc2V0UHJlc3NlZCwgc2V0TGlrZWRJZCwgbGlrZVBob3RvLCBpc0xpa2VkLCBpc0F1dGgsIHdob0lzfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZH0+XG4gICAgICB7d2hvSXMgPT09ICdtb3JlQnV0dG9uJ1xuICAgICAgICA/XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZE1vcmVDb250YWluZXJ9IG9uQ2xpY2s9e2FkZH0+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMubG9hZE1vcmVUZXh0fT5Mb2FkIG1vcmU8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA6XG4gICAgICAgIDw+XG4gICAgICAgICAgPEluZm8gY3JlYXRlZD17Y3JlYXRlZH0gcHJvZmlsZT17cHJvZmlsZX0gbmFtZT17bmFtZX0gYXZhPXthdmF9IGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn0vPlxuICAgICAgICAgIDxQcmV2aWV3IHVybD17dXJsfSBoYW5kbGVDbGlja1ByZXZpZXc9e2hhbmRsZUNsaWNrUHJldmlld30gaWQ9e2lkfS8+XG4gICAgICAgICAgPENvbnRyb2xzIGNsaWNrZWRJbWFnZU9iaj17Y2xpY2tlZEltYWdlT2JqfSBpc0hlYXJ0RXJyb3I9e2lzSGVhcnRFcnJvcn0gbGlrZXM9e2xpa2VzfSBoYW5kbGVDbGlja0hlYXJ0PXtoYW5kbGVDbGlja0hlYXJ0fSBpc0xpa2VkPXtpc0xpa2VkfSBpZD17aWR9Lz5cbiAgICAgICAgPC8+XG4gICAgICAgIH1cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBfcmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGZpbGw6IFwiI2ZmOGMwMFwiLFxuICBkOiBcIk0xMDkuMjUgNTUuNWgtMzZsMTItMTJhMjkuNTQgMjkuNTQgMCAwMC00OS41MyAxMkgxOC43NUE0Ni4wNCA0Ni4wNCAwIDAxOTYuOSAzMS44NGwxMi4zNS0xMi4zNHYzNnptLTkwLjUgMTdoMzZsLTEyIDEyYTI5LjU0IDI5LjU0IDAgMDA0OS41My0xMmgxNi45N0E0Ni4wNCA0Ni4wNCAwIDAxMzEuMSA5Ni4xNkwxOC43NCAxMDguNXYtMzZ6XCJcbn0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFuaW1hdGVUcmFuc2Zvcm1cIiwge1xuICBhdHRyaWJ1dGVOYW1lOiBcInRyYW5zZm9ybVwiLFxuICB0eXBlOiBcInJvdGF0ZVwiLFxuICBmcm9tOiBcIjAgNjQgNjRcIixcbiAgdG86IFwiMzYwIDY0IDY0XCIsXG4gIGR1cjogXCI3MjBtc1wiLFxuICByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCJcbn0pKTtcblxuZnVuY3Rpb24gU3ZnMyhwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHdpZHRoOiA2NCxcbiAgICBoZWlnaHQ6IDY0LFxuICAgIHZpZXdCb3g6IFwiMCAwIDEyOCAxMjhcIlxuICB9LCBwcm9wcyksIF9yZWYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdmczOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vcGxhY2Vob2xkZXJDYXJkLmNzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBQbGFjZWhvbGRlckNhcmQoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jYXJkfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaW5mb0NvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWV0YUNvbnRhaW5lcn0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tZXRhRGF0YX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnVzZXJMaW5rfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hdmF0YXJ9Lz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy51c2VyTmFtZX0vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNyZWF0ZWRBdH0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnByZXZpZXdDb250YWluZXJCdXR0b259PjwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRyb2xzQ29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5saWtlc0NvbnRhaW5lcn0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5saWtlc1ZhbHVlfS8+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b25IZWFydH0+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vY2FyZExpc3QuY3NzJztcbmltcG9ydCB7Q2FyZH0gZnJvbSBcIi4vQ2FyZC9DYXJkXCI7XG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uLy4uLy4uL3NyYy9pbWcvMy5zdmcnXG5pbXBvcnQge1BsYWNlaG9sZGVyQ2FyZH0gZnJvbSBcIi4vUGxhY2Vob2xkZXJDYXJkL1BsYWNlaG9sZGVyQ2FyZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZExpc3Qoe2FkZCxjbGlja2VkSW1hZ2VPYmosaW1hZ2VzLCBoYW5kbGVDbGlja1ByZXZpZXcsIHByZXNzZWQsIHNldFByZXNzZWQsIHNldExpa2VkSWQsIGxpa2VQaG90bywgaGFuZGxlQ2xpY2tIZWFydCwgaXNBdXRoLCBzZXRJc0NhcmRPcGVuZWQsIGlzSGVhcnRFcnJvciwgc2V0SXNIZWFydEVycm9yfSkge1xuICBjb25zdCBsb2FkTW9yZUJ0biA9IGltYWdlcy5sZW5ndGggPyA8Q2FyZCBhZGQ9e2FkZH0gd2hvSXM9eydtb3JlQnV0dG9uJ30vPiA6IG51bGw7XG4gIGxldCBjYXJkTGlzdDtcblxuICBpZiAoIWltYWdlcy5sZW5ndGgpIHtcbiAgICBjYXJkTGlzdD1cbiAgICAgIDw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGVyfT5cbiAgICAgICAgICA8TG9hZGVyLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxQbGFjZWhvbGRlckNhcmQvPlxuICAgICAgICA8UGxhY2Vob2xkZXJDYXJkLz5cbiAgICAgICAgPFBsYWNlaG9sZGVyQ2FyZC8+XG4gICAgICAgIDxQbGFjZWhvbGRlckNhcmQvPlxuICAgICAgICA8UGxhY2Vob2xkZXJDYXJkLz5cbiAgICAgICAgPFBsYWNlaG9sZGVyQ2FyZC8+XG4gICAgICA8Lz5cbiAgfSBlbHNlIHtcbiAgICBjYXJkTGlzdCA9IGltYWdlcy5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICAgPENhcmRcbiAgICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICAgIGlkPXtpdGVtLmlkfVxuICAgICAgICAgICAgY3JlYXRlZD17aXRlbS5jcmVhdGVkX2F0fVxuICAgICAgICAgICAgbmFtZT17aXRlbS51c2VyLmZpcnN0X25hbWV9XG4gICAgICAgICAgICBwcm9maWxlPXtpdGVtLnVzZXIubGlua3MuaHRtbH1cbiAgICAgICAgICAgIGxpa2VzPXtpdGVtLmxpa2VzfVxuICAgICAgICAgICAgdXJsPXtpdGVtLnVybHMudGh1bWJ9XG4gICAgICAgICAgICBhdmE9e2l0ZW0udXNlci5wcm9maWxlX2ltYWdlLnNtYWxsfVxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tQcmV2aWV3PXtoYW5kbGVDbGlja1ByZXZpZXd9XG4gICAgICAgICAgICBoYW5kbGVDbGlja0hlYXJ0PXtoYW5kbGVDbGlja0hlYXJ0fVxuICAgICAgICAgICAgaXNMaWtlZD17aXRlbS5saWtlZF9ieV91c2VyfVxuICAgICAgICAgICAgaXNBdXRoPXtpc0F1dGh9XG4gICAgICAgICAgICBzZXRJc0NhcmRPcGVuZWQ9e3NldElzQ2FyZE9wZW5lZH1cbiAgICAgICAgICAgIHNldElzSGVhcnRFcnJvcj17c2V0SXNIZWFydEVycm9yfVxuICAgICAgICAgICAgaXNIZWFydEVycm9yPXtpc0hlYXJ0RXJyb3J9XG4gICAgICAgICAgICBjbGlja2VkSW1hZ2VPYmo9e2NsaWNrZWRJbWFnZU9ian1cbiAgICAgICAgICAvPlxuICAgICAgKVxuICAgIH0pfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxtYWluIGNsYXNzTmFtZT17c3R5bGVzLm1haW5Db250YWluZXJ9PlxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jZW50cmFsQ29udGFpbmVyfT5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZExpc3R9PlxuICAgICAgICAgICAge2NhcmRMaXN0fVxuICAgICAgICAgICAge2xvYWRNb3JlQnRufVxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgey8qPGJ1dHRvbiovfVxuICAgICAgICB7LyogIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0qL31cbiAgICAgICAgey8qICB0eXBlPVwiYnV0dG9uXCIqL31cbiAgICAgICAgey8qICBvbkNsaWNrPXthZGR9Ki99XG4gICAgICAgIHsvKj4qL31cbiAgICAgICAgey8qICDQl9Cw0LPRgNGD0LfQuNGC0Ywg0LXRidC1Ki99XG4gICAgICAgIHsvKjwvYnV0dG9uPiovfVxuICAgICAgPC9tYWluPlxuICAgIClcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9oZWFkZXIuY3NzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXIoe2dvVG9BdXRob3JpemVQYWdlLCBpc0F1dGgsIGRldkJ0biwgdG9Mb2dvdXQsIHVzZXJQcm9maWxlfSkge1xyXG4gIGNvbnN0IHVzZXJOYW1lPWNhcGl0YWxpemVGaXJzdExldHRlcihgJHt1c2VyUHJvZmlsZS5maXJzdF9uYW1lfWApO1xyXG5cclxuICBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGVyQ29udGFpbmVyfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jZW50cmFsQ29udGFpbmVyfT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxvZ29Db250YWluZXJ9PlxyXG4gICAgICAgICAgPGltZyBzcmM9eydodHRwczovL3d3dy5mbGF0aWNvbi5jb20vc3ZnL3N0YXRpYy9pY29ucy9zdmcvMS8xMzk0LnN2Zyd9IGFsdD17J2xvZ28nfS8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAge2RldkJ0biAmJihcclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgb25DbGljaz17ZGV2QnRufVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgZGV2IGJ1dHRvbiAoc2hvdyBzdGF0ZXMgaW4gY29uc29sZSlcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICl9XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy51c2VyQ29udGFpbmVyfT5cclxuICAgICAgICAgIHtpc0F1dGggJiYgKFxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtzdHlsZXMuYnV0dG9ufSB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dG9Mb2dvdXR9PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMubG9nb3V0VGV4dH0+TG9nb3V0PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmF2YXRhckltZ31cclxuICAgICAgICAgICAgICAgIHNyYz17dXNlclByb2ZpbGUucHJvZmlsZV9pbWFnZS5zbWFsbH1cclxuICAgICAgICAgICAgICAgIGFsdD1cImF2YXRhclwiXHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0gdHlwZT1cImJ1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFyVGV4dH0gaHJlZj17dXNlclByb2ZpbGUubGlua3MuaHRtbH0+IHt1c2VyTmFtZX08L2E+XHJcbiAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICAgIHshaXNBdXRoICYmIChcclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5idXR0b259IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtnb1RvQXV0aG9yaXplUGFnZX0+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFyVGV4dH0+TG9naW48L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9oZWFkZXI+XHJcbiAgKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9mb290ZXIuY3NzJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgRm9vdGVyID0gKHtpc0NhcmRPcGVuZWR9KSA9PiB7Ly/RhNGD0L3QutGG0LjQvtC90LDQu9GM0L3Ri9C5INC60L7QvNC/0L7QvdC10L3RgiDRgSDQtdC00LjQvdGB0YLQstC10L3QvdGL0LzQuCDQv9C+0LvRg9GH0LDQtdC80YvQvNC4INCw0YDQs9GD0LzQtdC90YLQsNC80LggcHJvcHMuINCi0LjQv9CwINCz0LvRg9C/0YvQuSDQutC+0LzQv9C+0L3QtdC90YIg0LrQvtGC0L7RgNGL0Lkg0YLRg9C/0L4g0L/RgNC40L3QuNC80LDQtdGCINC/0YDQuNC60LDQtyDQuCDQstGL0L/QvtC70L3Rj9C10YIg0LXQs9C+KNC/0YDQuNC90Y/QuyDQsNGA0LPRg9C80LXQvdGC0Ysg0Lgg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQuyDQuNGFINC90LUg0LzQtdC90Y/RjyDQvdC40YfQtdCz0L4pXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICB7IWlzQ2FyZE9wZW5lZCAmJihcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZvb3RlckNvbnRhaW5lcn0+XHJcbiAgICAgICAgICA8cD4gJiMxNjk7IDIwMjAgSU5TVEFHaG1HaG0gRlJPTSBGT09UQk9PSzwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuICAgIDwvPlxyXG5cclxuICApO1xyXG59IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBfcmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMy42NjMgNDEwLjYzN2ExMi40NjUgMTIuNDY1IDAgMDA4LjgzOSAzLjY2MWMzLjE5OSAwIDYuMzk4LTEuMjIxIDguODM5LTMuNjYxbDE4NS44MDktMTg1LjgxIDE4NS44MSAxODUuODExYTEyLjQ2NSAxMi40NjUgMCAwMDguODQgMy42NjFjMy4xOTggMCA2LjM5Ny0xLjIyMSA4LjgzOS0zLjY2MSA0Ljg4MS00Ljg4MSA0Ljg4MS0xMi43OTYgMC0xNy42NzlsLTE4NS44MTEtMTg1LjgxIDE4NS44MTEtMTg1LjgxYzQuODgxLTQuODgyIDQuODgxLTEyLjc5NiAwLTE3LjY3OC00Ljg4Mi00Ljg4Mi0xMi43OTYtNC44ODItMTcuNjc5IDBsLTE4NS44MSAxODUuODFMMjEuMzQgMy42NjNjLTQuODgyLTQuODgyLTEyLjc5Ni00Ljg4Mi0xNy42NzggMC00Ljg4MiA0Ljg4MS00Ljg4MiAxMi43OTYgMCAxNy42NzhsMTg1LjgxIDE4NS44MDlMMy42NjMgMzkyLjk1OWMtNC44ODIgNC44ODItNC44ODIgMTIuNzk3IDAgMTcuNjc4elwiXG59KTtcblxuZnVuY3Rpb24gU3ZnQ3Jvc3MyKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgd2lkdGg6IDQxNC4yOTgsXG4gICAgaGVpZ2h0OiA0MTQuMjk5LFxuICAgIGZpbGw6IFwiI2ZmZlwiXG4gIH0sIHByb3BzKSwgX3JlZik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN2Z0Nyb3NzMjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2NhcmRQYWdlLmNzcyc7XG5pbXBvcnQgQ3Jvc3MyIGZyb20gJy4uLy4uL2ltZy9jcm9zczIuc3ZnJztcbmltcG9ydCBIZWFydEljb25QcmVzc2VkIGZyb20gXCIuLi8uLi9pbWcvSGVhcnRJY29uUHJlc3NlZC5zdmdcIjtcbmltcG9ydCBIZWFydEljb25VbnByZXNzZWQgZnJvbSBcIi4uLy4uL2ltZy9IZWFydEljb25VbnByZXNzZWQuc3ZnXCI7XG5pbXBvcnQgUHJvZ3Jlc3NpdmVJbWFnZSBmcm9tIFwicmVhY3QtcHJvZ3Jlc3NpdmUtZ3JhY2VmdWwtaW1hZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRQYWdlKHtoYW5kbGVDbGlja0hlYXJ0LCBjbGlja2VkSW1hZ2VPYmosIHNldElzQ2FyZE9wZW5lZCwgaXNDYXJkT3BlbmVkfSkge1xuXG4gIGNvbnN0IGRhdGUgPSBpc0NhcmRPcGVuZWQgPyBjbGlja2VkSW1hZ2VPYmouY3JlYXRlZF9hdC5zbGljZSgwLDEwKTpudWxsOy8v0YHRgNC10LfQsNGC0Ywg0LvQuNGI0L3QuNC1INGG0LjRhNGA0Ysg0LjQtyDQtNCw0YLRi1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNDYXJkT3BlbmVkICYmKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNhcmRQYWdlfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNlbnRyYWxDb250YWluZXJ9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmltYWdlQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICA8UHJvZ3Jlc3NpdmVJbWFnZS8v0LfQsNCz0YDRg9C30YfQuNC6INC40LcgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVhY3QtcHJvZ3Jlc3NpdmUtZ3JhY2VmdWwtaW1hZ2VcbiAgICAgICAgICAgICAgICAgIHNyYz17Y2xpY2tlZEltYWdlT2JqLnVybHMucmVndWxhcn1cbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtjbGlja2VkSW1hZ2VPYmoudXJscy50aHVtYn1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7c3JjID0+IDxpbWcgc3JjPXtzcmN9IGFsdD17Y2xpY2tlZEltYWdlT2JqLmFsdF9kZXNjcmlwdGlvbn0gLz59XG4gICAgICAgICAgICAgICAgPC9Qcm9ncmVzc2l2ZUltYWdlPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbmZvQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1ldGFDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hdXRob3JDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFySW1nfVxuICAgICAgICAgICAgICAgICAgICAgIHNyYz17Y2xpY2tlZEltYWdlT2JqLnVzZXIucHJvZmlsZV9pbWFnZS5zbWFsbH1cbiAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJhdmF0YXJcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9e3N0eWxlcy5hdmF0YXJUZXh0fSBocmVmPXtjbGlja2VkSW1hZ2VPYmoudXNlci5saW5rcy5odG1sfT57Y2xpY2tlZEltYWdlT2JqLnVzZXIuZmlyc3RfbmFtZX08L2E+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmNyZWF0ZWRBdH0+e2RhdGV9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGlrZXNDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMubGlrZXNWYWx1ZX0+e2NsaWNrZWRJbWFnZU9iai5saWtlc308L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0gb25DbGljaz17KCk9PmhhbmRsZUNsaWNrSGVhcnQoY2xpY2tlZEltYWdlT2JqLmlkKX0+XG4gICAgICAgICAgICAgICAgICAgIHtjbGlja2VkSW1hZ2VPYmoubGlrZWRfYnlfdXNlcj8gPEhlYXJ0SWNvblByZXNzZWQvPjogPEhlYXJ0SWNvblVucHJlc3NlZC8+fVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+c2V0SXNDYXJkT3BlbmVkKGZhbHNlKX0gY2xhc3NOYW1lPXtzdHlsZXMuZXhpdEJ1dHRvbn0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZXhpdEltZ1doaXRlfT5cbiAgICAgICAgICAgICAgICA8Q3Jvc3MyLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vbWFpbi5nbG9iYWwuY3NzJztcclxuaW1wb3J0IFVuc3BsYXNoLCB7dG9Kc29ufSBmcm9tICd1bnNwbGFzaC1qcyc7XHJcbmltcG9ydCB7Q2FyZExpc3R9IGZyb20gXCIuL2NvbXBvbmVudHMvQ2FyZHNMaXN0L0NhcmRMaXN0XCI7XHJcbmltcG9ydCB7Um91dGUsIFN3aXRjaH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHtIZWFkZXJ9IGZyb20gXCIuL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlci5qc1wiO1xyXG5pbXBvcnQge0Zvb3Rlcn0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb290ZXIvRm9vdGVyXCI7XHJcbmltcG9ydCB7Q2FyZFBhZ2V9IGZyb20gXCIuL2NvbXBvbmVudHMvQ2FyZFBhZ2UvQ2FyZFBhZ2VcIjtcclxuaW1wb3J0IHsgZGlzYWJsZVBhZ2VTY3JvbGwsIGVuYWJsZVBhZ2VTY3JvbGwgfSBmcm9tICdzY3JvbGwtbG9jayc7XHJcblxyXG5cclxuY29uc3QgQXBwID0gKCkgPT4ge1xyXG4gIGNvbnN0IGFjY2Vzc0tleSA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9BQ0NFU1NLRVk7Ly/QutC70Y7RhyDQv9GA0Y/Rh9C10Lwg0LIg0YDRg9GCICjRhNCw0LnQuyAuZW52KSArINC/0LvQsNCz0LjQvSBkb3RlbnYtd2VicGFjayDQsiDQutC70LjQtdC90YLRgdC60L7QuSDRh9Cw0YHRgtC4INC60L7QvdGE0LjQsyDRhNCw0LnQu9CwLiArIGdpdGlnbm9yZS4g0JIgY3JlYXRlLXJlYWN0LWFwcCDQsNCy0YLQvtC80LDRgi5cclxuICBjb25zdCBzZWNyZXQgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0VDUkVUO1xyXG4gIGNvbnN0IGNhbGxiYWNrVXJsID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0NBTExCQUNLVVJMO1xyXG4gIGNvbnN0IGJlYXJlclRva2VuID0gbG9jYWxTdG9yYWdlLmFjY2Vzc1Rva2VuRm9yVW5zcGxhc2g7Ly/QsdC10YDQtdC8INC40Lcg0LvQvtC60LDQu9CwLiDQldGB0LvQuCDQvdC10YIg0YLQviDRg9GB0YLQsNC90LDQstC70LjQstCw0LXRgtGB0Y8g0L3QsCBudWxsLlxyXG4gIC8vIGNvbnN0IGJlYXJlclRva2VuID0gJ3U5Y2x0cGRhZWtZVHlzXzZpNnR3eGdkbkxUMlc2OUdiRVBRVk1Zb2xsVWcnOy8vQW5kcmV5XHJcbiAgY29uc3QgQU1PVU5UX09OX1BBR0UgPSAxMDtcclxuICBjb25zdCBJTklUSUFMX1BBR0UgPSAxMDA7XHJcbiAgY29uc3QgdW5zcGxhc2ggPSBuZXcgVW5zcGxhc2goey8v0YEg0LrQu9GO0YfQvtC8INC40LvQuCDQsdC10Lcg0L3QtdCy0LDQttC90L4uINCR0YPQtNC10YIg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDRgtC+0LvRjNC60L4g0L7QtNC40L0gdW5zcGxhc2gg0LHQtdC3INC+0LHQvdC+0LLQu9C10L3QuNC5LlxyXG4gICAgYWNjZXNzS2V5OiBhY2Nlc3NLZXksLy8gYWNjZXNza2V5INC40Lcg0L3QsNGB0YLRgNC+0LXQuiDQstCw0YjQtdCz0L4g0L/RgNC40LvQvtC20LXQvdC40Y9cclxuICAgIHNlY3JldDogc2VjcmV0LC8vIEFwcGxpY2F0aW9uIFNlY3JldCDQuNC3INC90LDRgdGC0YDQvtC10Log0LLQsNGI0LXQs9C+INC/0YDQuNC70L7QttC10L3QuNGPXHJcbiAgICBjYWxsYmFja1VybDogY2FsbGJhY2tVcmwsLy8g0J/QvtC70L3Ri9C5INCw0LTRgNC10YEg0YHRgtGA0LDQvdC40YbRiyDQsNCy0YLQvtGA0LjQt9Cw0YbQuNC4INC/0YDQuNC70L7QttC10L3QuNGPIChSZWRpcmVjdCBVUkkpLiDQktCw0LbQvdC+OiDRjdGC0L7RgiDQsNC00YDQtdGBINC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQvtC70LbQtdC9INCx0YvRgtGMINGD0LrQsNC30LDQvSDQsiDQvdCw0YHRgtGA0L7QudC60LDRhSDQv9GA0LjQu9C+0LbQtdC90LjRjyDQvdCwINGB0LDQudGC0LUgVW5zcGxhc2ggQVBJL0RldmVsb3BlcnNcclxuICAgIGJlYXJlclRva2VuOiBiZWFyZXJUb2tlbiwvL9Cx0LXRgNC10Lwg0LjQtyDQu9C+0LrQsNC70LAuINCV0YHQu9C4INC90LXRgiDRgtC+INGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGC0YHRjyBudWxsLlxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBbaW1hZ2VzLCBzZXRJbWFnZXNdID0gdXNlU3RhdGUoW10pOy8v0YHRgtC10LnRgiDRgdC/0LjRgdC60LAg0YTQvtGC0L7QulxyXG4gIGNvbnN0IFtjbGlja2VkSW1hZ2VPYmosIHNldENsaWNrZWRJbWFnZU9ial0gPSB1c2VTdGF0ZSh7fSk7Ly/QvtCx0YzQtdC60YIg0L3QsCDQutC+0YIg0YLQutC90YPQu9C4XHJcbiAgY29uc3QgW2lzQ2FyZE9wZW5lZCwgc2V0SXNDYXJkT3BlbmVkXSA9IHVzZVN0YXRlKGZhbHNlKTsvL9GB0YLQtdC50YIg0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQutCw0YDRgtC40L3QutC4INCyINC/0L7QtNGA0L7QsdC90L7QvCDQstC40LTQtVxyXG4gIGNvbnN0IFtwYWdlLCBzZXRQYWdlXSA9IHVzZVN0YXRlKElOSVRJQUxfUEFHRSk7Ly/QtNC70Y8g0YHQu9C10LbQutC4INC/0L7RgdC7INC+0YLQutGA0YvRgtC+0Lkg0YHRgtGA0LDQvdC40YbRiyDQuNC3INC30LDQv9GA0L7RgdCwXHJcbiAgY29uc3QgW2lzQXV0aCwgc2V0SXNBdXRoXSA9IHVzZVN0YXRlKGZhbHNlKTsvL9GB0YLQsNGC0YPRgSDQsNCy0YLQvtGA0LjQt9Cw0YbQuNC4XHJcbiAgY29uc3QgW3VzZXJQcm9maWxlLCBzZXRVc2VyUHJvZmlsZV0gPSB1c2VTdGF0ZSgnJyk7Ly/QuNC90YTQvtGA0LzQsNGG0LjRjyDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcclxuICBjb25zdCBbaXNIZWFydEVycm9yLCBzZXRJc0hlYXJ0RXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpOy8v0LjQvdGE0L7RgNC80LDRhtC40Y8g0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C1XHJcblxyXG5cclxuICBjb25zdCBkZXZCdG4gPSgpPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2xvY2FsU3RvcmFnZS5hY2Nlc3NUb2tlbkZvclVuc3BsYXNoIGlzOicsIGxvY2FsU3RvcmFnZS5hY2Nlc3NUb2tlbkZvclVuc3BsYXNoKTtcclxuICAgIGNvbnNvbGUubG9nKCdwcm9jZXNzLmVudi5SRUFDVF9BUFBfQUNDRVNTS0VZOicsIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9BQ0NFU1NLRVkpO1xyXG4gICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FjY2Vzc1Rva2VuRm9yVW5zcGxhc2gnLCd1OWNsdHBkYWVrWVR5c182aTZ0d3hnZG5MVDJXNjlHYkVQUVZNWW9sbFVnJyk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0QmVhcmVyVG9rZW5Gcm9tVXJsQ29kZSA9KCk9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnZ2V0dGluZyBjb2RlIGZyb20gdXJsLi4uJyk7XHJcbiAgICBjb25zdCBjb2RlRnJvbVVybCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3BsaXQoJ2NvZGU9JylbMV07Ly8g0KHRh9C40YLRi9Cy0LDQtdC8IEdFVC3Qv9Cw0YDQsNC80LXRgtGAIGNvZGUg0LjQtyBVUkwvLyB3d3cuZXhhbXBsZS5jb20vYXV0aD9jb2RlPWFiY2RlZjEyMzQ1Ni4uLlxyXG5cclxuICAgIGlmIChjb2RlRnJvbVVybCkgey8v0LXRgdC70Lgg0LrQvtC0INCyINGB0YLRgNC+0LrQtSDQtdGB0YLRjC5cclxuICAgICAgY29uc29sZS5sb2coJ2NoZWNrIGNvZGVGcm9tVXJsOicsIGNvZGVGcm9tVXJsKTtcclxuICAgICAgdW5zcGxhc2guYXV0aC51c2VyQXV0aGVudGljYXRpb24oY29kZUZyb21VcmwpLy/QvtGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0L3QsCDQv9C+0LvRg9GH0LXQvdC40LUg0YLQvtC60LXQvdCwXHJcbiAgICAgICAgLnRoZW4odG9Kc29uKVxyXG4gICAgICAgIC50aGVuKGpzb24gPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2pzb24gYW5zd2VyIGZyb20gdXJsIGlzOicsIGpzb24pO1xyXG4gICAgICAgICAgc2V0QmVhcmVyVG9rZW5Ub0xvY2FsU3RvcmFnZShqc29uLmFjY2Vzc190b2tlbik7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2V0IHRvIGxvY2FsIGZyb20gZ2V0QmVhcmVyVG9rZW5Gcm9tVXJsQ29kZSBpcyBkb25lJyk7XHJcbiAgICAgICAgICAvLyBzZXRCZWFyZXJUb2tlbihqc29uLmFjY2Vzc190b2tlbik7XHJcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKCdodHRwczovL2pzZGlwbG9tYS5uZWYtYW4ucnUnKTsvLyDQn9C10YDQtdC30LDQs9GA0YPQttCw0LXQvCDQs9C7INGB0YLRgNCw0L3QuNGG0YMuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2V0QmVhcmVyVG9rZW4gZnJvbSBnZXRCZWFyZXJUb2tlbkZyb21VcmxDb2RlIGlzIGRvbmUnKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWxvYWRpbmcgZnJvbSBnZXRCZWFyZXJUb2tlbkZyb21VcmxDb2RlIGlzIGRvbmUnKTtcclxuICAgICAgICB9KVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdnZXR0aW5nIGNvZGUgaXMgc2tpcHBlZC4gY29kZUZyb21VcmwgaXM6Jyxjb2RlRnJvbVVybCk7Ly9yZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGdldFVzZXJQcm9maWxlID0oKT0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdnZXR0aW5nIFVzZXJQcm9maWxlLi4uYmVhcmVyVG9rZW4gaXM6JywgYmVhcmVyVG9rZW4pO1xyXG4gICAgaWYgKGJlYXJlclRva2VuKSB7Ly/QtdGB0LvQuCDQsiDRgdGC0LXQudGC0LUg0LXRgdGC0Ywg0LrQu9GO0YdcclxuICAgICAgY29uc29sZS5sb2coJ3lvdXIgYXBwIGFscmVhZHkgaGFzIHRva2VuQWNjZXNzIGtleSEgU2VuZGluZyByZXF1ZXN0Li4uJyk7XHJcbiAgICAgIHVuc3BsYXNoLmN1cnJlbnRVc2VyLnByb2ZpbGUoKVxyXG4gICAgICAgIC50aGVuKHRvSnNvbilcclxuICAgICAgICAudGhlbihqc29uID0+IHsvLyBqc29uINC+0LHRjNC10LrRgiA9IHtpZDogXCJSYzdHSC0yRktzVVwiLCBuYW1lOiBcImFuZHJleSBuZWZlZHlldlwiLCBmaXJzdF9uYW1lOiBcImFuZHJleVwifVxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2pzb24gcHJvZmlsZSBhbnN3ZXIgaXM6JywganNvbik7XHJcbiAgICAgICAgICBzZXRVc2VyUHJvZmlsZShqc29uKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXR0aW5nIFVzZXJQcm9maWxlIHRvIHN0YXRlIGlzIGRvbmUnKTtcclxuICAgICAgICAgIHNldElzQXV0aCh0cnVlKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXRJc0F1dGggZnJvbSBnZXRVc2VyUHJvZmlsZSBpcyBkb25lJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHsvL9C40L3QsNGH0LUg0YEg0LLQtdGJ0LDQvNC4INC90LAg0LLRi9C70LXRgi5cclxuICAgICAgY29uc29sZS5sb2coJ2dldHRpbmcgVXNlclByb2ZpbGUgZnJvbSBzZXJ2ZXIgaXMgc2tpcHBlZC4gIGJlYXJlclRva2VuIGlzOicsIGJlYXJlclRva2VuKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRCZWFyZXJUb2tlblRvTG9jYWxTdG9yYWdlPSAoYmVhcmVyVG9rZW4pID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhY2Nlc3NUb2tlbkZvclVuc3BsYXNoJywgSlNPTi5zdHJpbmdpZnkoYmVhcmVyVG9rZW4pKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBkZWxldGVBY2Nlc3NUb2tlbkZyb21Mb2NhbFN0b3JhZ2U9ICgpID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhY2Nlc3NUb2tlbkZvclVuc3BsYXNoJyk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdG9Mb2dvdXQ9ICgpID0+IHtcclxuICAgIHNldElzQXV0aChmYWxzZSk7XHJcbiAgICBkZWxldGVBY2Nlc3NUb2tlbkZyb21Mb2NhbFN0b3JhZ2UoKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnb1RvQXV0aG9yaXplUGFnZT0oKT0+e1xyXG4gICAgY29uc3QgYXV0aGVudGljYXRpb25VcmwgPSB1bnNwbGFzaC5hdXRoLmdldEF1dGhlbnRpY2F0aW9uVXJsKFsvLyDQk9C10L3QtdGA0LjRgNGD0LXQvCDQsNC00YDQtdGBINGB0YLRgNCw0L3QuNGG0Ysg0LDRg9GC0LXQvdGC0LjRhNC40LrQsNGG0LjQuCDQvdCwIHVuc3BsYXNoLmNvbVxyXG4gICAgICBcInB1YmxpY1wiLC8vINC4INGD0LrQsNC30YvQstCw0LXQvCDRgtGA0LXQsdGD0LXQvNGL0LUg0YDQsNC30YDQtdGI0LXQvdC40Y8gKHBlcm1pc3Npb25zKVxyXG4gICAgICBcIndyaXRlX2xpa2VzXCIsXHJcbiAgICBdKTtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oYXV0aGVudGljYXRpb25VcmwpOy8vINCe0YLQv9GA0LDQstC70Y/QtdC8INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdCwINCw0LLRgtC+0YDQuNC30LDRhtC40Y4g0YHQsNC50YLQsCBVbnNwbGFzaCDQsCDQv9C+0YLQvtC8INC+0L0g0L/QtdC/0LXQvdCw0L/RgNCw0LLQuNGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdCwIC0gY2FsbGJhY2tVcmw6IFwiaHR0cHM6Ly9qc2RpcGxvbWEubmVmLWFuLnJ1L2F1dGhcIlxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldEZpcnN0VGVuUGhvdG9zID0gKCk9PntcclxuICAgIGNvbnNvbGUubG9nKCdnZXR0aW5nIDEwIHBob3Rvcy4uLicpXHJcbiAgICBpZiAoaW1hZ2VzLmxlbmd0aCA9PT0gMCkgey8v0YLQvtC70YzQutC+INC60L7Qs9C00LAg0YHQv9C40YHQvtC6INC/0YPRgdGCLlxyXG4gICAgICB1bnNwbGFzaC5waG90b3MubGlzdFBob3RvcyhwYWdlLCBBTU9VTlRfT05fUEFHRSwgXCJsYXRlc3RcIikvLyDQvNC10YLQvtC0INC40Lcg0LHQuNCx0LvQuNC+0YLQtdC60LggaHR0cHM6Ly9naXRodWIuY29tL3Vuc3BsYXNoL3Vuc3BsYXNoLWpzI3Bob3Rvcy4gcGhvdG9zLmxpc3RQaG90b3MocGFnZSwgcGVyUGFnZSwgb3JkZXJCeSlcclxuICAgICAgICAudGhlbih0b0pzb24pXHJcbiAgICAgICAgLnRoZW4oanNvbiA9PiB7Ly9qc29uINGN0YLQviDQvtGC0LLQtdGCINCyINCy0LjQtNC1INC80LDRgdGB0LjQstCwINC+0LHRjNC10LrRgtC+0LJcclxuICAgICAgICAgIHNldEltYWdlcyhbLi4uanNvbl0pOy8v0YPRgdGC0LDQvdC+0LLQutCwINC90L7QsiDRgdGC0LXQudGC0LAg0YHQv9C40YHQutCwINGE0L7RgtC+0LogKNC/0L7RgdC70LUg0Y3RgtC+0Lkg0YQpLlxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2dldHRpbmcgMTAgcGhvdG9zIGlzIGRvbmUnKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZygnZ2V0dGluZyAxMCBwaG90b3MgaXMgc2tpcHBlZC4gaW1hZ2VzLmxlbmd0aCBpczonLCBpbWFnZXMubGVuZ3RoKVxyXG4gICAgfVxyXG5cclxuICB9O1xyXG5cclxuICBjb25zdCBhZGRQaG90b3MgPSAoKSA9PiB7XHJcbiAgICB1bnNwbGFzaC5waG90b3MubGlzdFBob3RvcyhwYWdlKzEsIEFNT1VOVF9PTl9QQUdFLCBcImxhdGVzdFwiKS8vINC80LXRgtC+0LQg0LjQtyDQsdC40LHQu9C40L7RgtC10LrQuCBodHRwczovL2dpdGh1Yi5jb20vdW5zcGxhc2gvdW5zcGxhc2gtanMjcGhvdG9zLiBwaG90b3MubGlzdFBob3RvcyhwYWdlLCBwZXJQYWdlLCBvcmRlckJ5KVxyXG4gICAgICAudGhlbih0b0pzb24pXHJcbiAgICAgIC50aGVuKGpzb24gPT4gey8vanNvbiDRjdGC0L4g0L7RgtCy0LXRgiDQsiDQstC40LTQtSDQvNCw0YHRgdC40LLQsCDQvtCx0YzQtdC60YLQvtCyINCyINC60L7Qu9C40YfQtdGB0YLQstC1INGD0LrQsNC30LDQvdC90L7QvCDQsiDQv9C10YDQtdC80LXQvdC90L7QuSBhbW91bnRPZkl0ZW1zT25QYWdlLlxyXG4gICAgICAgIGNvbnN0IG5ld0ltYWdlc0FyciA9IFsuLi5pbWFnZXMsIC4uLmpzb25dOy8v0YHQvtC30LTQsNC10Lwg0L3QvtCy0YvQuSDQvNCw0YHRgdC40LIg0LTQvtCx0LDQstC70Y/RjyDQuiDRgdGC0LDRgNGL0Lwg0L3QvtCy0YvQtSDRhNC+0YLQutC4LlxyXG4gICAgICAgIC8vIGNvbnN0IG5ld0NsZWFuQXJyID0gWy4uLm5ldyBTZXQobmV3RGlydHlBcnIpXTsvL9C40LfQsdCw0LLQu9GP0LXQvNGB0Y8g0L7RgiDQtNGD0LHQu9C40YDQvtCy0LDQvdC40Y8g0Y3Qu9C10LzQtdC90YLQvtCyLiBFUzYuINCQ0LvRjNGC0LXRgNC90LDRgtC40LLQsCBBcnJheS5mcm9tKG5ldyBTZXQgKG5ld0RpcnR5QXJyKSlcclxuICAgICAgICAvLyBjb25zdCBuZXdDbGVhbkFycjIgPSBuZXdEaXJ0eUFyci5maWx0ZXIoKGl0ZW0saW5kZXgpPT5uZXdEaXJ0eUFyci5pbmRleE9mKGl0ZW09PT1pbmRleCkpOy8v0YHQv9C+0YHQvtCxIDIg0YfQtdGA0LXQtyBmaWx0ZXJcclxuICAgICAgICAvLyBjb25zdCBuZXdDbGVhbkFycjMgPSBuZXdEaXJ0eUFyci5yZWR1Y2UoKHVuaXF1ZSxpdGVtKT0+dW5pcXVlLmluY2x1ZGVzKChpdGVtKSA/IHVuaXF1ZTpbLi4udW5pcXVlLCBpdGVtXSwgW10pKTsvL9GB0L/QvtGB0L7QsSAzINGH0LXRgNC10LcgcmVkdWNlXHJcbiAgICAgICAgc2V0SW1hZ2VzKG5ld0ltYWdlc0Fycik7Ly/QvtCx0L3QvtCy0LvRj9C10Lwg0YHRgtC10LnRgiDRgdC/0LjRgdC60LAg0LrQsNGA0YLQuNC90L7Qui5cclxuICAgICAgICBzZXRQYWdlKHBhZ2UgKyAxKTsvL9GB0L7RhdGA0LDQvdGP0LXQvCDRgdGC0LXQudGCINC/0L7RgdC70LXQtNC90LXQuSDQt9Cw0L/RgNCw0YjQuNCy0LDQtdC80L7QuSDRgdGC0YDQsNC90LjRhtGLLlxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBsaWtlUGhvdG9SZXF1ZXN0ID0oaWQpPT4ge1xyXG4gICAgdW5zcGxhc2gucGhvdG9zLmxpa2VQaG90byhpZCkvLyDQvNC10YLQvtC0INC40Lcg0LHQuNCx0LvQuNC+0YLQtdC60LggaHR0cHM6Ly9naXRodWIuY29tL3Vuc3BsYXNoL3Vuc3BsYXNoLWpzI3Bob3Rvc1xyXG4gICAgICAudGhlbih0b0pzb24pXHJcbiAgICAgIC50aGVuKGpzb24gPT4gey8vanNvbiDRjdGC0L4g0L7RgtCy0LXRgiDQsiDQstC40LTQtSDQvtC00L3QvtCz0L4g0L7QsdGM0LXQutGC0LAge3Bob3RvOnt9LCB1c2VyOnt9fVxyXG4gICAgICAgIC8v0L3QuNGH0LXQs9C+INC90LUg0LTQtdC70LDRgtGMINGH0YLQvtCx0Ysg0L3QtSDQvdCw0LPRgNGD0LbQsNGC0Ywg0YHQtdGA0LLQtdGAINC70LjRiNC90LjQvNC4INC30LDQv9GA0L7RgdCw0LzQuCDQvdCwINC30LDQs9GA0YPQt9C60YMuXHJcbiAgICAgIH0pXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdW5saWtlUGhvdG9SZXF1ZXN0ID0oaWQpPT4ge1xyXG4gICAgdW5zcGxhc2gucGhvdG9zLnVubGlrZVBob3RvKGlkKS8vINC80LXRgtC+0LQg0LjQtyDQsdC40LHQu9C40L7RgtC10LrQuCBodHRwczovL2dpdGh1Yi5jb20vdW5zcGxhc2gvdW5zcGxhc2gtanMjcGhvdG9zXHJcbiAgICAgIC50aGVuKHRvSnNvbilcclxuICAgICAgLnRoZW4oanNvbiA9PiB7Ly9qc29uINGN0YLQviDQvtGC0LLQtdGCINCyINCy0LjQtNC1INC+0LTQvdC+0LPQviDQvtCx0YzQtdC60YLQsCB7cGhvdG86e30sIHVzZXI6e319XHJcbiAgICAgICAgLy/QvdC40YfQtdCz0L4g0L3QtSDQtNC10LvQsNGC0Ywg0YfRgtC+0LHRiyDQvdC1INC90LDQs9GA0YPQttCw0YLRjCDRgdC10YDQstC10YAg0LvQuNGI0L3QuNC80Lgg0LfQsNC/0YDQvtGB0LDQvNC4INC90LAg0LfQsNCz0YDRg9C30LrRgy5cclxuICAgICAgfSlcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVDbGlja1ByZXZpZXcgPSAoaWQpID0+IHsvL9C/0L7QstC10YjQtdC9INC90LAgcHJldmlld1xyXG4gICAgY29uc29sZS5sb2coYHByZXZpZXcgaXMgY2xpY2tlZC4gZ2V0dGluZyBpbWFnZSBvYmouLi5pZDpgLCBpZCk7XHJcbiAgICBjb25zdCBjbGlja2VkT2JqID0gaW1hZ2VzLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7Ly/QvdCw0LnRgtC4INC40YLQtdC8INGBINC90YPQttC90YvQvCDQsNC50LTQuCDQsiDRgdGC0LXQudGC0LVcclxuICAgIGNvbnNvbGUubG9nKGBjbGlja2VkSW1hZ2VPYmogaXM6YCwgY2xpY2tlZE9iaik7XHJcbiAgICBzZXRDbGlja2VkSW1hZ2VPYmooY2xpY2tlZE9iaik7Ly/Rg9GB0YLQsNC90L7QstC40YLRjCDRgdGC0LXQudGCINC+0YLQutGA0YvRgtC+0Lkg0LrQsNGA0YLQuNC90LrQuCwg0LrQvtGCINC/0L7RgtC+0Lwg0LHRg9C00LXRgiDQv9C10YDQtdC00LDQstCw0YLRjCDQstGB0Y4g0LjQvdGE0YMg0L/RgNC4INC00LXRgtCw0LvRjNC90L7QvCDQv9GA0L7RgdC80L7RgtGA0LUuXHJcbiAgICBjb25zb2xlLmxvZyhgc2V0Q2xpY2tlZEltYWdlT2JqIGlzIGRvbmVgKTtcclxuICAgIHNldElzQ2FyZE9wZW5lZCh0cnVlKTsvL9GD0YHRgtCw0L3QvtCy0LjRgtGMINGB0YLQtdC50YIg0LHRg9C70LjQvdGMINGB0YLQsNGC0YPRgdCwINC+0YLQutGA0YvRgtC+0YHRgtC4INC60LDRgNGC0LjQvdC60LhcclxuICAgIGNvbnNvbGUubG9nKGBzZXRJc0RvbmUgaXMgZG9uZSAtIGVuZCBvZiBoYW5kbGVDbGlja1ByZXZpZXcgZnVuY3Rpb24uIGApO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrSGVhcnQgPSAoaWQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdoZWFydCBpcyBjbGlja2VkLiBnZXR0aW5nIGltYWdlIG9iai4uLmlkOicsIGlkKTtcclxuICAgIGNvbnN0IGNsaWNrZWRPYmogPSBpbWFnZXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTsvL9C90LDQudGC0Lgg0LjRgtC10Lwg0YEg0L3Rg9C20L3Ri9C8INCw0LnQtNC4INCyINGB0YLQtdC50YLQtVxyXG4gICAgc2V0Q2xpY2tlZEltYWdlT2JqKGNsaWNrZWRPYmopOy8v0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0YHRgtC10LnRgiDQvtGC0LrRgNGL0YLQvtC5INC60LDRgNGC0LjQvdC60LgsINC60L7RgiDQv9C+0YLQvtC8INCx0YPQtNC10YIg0L/QtdGA0LXQtNCw0LLQsNGC0Ywg0LLRgdGOINC40L3RhNGDINC/0YDQuCDQtNC10YLQsNC70YzQvdC+0Lwg0L/RgNC+0YHQvNC+0YLRgNC1LlxyXG4gICAgY29uc3QgY2xpY2tlZE9iakxpa2VzQW1vdW50ID0gY2xpY2tlZE9iai5saWtlczsvL9Cy0YvRgtCw0YnQuNGC0Ywg0YfQuNGB0LvQviDQu9Cw0LnQutC+0LIg0LjQtyDQvtCx0YzQtdC60YLQsCDQtNC70Y8g0LTQsNC70YzQvdC10LnRiNC10LPQviDQuNGFINC40LfQvNC10L3QtdC90LjRjyDQvdC40LbQtS5cclxuXHJcbiAgICBpZihpc0F1dGgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2hlYXJ0Q2xpY2sgaXMgaW4gcHJvY2Vzcy4uLiBpc0F1dGggaXM6JywgaXNBdXRoKVxyXG4gICAgICBpZiAoY2xpY2tlZE9iai5saWtlZF9ieV91c2VyID09PSBmYWxzZSkgey8v0LXRgdC70Lgg0YMg0LLRi9Cx0YDQsNC90L3QvtCz0L4g0LjRgtC10LzQsCDRgdGC0L7QuNGCIGxpa2U9ZmFsc2UuLi5cclxuICAgICAgICBsaWtlUGhvdG9SZXF1ZXN0KGlkKTsvLy4uLtGC0L4g0LfQsNC/0YDQvtGBINC90LAg0YHQtdGA0LLQtdGAINC90LAg0LvQsNC50LouXHJcbiAgICAgICAgY29uc3QgbG9jYWxGaWx0ZXJlZEltYWdlcyA9IGltYWdlcy5maWx0ZXIoaXRlbSA9Pi8v0YHQvtC30LTQsNGC0Ywg0LrQvtC/0LjRjiDRgdGC0LXQudGC0LAg0YHQv9C40YHQutCwINC40LfQvNC10L3Rj9GPINC90YPQttC90YvQtSDQtNCw0L3QvdGL0LUg0YMg0L7QtNC90L7Qs9C+INCy0YvQsdGA0LDQvdC90L7Qs9C+INGN0LvQtdC80LXQvdGC0LBcclxuICAgICAgICAgIGl0ZW0uaWQgPT09IGlkXHJcbiAgICAgICAgICAgID8gKGl0ZW0ubGlrZWRfYnlfdXNlcj10cnVlLCBpdGVtLmxpa2VzPWNsaWNrZWRPYmpMaWtlc0Ftb3VudCsxKVxyXG4gICAgICAgICAgICA6IGl0ZW1cclxuICAgICAgICApO1xyXG4gICAgICAgIHNldEltYWdlcyhsb2NhbEZpbHRlcmVkSW1hZ2VzKTsvL9GD0YHRgtCw0L3QvtCy0LjRgtGMINC90L7QsiDRhNC40LvRjNGC0YDQvtCy0LDQvdGL0Lkg0YHQv9C40YHQvtC6INGBINC40LfQvNC10L3QtdC90L3Ri9C8INC40YLQtdC80L7QvC5cclxuICAgICAgfSBlbHNlIHsvL9C40L3QsNGH0LUsINGC0L7QsdC40YjRjCB0cnVlLi4uXHJcbiAgICAgICAgdW5saWtlUGhvdG9SZXF1ZXN0KGlkKTsvLy4uLtC30LDQv9GA0L7RgSDQvdCwINGB0LXRgNCy0LXRgCDQvdCwINCw0L3Qu9Cw0LnQulxyXG4gICAgICAgIGNvbnN0IGxvY2FsRmlsdGVyZWRJbWFnZXMgPSBpbWFnZXMuZmlsdGVyKGl0ZW0gPT4vL9GB0L7Qt9C00LDRgtGMINC60L7Qv9C40Y4g0YHRgtC10LnRgtCwINGB0L/QuNGB0LrQsCDQuNC30LzQtdC90Y/RjyDQvdGD0LbQvdGL0LUg0LTQsNC90L3Ri9C1INGDINC+0LTQvdC+0LPQviDQstGL0LHRgNCw0L3QvdC+0LPQviDRjdC70LXQvNC10L3RgtCwXHJcbiAgICAgICAgICBpdGVtLmlkID09PSBpZFxyXG4gICAgICAgICAgICA/IChpdGVtLmxpa2VkX2J5X3VzZXI9ZmFsc2UsIGl0ZW0ubGlrZXM9Y2xpY2tlZE9iakxpa2VzQW1vdW50LTEpXHJcbiAgICAgICAgICAgIDogaXRlbVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc2V0SW1hZ2VzKGxvY2FsRmlsdGVyZWRJbWFnZXMpOy8v0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0L3QvtCyINGE0LjQu9GM0YLRgNC+0LLQsNC90YvQuSDRgdC/0LjRgdC+0Log0YEg0LjQt9C80LXQvdC10L3QvdGL0Lwg0LjRgtC10LzQvtC8LlxyXG4gICAgICB9O1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdoZWFydENsaWNrIGZhaWxlZC4gaXNBdXRoIGlzOicsIGlzQXV0aCk7XHJcbiAgICAgIHNldElzSGVhcnRFcnJvcih0cnVlKTtcclxuICAgICAgc2V0VGltZW91dCgoKT0+c2V0SXNIZWFydEVycm9yKGZhbHNlKSwgMjAwMCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdG9nZ2xlU2Nyb2xsID0gKCk9PntcclxuICAgIGlmKGlzQ2FyZE9wZW5lZCl7XHJcbiAgICAgIGRpc2FibGVQYWdlU2Nyb2xsKCk7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgZW5hYmxlUGFnZVNjcm9sbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBnZXRCZWFyZXJUb2tlbkZyb21VcmxDb2RlKCk7Ly9pcyBpdCBhdXRoIHVybD8gdHJ1ZSAgLT4gc2V0QmVhcmVyVG9rZW5Ub0xvY2FsU3RvcmFnZSBhbmQgcmVsb2FkLlxyXG4gICAgZ2V0VXNlclByb2ZpbGUoKTsvL2lzIHVuc3BsYXNoIGhhcyBjb2RlPyB0cnVlIC0+IHNldFVzZXJQcm9maWxlLHNldElzQXV0aC5cclxuICAgIGdldEZpcnN0VGVuUGhvdG9zKCk7Ly9hcmUgaW1hZ2VzIGVtcHR5PyB0cnVlICAtPiBzZXRJbWFnZXMuXHJcbiAgfSwgW10pOy8vPSBjb21wb25lbnREaWRNb3VudCwgY29tcG9uZW50V2lsbFVwZGF0ZS4g0JLRi9C/0L7Qu9C90Y/QtdGC0YHRjyAxINGA0LDQtyDQv9GA0Lgg0LzQvtC90YLQsNC20LUg0Lgg0LrQsNC20LQg0YDQsNC3INC/0YDQuCDQuNC30LzQtdC90LXQvdC40LggW10uINCV0YHQu9C4INCyIFtdINC/0YPRgdGC0L4g0YLQviDQv9GA0L7RgdGC0L4gMSDRgNCw0Lcg0L/RgNC4INC80L7QvdGC0LDQttC1LlxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdG9nZ2xlU2Nyb2xsKCk7XHJcbiAgfSwgW2lzQ2FyZE9wZW5lZF0pOy8vaXMgaXNDYXJkT3BlbmVkIGNoYW5nZWQ/IC0+IGRpc2FibGVQYWdlU2Nyb2xsL2VuYWJsZVBhZ2VTY3JvbGwuXHJcblxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPEhlYWRlclxyXG4gICAgICAgIGdvVG9BdXRob3JpemVQYWdlPXtnb1RvQXV0aG9yaXplUGFnZX1cclxuICAgICAgICB0b0xvZ291dD17dG9Mb2dvdXR9XHJcbiAgICAgICAgaXNBdXRoPXtpc0F1dGh9XHJcbiAgICAgICAgdXNlclByb2ZpbGU9e3VzZXJQcm9maWxlfVxyXG4gICAgICAgIGRldkJ0bj17ZGV2QnRufVxyXG4gICAgICAvPlxyXG4gICAgICA8U3dpdGNoPnsvKtGA0LXQvdC00LXRgNC40YLRgdGPINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiBSb3V0ZSBwYXRoKi99XHJcbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9eycvJ31cclxuICAgICAgICAgICAgICAgY29tcG9uZW50PXsoKSA9PlxyXG4gICAgICAgICAgICAgICAgIDxDYXJkTGlzdFxyXG4gICAgICAgICAgICAgICAgICAgYWRkPXthZGRQaG90b3N9XHJcbiAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGlja0hlYXJ0PXtoYW5kbGVDbGlja0hlYXJ0fVxyXG4gICAgICAgICAgICAgICAgICAgaW1hZ2VzPXtpbWFnZXN9XHJcbiAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGlja1ByZXZpZXc9e2hhbmRsZUNsaWNrUHJldmlld31cclxuICAgICAgICAgICAgICAgICAgIGlzQXV0aD17aXNBdXRofVxyXG4gICAgICAgICAgICAgICAgICAgaXNIZWFydEVycm9yPXtpc0hlYXJ0RXJyb3J9XHJcbiAgICAgICAgICAgICAgICAgICBzZXRJc0hlYXJ0RXJyb3I9e3NldElzSGVhcnRFcnJvcn1cclxuICAgICAgICAgICAgICAgICAgIGNsaWNrZWRJbWFnZU9iaj17Y2xpY2tlZEltYWdlT2JqfVxyXG4gICAgICAgICAgICAgICAgIC8+fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9eycvYXV0aCd9IGNvbXBvbmVudD17KCkgPT4gPEF1dGggdW5zcGxhc2g9e3Vuc3BsYXNofS8+fS8+XHJcbiAgICAgIDwvU3dpdGNoPlxyXG4gICAgICA8Q2FyZFBhZ2VcclxuICAgICAgICBjbGlja2VkSW1hZ2VPYmo9e2NsaWNrZWRJbWFnZU9ian1cclxuICAgICAgICBoYW5kbGVDbGlja0hlYXJ0PXtoYW5kbGVDbGlja0hlYXJ0fVxyXG4gICAgICAgIGltYWdlcz17aW1hZ2VzfVxyXG4gICAgICAgIGlzQXV0aD17aXNBdXRofVxyXG4gICAgICAgIHNldElzQ2FyZE9wZW5lZD17c2V0SXNDYXJkT3BlbmVkfVxyXG4gICAgICAgIGlzQ2FyZE9wZW5lZD17aXNDYXJkT3BlbmVkfVxyXG4gICAgICAvPlxyXG4gICAgICA8Rm9vdGVyIGlzQ2FyZE9wZW5lZD17aXNDYXJkT3BlbmVkfS8+XHJcblxyXG4gICAgPC8+XHJcbiAgKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnOy8v0LjQvNC/0L7RgNGCINGA0LXQsNC60YIg0LHQuNCx0LvQuNC+0YLQtdC60Lgg0LTQu9GPINGA0LDQsdC+0YLRiyDRgSDRjdGC0LjQvCDRhNCw0LnQu9C+0LxcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nOy8v0LjQvNC/0L7RgNGCINGA0LXQsNC60YLQtNC+0Lwg0LHQuNCx0LvQuNC+0YLQtdC60Lgg0LTQu9GPINGA0LDQsdC+0YLRiyDRgSDRjdGC0LjQvCDRhNCw0LnQu9C+0LwgKNGC0L7Qu9GM0LrQviDQsiDRgtC+0Lwg0YTQsNC50LvQtSDQs9C00LUg0L3QsNGF0L7QtNC40YLRgdGPINGB0YLRgNC+0YfQutCwIFJlYWN0RE9NLnJlbmRlcilcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAuanMnO1xuaW1wb3J0IHtCcm93c2VyUm91dGVyfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5SZWFjdERPTS5yZW5kZXIgKC8v0L7RgtGA0LXQvdC00LXRgNC40YLRjC/QvtGC0YDQuNGB0L7QstCw0YLRjFxuICA8QnJvd3NlclJvdXRlcj5cbiAgICA8QXBwIC8+XG4gIDwvQnJvd3NlclJvdXRlcj4sXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcm9vdFwiKS8v0LrRg9C00LBcbik7XG5cbiIsImltcG9ydCB7IHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVPYnNlcnZlciwgb2JzZXJ2ZUVsZW1lbnQsIHVub2JzZXJ2ZUVsZW1lbnQgfSBmcm9tICcuL29ic2VydmVyJztcbmltcG9ydCB7IHRocmVzaG9sZENhY2hlS2V5IH0gZnJvbSAnLi91dGlscyc7XG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcbi8qKlxuICogdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaG9vayB0aGF0IGhhcyBhbG1vc3QgdGhlIHNhbWUgYXBpIGFzIDxPYnNlcnZlciAvPlxuICpcbiAqIEBwYXJhbSB7Q2hhbmdlSGFuZGxlcn0gb25DaGFuZ2UgRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVyc2VjdGlvbiB2YWx1ZSBmb3IgdGhpcyBlbGVtZW50IGNoYW5nZXMuXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnMgT3B0aW9uIHRvIGN1c3RvbWl6ZSBpbnN0ZXJzY3Rpb24gb2JzZXJ2ZXIgaW5zdGFuY2Ugb3IgZGlzYWJsZSBpdFxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBBcHAgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IG9uQ2hhbmdlID0gKHsgaXNJbnRlcnNlY3RpbmcgfSkgPT4gY29uc29sZS5sb2coeyBpc0ludGVyc2VjdGluZyB9KVxuICogICBjb25zdCByZWYgPSB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcihvbkNoYW5nZSlcbiAqXG4gKiAgIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogfVxuICovXG5leHBvcnQgdmFyIHVzZUludGVyc2VjdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKFxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJzZWN0aW9uIHZhbHVlIGZvciB0aGlzIGVsZW1lbnQgY2hhbmdlcy5cbiAqL1xub25DaGFuZ2UsIF9hKSB7XG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHJvb3QgPSBfYi5yb290LCByb290TWFyZ2luID0gX2Iucm9vdE1hcmdpbiwgdGhyZXNob2xkID0gX2IudGhyZXNob2xkLCBkaXNhYmxlZCA9IF9iLmRpc2FibGVkO1xuICAgIHZhciBvYnNlcnZpbmdSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICAgIHZhciBpbnN0YW5jZVJlZiA9IHVzZVJlZih7XG4gICAgICAgIC8vIHVub2JzZXJ2ZSBmdW5jdGlvbiBuZWVkcyBhbiBpbnN0YW5jZSBhbmQgaW5zdGFuY2UuaGFuZGxlQ2hhbmdlIG5lZWRzIGFuIHVub2JzZXJ2ZSB0byBiZSBjYXVnaHQgYnkgY2xvc3VyZS5cbiAgICAgICAgLy8gU28gaXQncyBlc3NlbnRpYWxseSBhIGNpcmN1bGFyIHJlZmVyZW5jZSB0aGF0J3MgcmVzb2x2ZWQgYnkgYXNzaWduaW5nIGhhbmRsZUNoYW5nZSBsYXRlclxuICAgICAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgbGluZSAqL1xuICAgICAgICAgICAgb25DaGFuZ2UoZXZlbnQsIG5vb3ApO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHZhciB1bm9ic2VydmUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZVJlZi5jdXJyZW50LnRhcmdldCAmJiBvYnNlcnZpbmdSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgdW5vYnNlcnZlRWxlbWVudChpbnN0YW5jZVJlZi5jdXJyZW50LCBpbnN0YW5jZVJlZi5jdXJyZW50LnRhcmdldCk7XG4gICAgICAgICAgICBvYnNlcnZpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuICAgIGluc3RhbmNlUmVmLmN1cnJlbnQuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IGxpbmUgKi9cbiAgICAgICAgb25DaGFuZ2UoZXZlbnQsIHVub2JzZXJ2ZSk7XG4gICAgfTtcbiAgICB2YXIgb2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlUmVmLmN1cnJlbnQub2JzZXJ2ZXIgJiZcbiAgICAgICAgICAgIGluc3RhbmNlUmVmLmN1cnJlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgICAhb2JzZXJ2aW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIG9ic2VydmVFbGVtZW50KGluc3RhbmNlUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgb2JzZXJ2aW5nUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgbWVtb2l6ZWRUaHJlc2hvbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRocmVzaG9sZDsgfSwgW1xuICAgICAgICB0aHJlc2hvbGRDYWNoZUtleSh0aHJlc2hvbGQpLFxuICAgIF0pO1xuICAgIHZhciBvYnNlcnZlciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHVub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgaW5zdGFuY2VSZWYuY3VycmVudC5vYnNlcnZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJvb3RPcHRpb24gPSB0eXBlb2Ygcm9vdCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJvb3QpIDogcm9vdDtcbiAgICAgICAgdmFyIG9icyA9IGNyZWF0ZU9ic2VydmVyKHtcbiAgICAgICAgICAgIHJvb3Q6IHJvb3RPcHRpb24sXG4gICAgICAgICAgICByb290TWFyZ2luOiByb290TWFyZ2luLFxuICAgICAgICAgICAgdGhyZXNob2xkOiBtZW1vaXplZFRocmVzaG9sZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGluc3RhbmNlUmVmLmN1cnJlbnQub2JzZXJ2ZXIgPSBvYnM7XG4gICAgICAgIHVub2JzZXJ2ZSgpO1xuICAgICAgICBvYnNlcnZlKCk7XG4gICAgICAgIHJldHVybiBvYnM7XG4gICAgfSwgW3Jvb3QsIHJvb3RNYXJnaW4sIG1lbW9pemVkVGhyZXNob2xkLCBkaXNhYmxlZF0pO1xuICAgIHZhciBzZXRSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgaXNOZXdOb2RlID0gbm9kZSAhPSBudWxsICYmIGluc3RhbmNlUmVmLmN1cnJlbnQudGFyZ2V0ICE9PSBub2RlO1xuICAgICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgICAgICB1bm9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXdOb2RlKSB7XG4gICAgICAgICAgICB1bm9ic2VydmUoKTtcbiAgICAgICAgICAgIGluc3RhbmNlUmVmLmN1cnJlbnQudGFyZ2V0ID0gbm9kZTtcbiAgICAgICAgICAgIG9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIHVub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgaW5zdGFuY2VSZWYuY3VycmVudC50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9LCBbb2JzZXJ2ZXJdKTtcbiAgICByZXR1cm4gW3NldFJlZiwgdW5vYnNlcnZlXTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9